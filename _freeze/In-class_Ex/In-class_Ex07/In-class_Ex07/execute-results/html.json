{
  "hash": "ea77ddaa1e092440afdcb8b260a49a70",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"In-class Exercise 7: Visualising, Analysing and Forecasting Time-series Data: tidyverts methods\"\nauthor: \"Sindy\"\ndate: \"last-modified\"\nexecute:\n  echo: true\n  eval: true\n  warning: false\n  freeze: true\n---\n\n\n\n## 1. Getting Started\n\n### 1.1 Load Required R Packages\n\nFor the purpose of this in-class exercise, the following R packages will be used.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npacman::p_load(tidyverse, tsibble, feasts, fable, seasonal)\n```\n:::\n\n\n\nThe packages provide the following functionality:\n- **tidyverse**: Collection of packages for data manipulation and visualization\n- **tsibble**: Provides a data infrastructure for tidy temporal data\n- **feasts**: Feature Extraction And Statistics for Time Series analysis\n- **fable**: Forecasting models including exponential smoothing and ARIMA\n- **seasonal**: Seasonal decomposition of time series\n\n### 1.2 Importing the data\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nts_data <- read_csv(\"data/visitor_arrivals_by_air.csv\")\n```\n:::\n\n\n\nIn the code chunk below, dmy() of lubridate package is used to convert data type of Month-Year field from Character to Date.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nts_data$`Month-Year` <- dmy(ts_data$`Month-Year`)\n```\n:::\n\n\n\n## 2. Converting Data Formats for Time Series Analysis\n\n### 2.1 Base ts object versus tibble object\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nts_data_ts <- ts(ts_data)       \nhead(ts_data_ts)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n     Month-Year Republic of South Africa Canada   USA Bangladesh Brunei China\n[1,]      13879                     3680   6972 31155       6786   3729 79599\n[2,]      13910                     1662   6056 27738       6314   3070 82074\n[3,]      13939                     3394   6220 31349       7502   4805 72546\n[4,]      13970                     3337   4764 26376       7333   3096 76112\n[5,]      14000                     2089   4460 26788       7988   3586 64808\n[6,]      14031                     2515   3888 29725       8301   5284 55238\n     Hong Kong SAR (China) India Indonesia Japan South Korea Kuwait Malaysia\n[1,]                 17103 41639     62683 37673       27937    284    31352\n[2,]                 21089 37170     47834 35297       22633    241    35030\n[3,]                 23230 44815     64688 42575       22876    206    37629\n[4,]                 17688 49527     58074 26839       20634    193    37521\n[5,]                 19340 67754     57089 30814       22785    140    38044\n[6,]                 19152 57380     70118 31001       22575    354    40419\n     Myanmar Pakistan Philippines Saudi Arabia Sri Lanka Taiwan Thailand\n[1,]    5269     1395       18622          406      5289  13757    18370\n[2,]    4643     1027       21609          591      4767  13921    16400\n[3,]    6218     1635       28464          626      4988  11181    23387\n[4,]    7324     1232       30131          644      7639  11665    24469\n[5,]    5395     1306       30193          470      5125  11436    21935\n[6,]    5542     1996       25800          772      4791  10689    19900\n     United Arab Emirates Vietnam Belgium & Luxembourg Finland France Germany\n[1,]                 2652   10315                 1341    1179   6918   11982\n[2,]                 2230   13415                 1449    1207   7876   13256\n[3,]                 3353   14320                 1674    1071   8066   15185\n[4,]                 3245   15413                 1426     768   8312   11604\n[5,]                 2856   14424                 1243     690   7066    9853\n[6,]                 4292   21368                 1255     624   5926    9347\n     Italy Netherlands Spain Switzerland United Kingdom Australia New Zealand\n[1,]  2953        4938  1668        4450          41934     71260        7806\n[2,]  2704        4885  1568        4381          44029     45595        4729\n[3,]  2822        5015  2254        5015          49489     53191        6106\n[4,]  3018        4902  1503        5434          35771     56514        7560\n[5,]  2165        4397  1365        4427          24464     57808        9090\n[6,]  2022        4166  1446        3359          22473     63350        9681\n```\n\n\n:::\n:::\n\n\n\nBase ts objects differ from tibble dataframes in several ways. A ts object is specifically designed for time series analysis and has class types \"mts\", \"ts\", \"matrix\", and \"array\", whereas a tibble dataframe has class types \"spec_tbl_df\", \"tbl_df\", \"tbl\", and \"data.frame\".\n\n### 2.2 Converting to tsibble format\n\nThe tsibble format allows us to work with time series data in a tidy framework, making it compatible with both dplyr/tidyr functions and time series analysis functions.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nts_tsibble <- ts_data %>%\n  mutate(Month = yearmonth(`Month-Year`)) %>%\n  as_tsibble(index = Month)\n```\n:::\n\n\n\nThis creates a tbl_ts object which can be used in both dplyr/tidyr operations and time series analysis.\n\n## 3. Data Transformation for Visualization\n\nTo visualize time series data effectively, we need to transform the data from wide to long format.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nts_longer <- ts_data %>%\n  pivot_longer(cols = c(2:34),\n               names_to = \"Country\",\n               values_to = \"Arrivals\")\n```\n:::\n\n\n\n## 4. Visualizing Time Series Data\n\n### 4.1 Single Time Series Visualization\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nts_longer %>%\n  filter(Country == \"Vietnam\") %>%\n  ggplot(aes(x = `Month-Year`, \n             y = Arrivals))+\n  geom_line(size = 0.5)\n```\n\n::: {.cell-output-display}\n![](In-class_Ex07_files/figure-html/unnamed-chunk-7-1.png){width=672}\n:::\n:::\n\n\n\n### 4.2 Multiple Time Series Visualization\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = ts_longer, \n       aes(x = `Month-Year`, \n           y = Arrivals,\n           color = Country))+\n  geom_line(size = 0.5) +\n  theme(legend.position = \"bottom\", \n        legend.box.spacing = unit(0.5, \"cm\"))\n```\n\n::: {.cell-output-display}\n![](In-class_Ex07_files/figure-html/unnamed-chunk-8-1.png){width=672}\n:::\n:::\n\n\n\n### 4.3 Using Facets for Better Comparison\n\nUsing facet_wrap allows us to compare multiple time series more effectively by giving each country its own panel.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = ts_longer, \n       aes(x = `Month-Year`, \n           y = Arrivals))+\n  geom_line(size = 0.5) +\n  facet_wrap(~ Country,\n             ncol = 3,\n             scales = \"free_y\") +\n  theme_bw()\n```\n\n::: {.cell-output-display}\n![](In-class_Ex07_files/figure-html/unnamed-chunk-9-1.png){width=672}\n:::\n:::\n\n\n\nIt's important to note that intervals are not constant across these visualizations, as pointed out by the professor.\n\n## 5. Converting tsibble for Further Analysis\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntsibble_longer <- ts_tsibble %>%\n  pivot_longer(cols = c(2:34),\n               names_to = \"Country\",\n               values_to = \"Arrivals\")\n```\n:::\n\n\n\n## 6. Analyzing Time Series Patterns\n\n### 6.1 Comparing Country-Specific Patterns\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntsibble_longer %>%\n  filter(Country == \"Vietnam\" |\n         Country == \"Italy\") %>% \n  autoplot(Arrivals) + \n  facet_grid(Country ~ ., scales = \"free_y\")\n```\n\n::: {.cell-output-display}\n![](In-class_Ex07_files/figure-html/unnamed-chunk-11-1.png){width=672}\n:::\n:::\n\n\n\nThis visualization shows distinct patterns for different countries:\n- Italy shows a strong seasonal pattern with a large spike in August and relatively consistent lower values during the rest of the year\n- Vietnam shows higher arrivals in June and July with a peak in July, relatively stable numbers from September to December, and a gradual increase from January to May\n\n### 6.2 Seasonal Subseries Analysis\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntsibble_longer %>%\n  filter(Country == \"Vietnam\" |\n         Country == \"Italy\") %>% \n  gg_subseries(Arrivals)\n```\n\n::: {.cell-output-display}\n![](In-class_Ex07_files/figure-html/unnamed-chunk-12-1.png){width=672}\n:::\n:::\n\n\n\nThe subseries plot helps visualize seasonal patterns by month across years, making it easier to identify consistent seasonal behaviors.\n\n## 7. Autocorrelation Analysis\n\n### 7.1 ACF Plots\n\nAutocorrelation Function (ACF) plots show how time series data is correlated with its lagged values.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntsibble_longer %>%\n  filter(Country == \"Vietnam\" |\n         Country == \"Italy\" |\n         Country == \"United Kingdom\" |\n         Country == \"China\") %>%\n  ACF(Arrivals) %>%\n  autoplot()\n```\n\n::: {.cell-output-display}\n![](In-class_Ex07_files/figure-html/unnamed-chunk-13-1.png){width=672}\n:::\n:::\n\n\n\nThe ACF plots reveal important patterns:\n- China shows a 6-month periodicity\n- Italy shows a 12-month peak with weak correlation at first month (~0.3)\n- For statistically significant correlation, values should exceed the blue line (95% confidence level)\n- For China and Vietnam, most/all lags show statistical significance\n- For China and Vietnam, correlation decreases then increases again, but with different periodicity (Vietnam: 12 months, China: 6 months)\n- UK shows significant lag at t-1, then non-significant values, then significance again at 12 months, indicating weak trend but strong annual seasonality\n- Both UK and Italy show less pronounced seasonal patterns compared to Vietnam and China\n\n### 7.2 PACF Plots\n\nPartial Autocorrelation Function (PACF) plots show the direct correlation between observations at different lags after removing the effects of intermediate lags.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntsibble_longer %>%\n  filter(Country == \"Vietnam\" |\n         Country == \"Italy\" |\n         Country == \"United Kingdom\" |\n         Country == \"China\") %>%\n  PACF(Arrivals) %>%\n  autoplot()\n```\n\n::: {.cell-output-display}\n![](In-class_Ex07_files/figure-html/unnamed-chunk-14-1.png){width=672}\n:::\n:::\n\n\n\nPACF plots help identify what might happen with further decomposition:\n- For the UK, the first lag is positive while the second lag is negative, suggesting a turning point where arrival patterns change\n- Statistical significance is indicated when values extend beyond the blue confidence interval\n- These visualizations help identify both statistically significant patterns and potential turning points in the data\n\n## 8. Time Series Decomposition\n\nDecomposing time series helps separate the data into trend, seasonal, and remainder components.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntsibble_longer %>%\n  filter(Country == \"Vietnam\") %>%\n  model(stl = STL(Arrivals)) %>%\n  components() %>%\n  autoplot()\n```\n\n::: {.cell-output-display}\n![](In-class_Ex07_files/figure-html/unnamed-chunk-15-1.png){width=672}\n:::\n:::\n\n\n\nThe decomposition shows:\n- The trend component shows the long-term movement\n- The seasonal component shows regular patterns\n- The remainder shows what's left after removing trend and seasonality\n\nIf the remainder shows no clear pattern, it's considered \"white noise\" - indicating a good decomposition. When patterns remain in the remainder, it suggests the decomposition is incomplete, which may indicate that more advanced methods like machine learning might be needed.\n\n## 9. Forecasting\n\n### 9.1 Creating Training and Hold-out Sets\n\nFor time series forecasting, we can't use random sampling for validation. Instead, we keep the most recent data as a hold-out set.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nvietnam_ts <- tsibble_longer %>%\n  filter(Country == \"Vietnam\") %>% \n  mutate(Type = if_else(\n    `Month-Year` >= \"2019-01-01\", \n    \"Hold-out\", \"Training\"))\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nvietnam_train <- vietnam_ts %>%\n  filter(`Month-Year` < \"2019-01-01\")\n```\n:::\n\n\n\n### 9.2 Decomposing the Training Data\n\nIt's important to analyze training data before forecasting to understand its components.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nvietnam_train %>%\n  model(stl = STL(Arrivals)) %>%\n  components() %>%\n  autoplot()\n```\n\n::: {.cell-output-display}\n![](In-class_Ex07_files/figure-html/unnamed-chunk-18-1.png){width=672}\n:::\n:::\n\n\n\n### 9.3 Fitting Forecast Models\n\nWhen fitting a good forecast model, the residuals should follow a normal distribution, indicating that the model has captured the systematic patterns in the data.\n\nHere we create an automatic ETS (Error, Trend, Seasonal) model:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfit_autoETS <- vietnam_train %>%\n  model(ETS(Arrivals))\n```\n:::\n\n\n\n### 9.4 Visualizing the Forecast Results\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfc_autoETS <- fit_autoETS %>%\n  forecast(h = \"12 months\")\n\nvietnam_ts %>%\n  ggplot(aes(x = Month, \n             y = Arrivals)) +\n  autolayer(fc_autoETS, \n            alpha = 0.6) +\n  geom_line(aes(\n    color = Type), \n    alpha = 0.8) + \n  geom_line(aes(\n    y = .mean, \n    colour = \"Forecast\"), \n    data = fc_autoETS) +\n  geom_line(aes(\n    y = .fitted, \n    colour = \"Fitted\"), \n    data = augment(fit_autoETS))\n```\n\n::: {.cell-output-display}\n![](In-class_Ex07_files/figure-html/unnamed-chunk-20-1.png){width=672}\n:::\n:::\n\n\n\nWhen visualizing forecast results, it's most useful to focus on the last few cycles rather than the entire history, as we want to assess the accuracy of predictions compared to the hold-out data.\n\n## 10. Additional Insights\n\n### 10.1 Comparing Seasonal Patterns Across Countries\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntsibble_longer %>%\n  filter(Country == \"Vietnam\" |\n         Country == \"Italy\" |\n         Country == \"Malaysia\" |\n         Country == \"Germany\") %>% \n  gg_season(Arrivals) +\n  labs(title = \"Seasonal Patterns by Country\",\n       y = \"Visitor Arrivals\")\n```\n\n::: {.cell-output-display}\n![](In-class_Ex07_files/figure-html/unnamed-chunk-21-1.png){width=672}\n:::\n:::\n\n\n\nThis visualization shows how visitor arrivals vary by month across different countries, highlighting distinct seasonal tourism patterns.\n\n### 10.2 Exploring Trend vs Seasonality Strength\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncountry_features <- tsibble_longer %>%\n  features(Arrivals, feat_stl)\n\nggplot(country_features, aes(x = trend_strength, y = seasonal_strength_year)) +\n  geom_point() +\n  geom_text(aes(label = Country), check_overlap = TRUE, hjust = -0.1, vjust = -0.1) +\n  labs(x = \"Trend Strength\", y = \"Seasonal Strength\", \n       title = \"Trend vs Seasonal Strength by Country\") +\n  theme_minimal()\n```\n\n::: {.cell-output-display}\n![](In-class_Ex07_files/figure-html/unnamed-chunk-22-1.png){width=1152}\n:::\n:::\n\n\n\nThis scatter plot helps identify which countries have strong seasonal patterns versus consistent growth trends, providing insight for targeted tourism strategies.\n\n### 10.3 ARIMA Model Fitting and Comparison\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfit_arima <- vietnam_train %>%\n  model(\n    arima_auto = ARIMA(Arrivals),\n    ets_auto = ETS(Arrivals)\n  )\n\nfit_arima %>%\n  forecast(h = \"12 months\") %>%\n  autoplot(vietnam_ts, level = NULL) +\n  labs(title = \"ARIMA vs ETS Model Comparison\",\n       y = \"Visitor Arrivals\")\n```\n\n::: {.cell-output-display}\n![](In-class_Ex07_files/figure-html/unnamed-chunk-23-1.png){width=672}\n:::\n:::\n\n\n\nComparing different forecasting methods helps identify which approach works best for specific time series patterns.\n\n### 10.4 Detecting Anomalies in Visitor Arrivals\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\naugment(fit_autoETS) %>%\n  mutate(\n    anomaly = abs(.resid) > 2*sd(.resid, na.rm = TRUE)\n  ) %>%\n  ggplot(aes(x = Month, y = Arrivals)) +\n  geom_line() +\n  geom_point(aes(color = anomaly), size = 1) +\n  scale_color_manual(values = c(\"FALSE\" = NA, \"TRUE\" = \"red\")) +\n  labs(title = \"Anomaly Detection in Vietnam Visitor Arrivals\",\n       color = \"Anomaly\")\n```\n\n::: {.cell-output-display}\n![](In-class_Ex07_files/figure-html/unnamed-chunk-24-1.png){width=672}\n:::\n:::\n\n\n\nThis visualization helps identify unusual spikes or drops in visitor arrivals that might warrant further investigation.\n\n### 10.5 Visualizing Forecast Uncertainty\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfc_autoETS %>%\n  autoplot(vietnam_ts) +\n  labs(title = \"Forecast with Prediction Intervals\",\n       y = \"Visitor Arrivals\") +\n  theme_minimal()\n```\n\n::: {.cell-output-display}\n![](In-class_Ex07_files/figure-html/unnamed-chunk-25-1.png){width=672}\n:::\n:::\n\n\n\nUnderstanding forecast uncertainty is crucial for planning, as it shows the range of likely outcomes rather than just point estimates.",
    "supporting": [
      "In-class_Ex07_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}