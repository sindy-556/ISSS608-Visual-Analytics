{
  "hash": "32432e56143fc6e7b02ca2b198c64edd",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Hands-on Exercise 8c: Analytical Mapping\"\nauthor: \"Sindy\"\ndate-modified: \"last-modified\"\nexecute:\n  echo: true\n  eval: true\n  warning: false\n  freeze: true\n---\n\n\n\n## 1. Getting Started\n\n### 1.1 Installing and loading packages\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npacman::p_load(tmap, tidyverse, sf, spdep)\n```\n:::\n\n\n\n### 1.2 Importing data\n\nFor this exercise, a prepared dataset called *NGA_wp.rds* will be used. The dataset is a polygon feature data.frame providing information on water points of Nigeria at the LGA level. This can be found in the *rds* sub-directory of the hands-on *data* folder.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nNGA_wp <- read_rds(\"data/rds/NGA_wp.rds\")\n```\n:::\n\n\n\n## 2. Basic Choropleth Mapping\n\n### 2.1 Visualising distribution of water points\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Create map of total water points with proper tmap v4 syntax\np2 <- tm_shape(NGA_wp) +\n  tm_fill(\"total_wp\",\n          fill.scale = tm_scale_intervals(n = 10, \n                                         style = \"equal\",\n                                         values = \"brewer.blues\"),\n          fill.legend = tm_legend(title = \"Total Water Points\")) +\n  tm_borders(lwd = 0.1) +\n  tm_title(text = \"Distribution of Total Water Points by LGAs\")\n\n# Create map of functional water points with proper tmap v4 syntax\np1 <- tm_shape(NGA_wp) +\n  tm_fill(\"wp_functional\",\n          fill.scale = tm_scale_intervals(n = 10, \n                                         style = \"equal\",\n                                         values = \"brewer.blues\"),\n          fill.legend = tm_legend(title = \"Functional Water Points\")) +\n  tm_borders(lwd = 0.1) +\n  tm_title(text = \"Distribution of Functional Water Points by LGAs\")\n\n# Arrange maps side by side\ntmap_arrange(p2, p1, nrow = 1)\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex08c_files/figure-html/unnamed-chunk-3-1.png){width=1536}\n:::\n:::\n\n\n\n\n\n\n### 2.2 Impact of Classification Methods on Visualizations\n\nClassification methods significantly affect how patterns are perceived on choropleth maps. Below is a comparison of different classification approaches:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntm_shape(NGA_wp) +\n  tm_fill(\"total_wp\",\n          fill.scale = tm_scale_intervals(\n            n = 5,\n            style = \"jenks\",\n            values = \"brewer.blues\"),\n          fill.legend = tm_legend(title = \"Jenks classification\")) +\n  tm_borders(lwd = 0.1) +\n  tm_layout(legend.outside = TRUE,\n            legend.outside.position = \"right\")\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex08c_files/figure-html/unnamed-chunk-4-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ntm_shape(NGA_wp) +\n  tm_fill(\"total_wp\",\n          fill.scale = tm_scale_intervals(\n            n = 5,\n            style = \"quantile\",\n            values = \"brewer.blues\"),\n          fill.legend = tm_legend(title = \"Quantile classification\")) +\n  tm_borders(lwd = 0.1) + \n  tm_layout(legend.outside = TRUE,\n            legend.outside.position = \"right\")\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex08c_files/figure-html/unnamed-chunk-5-1.png){width=672}\n:::\n:::\n\n\n\nThe Jenks classification minimizes within-class variance, highlighting natural breaks in the data, while quantile classification ensures an equal number of observations in each class. Note how this changes the visual patterns revealed in the maps.\n\n## 3. Choropleth Maps for Rates\n\nIn spatial analysis, mapping rates rather than raw counts is critical because water points are not equally distributed in space. Without accounting for the total number of water points in an area, maps end up visualizing size rather than the phenomenon of interest.\n\n### 3.1 Deriving Proportion of Functional and Non-Functional Water Points\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nNGA_wp <- NGA_wp %>%\n  mutate(pct_functional = wp_functional/total_wp) %>%\n  mutate(pct_nonfunctional = wp_nonfunctional/total_wp)\n```\n:::\n\n\n\n### 3.2 Plotting map of rate\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntm_shape(NGA_wp) +\n  tm_fill(\"pct_functional\",\n          fill.scale = tm_scale_intervals(\n            n = 10,\n            style = \"equal\",\n            values = \"brewer.blues\"),\n          fill.legend = tm_legend(\n            title = \"% Functional\",\n            hist = TRUE)) +\n  tm_borders(lwd = 0.1) +\n  tm_title(text = \"Rate map of functional water point by LGAs\") +\n  tm_layout(legend.outside = TRUE)\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex08c_files/figure-html/unnamed-chunk-7-1.png){width=672}\n:::\n:::\n\n\n\n### 3.3 Visualizing Uncertainty in Rate Maps\n\nWhen working with rates, areas with small populations (or in this case, few water points) can produce unstable rates. Small changes in counts can lead to large swings in percentages.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nNGA_wp <- NGA_wp %>%\n  mutate(reliability = case_when(\n    total_wp < 10 ~ \"Low\",\n    total_wp < 50 ~ \"Medium\",\n    TRUE ~ \"High\"\n  ))\n\n# Create faceted map with tmap v4 syntax\ntm_shape(NGA_wp) +\n  tm_fill(\"pct_functional\",\n          style = \"quantile\",\n          n = 10,\n          palette = \"Blues\") +\n  tm_borders(lwd = 0.1,\n             alpha = 1) +\n  tm_facets(by = \"reliability\", \n            ncol = 3) +\n  tm_layout(legend.outside = TRUE,\n            panel.labels = c(\"Low reliability\", \"Medium reliability\", \"High reliability\"))\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex08c_files/figure-html/unnamed-chunk-8-1.png){width=672}\n:::\n:::\n\n\n\nThis faceted approach helps identify where results might be less reliable due to small sample sizes, an important consideration when interpreting spatial patterns.\n\n## 4. Extreme Value Maps\n\nExtreme value maps are variations of common choropleth maps where the classification is designed to highlight extreme values at the lower and upper end of the scale, with the goal of identifying outliers. These maps were developed in the spirit of spatializing EDA, i.e., adding spatial features to commonly used approaches in non-spatial EDA (Anselin 1994).\n\n### 4.1 Percentile Map\n\nThe percentile map is a special type of quantile map with six specific categories: 0-1%, 1-10%, 10-50%, 50-90%, 90-99%, and 99-100%. The corresponding breakpoints can be derived by means of the base R quantile command, passing an explicit vector of cumulative probabilities as c(0,.01,.1,.5,.9,.99,1). Note that the begin and endpoint need to be included.\n\n#### Data Preparation\n\nStep 1: Exclude records with NA by using the code chunk below.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nNGA_wp <- NGA_wp %>%\n  drop_na()\n```\n:::\n\n\n\nStep 2: Creating customised classification and extracting values\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npercent <- c(0,.01,.1,.5,.9,.99,1)\nvar <- NGA_wp[\"pct_functional\"] %>%\n  st_set_geometry(NULL)\nquantile(var[,1], percent)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n       0%        1%       10%       50%       90%       99%      100% \n0.0000000 0.0000000 0.2169811 0.4791667 0.8611111 1.0000000 1.0000000 \n```\n\n\n:::\n:::\n\n\n\nWhen variables are extracted from an sf data.frame, the geometry is extracted as well. For mapping and spatial manipulation, this is the expected behavior, but many base R functions cannot deal with the geometry. Specifically, the `quantile()` gives an error. As a result `st_set_geomtry(NULL)` is used to drop geometry field.\n\n\n#### Why writing functions?\n\nWriting a function has three big advantages over using copy-and-paste:\n\n- You can give a function an evocative name that makes your code easier to understand.\n- As requirements change, you only need to update code in one place, instead of many.\n- You eliminate the chance of making incidental mistakes when you copy and paste (i.e. updating a variable name in one place, but not in another).\n\nSource: [Chapter 19: Functions](https://r4ds.had.co.nz/functions.html#functions) of **R for Data Science**.\n\n#### Creating the get.var function\n\nFirstly, we will write an R function as shown below to extract a variable (i.e. *wp_nonfunctional*) as a vector out of an sf data.frame.\n\n- arguments:\n    - vname: variable name (as character, in quotes)\n    - df: name of sf data frame\n- returns:\n    - v: vector with values (without a column name)\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nget.var <- function(vname,df) {\n  v <- df[vname] %>% \n    st_set_geometry(NULL)\n  v <- unname(v[,1])\n  return(v)\n}\n```\n:::\n\n\n\n#### A percentile mapping function\n\nNext, we will write a percentile mapping function by using the code chunk below.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npercentmap <- function(vnam, df, legtitle=NA, mtitle=\"Percentile Map\"){\n  percent <- c(0,.01,.1,.5,.9,.99,1)\n  var <- get.var(vnam, df)\n  bperc <- quantile(var, percent)\n  tm_shape(df) +\n  tm_polygons() +\n  tm_shape(df) +\n     tm_fill(vnam,\n             title=legtitle,\n             breaks=bperc,\n             palette=\"Blues\",\n          labels=c(\"< 1%\", \"1% - 10%\", \"10% - 50%\", \"50% - 90%\", \"90% - 99%\", \"> 99%\"))  +\n  tm_borders() +\n  tm_layout(main.title = mtitle, \n            title.position = c(\"right\",\"bottom\"))\n}\n```\n:::\n\n\n\n#### Test drive the percentile mapping function\n\nTo run the function, type the code chunk as shown below.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npercentmap(\"total_wp\", NGA_wp)\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex08c_files/figure-html/unnamed-chunk-13-1.png){width=672}\n:::\n:::\n\n\n\nNote that this is just a bare bones implementation. Additional arguments such as the title, legend positioning just to name a few of them, could be passed to customise various features of the map.\n\n### 4.2 Box map\n\nIn essence, a box map is an augmented quartile map, with an additional lower and upper category. When there are lower outliers, then the starting point for the breaks is the minimum value, and the second break is the lower fence. In contrast, when there are no lower outliers, then the starting point for the breaks will be the lower fence, and the second break is the minimum value (there will be no observations that fall in the interval between the lower fence and the minimum value).\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = NGA_wp,\n       aes(x = \"\",\n           y = wp_nonfunctional)) +\n  geom_boxplot()\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex08c_files/figure-html/unnamed-chunk-14-1.png){width=384}\n:::\n:::\n\n\n\n- Displaying summary statistics on a choropleth map by using the basic principles of boxplot.\n\n- To create a box map, a custom breaks specification will be used. However, there is a complication. The break points for the box map vary depending on whether lower or upper outliers are present.\n\n#### Creating the boxbreaks function\n\nThe code chunk below is an R function that creating break points for a box map.\n\n- arguments:\n    - v: vector with observations\n    - mult: multiplier for IQR (default 1.5)\n- returns:\n    - bb: vector with 7 break points compute quartile and fences\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nboxbreaks <- function(v,mult=1.5) {\n  qv <- unname(quantile(v))\n  iqr <- qv[4] - qv[2]\n  upfence <- qv[4] + mult * iqr\n  lofence <- qv[2] - mult * iqr\n  bb <- vector(mode=\"numeric\",length=7)\n  if (lofence < qv[1]) {  \n    bb[1] <- lofence\n    bb[2] <- floor(qv[1])\n  } else {\n    bb[2] <- lofence\n    bb[1] <- qv[1]\n  }\n  if (upfence > qv[5]) { \n    bb[7] <- upfence\n    bb[6] <- ceiling(qv[5])\n  } else {\n    bb[6] <- upfence\n    bb[7] <- qv[5]\n  }\n  bb[3:5] <- qv[2:4]\n  return(bb)\n}\n```\n:::\n\n\n\n#### Test drive the newly created function\n\nLet's test the newly created function\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nvar <- get.var(\"wp_nonfunctional\", NGA_wp) \nboxbreaks(var)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] -56.5   0.0  14.0  34.0  61.0 131.5 278.0\n```\n\n\n:::\n:::\n\n\n\n#### Boxmap function\n\nThe code chunk below is an R function to create a box map.\n\n- arguments:\n  - vnam: variable name (as character, in quotes)\n  - df: simple features polygon layer\n  - legtitle: legend title\n  - mtitle: map title\n  - mult: multiplier for IQR\n- returns:\n  - a tmap-element (plots a map)\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nboxmap <- function(vnam, df, \n                   legtitle=NA,\n                   mtitle=\"Box Map\",\n                   mult=1.5){\n  var <- get.var(vnam,df)\n  bb <- boxbreaks(var)\n  tm_shape(df) +\n    tm_polygons() +\n  tm_shape(df) +\n     tm_fill(vnam,title=legtitle,\n             breaks=bb,\n             palette=\"Blues\",\n          labels = c(\"lower outlier\", \n                     \"< 25%\", \n                     \"25% - 50%\", \n                     \"50% - 75%\",\n                     \"> 75%\", \n                     \"upper outlier\"))  +\n  tm_borders() +\n  tm_layout(main.title = mtitle, \n            title.position = c(\"left\",\n                               \"top\"))\n}\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ntmap_mode(\"plot\")\nboxmap(\"wp_nonfunctional\", NGA_wp)\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex08c_files/figure-html/unnamed-chunk-18-1.png){width=672}\n:::\n:::\n\n\n\n### 4.3 Spatial Autocorrelation Visualization\n\nUnderstanding whether spatial patterns show clustering is crucial. A simple approach to visualizing potential spatial autocorrelation is to map both the variable of interest and its spatial lag (neighborhood average):\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Ensure geometry column is properly set\nNGA_wp$geometry <- st_geometry(NGA_wp)\n# Create neighborhood weights\nNGA_nb <- poly2nb(NGA_wp, queen = TRUE)\nNGA_wt <- nb2listw(NGA_nb, style = \"W\", zero.policy = TRUE)\n# Calculate spatial lag of functional water point percentages\nNGA_wp$lag_pct_functional <- lag.listw(NGA_wt, NGA_wp$pct_functional)\n\n# Create original values map\nmap1 <- tm_shape(NGA_wp) +\n  tm_fill(\"pct_functional\", \n          style = \"quantile\",\n          palette = \"Blues\",\n          title = \"Functional water points (%)\") +\n  tm_borders() +\n  tm_layout(title = \"Original Values\",\n            frame = TRUE)\n\n# Create spatial lag map\nmap2 <- tm_shape(NGA_wp) +\n  tm_fill(\"lag_pct_functional\", \n          style = \"quantile\", \n          palette = \"Blues\",\n          title = \"Neighborhood average (%)\") +\n  tm_borders() +\n  tm_layout(title = \"Spatial Lag Values\",\n            frame = TRUE)\n\n# Arrange both maps side-by-side\ntmap_arrange(map1, map2, ncol = 2)\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex08c_files/figure-html/unnamed-chunk-19-1.png){width=672}\n:::\n:::\n\n\n\nThis side-by-side comparison helps identify potential spatial clustering or dispersion patterns, a crucial first step before formal spatial autocorrelation analysis.\n\n## 5. Advanced Techniques for Analytical Mapping\n\n### 5.1 Visualizing Multiple Variables Simultaneously\n\nMultivariate mapping can reveal complex relationships between different aspects of water point data. The bivariate choropleth technique below combines functional and non-functional percentages:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Handle NA values properly with a different approach\nNGA_wp <- NGA_wp %>%\n  mutate(\n    # First ensure no NA values by replacing with 0\n    pct_functional_clean = if_else(is.na(pct_functional), 0, pct_functional),\n    pct_nonfunctional_clean = if_else(is.na(pct_nonfunctional), 0, pct_nonfunctional),\n    \n    # Then create factor categories\n    func_cat = cut(pct_functional_clean, \n                   breaks = c(-0.001, 0.33, 0.66, 1),\n                   labels = c(\"Low\", \"Medium\", \"High\")),\n    nonfunc_cat = cut(pct_nonfunctional_clean, \n                      breaks = c(-0.001, 0.33, 0.66, 1),\n                      labels = c(\"Low\", \"Medium\", \"High\")),\n    \n    # Create combined category\n    bivariate_cat = paste(func_cat, nonfunc_cat, sep = \"-\")\n  )\n\n# Create a color palette for bivariate map\nbivariate_colors <- c(\n  \"High-Low\" = \"#1a9641\",     # High functional, Low non-functional (good)\n  \"High-Medium\" = \"#a6d96a\", \n  \"High-High\" = \"#ffffbf\",\n  \"Medium-Low\" = \"#66bd63\",\n  \"Medium-Medium\" = \"#fee08b\",\n  \"Medium-High\" = \"#fdae61\",\n  \"Low-Low\" = \"#d9ef8b\",\n  \"Low-Medium\" = \"#f46d43\",\n  \"Low-High\" = \"#d73027\"      # Low functional, High non-functional (poor)\n)\n\n# Create the bivariate map with corrected tmap v4 syntax\ntm_shape(NGA_wp) +\n  tm_fill(\"bivariate_cat\",\n         fill.scale = tm_scale_categorical(values = bivariate_colors),\n         fill.legend = tm_legend(title = \"Functional vs Non-functional\")) +\n  tm_borders(lwd = 0.1) +\n  tm_layout(title = \"Bivariate Analysis of Water Point Status\",\n            legend.outside = TRUE)\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex08c_files/figure-html/unnamed-chunk-20-1.png){width=672}\n:::\n:::\n\n\n\nThis approach reveals LGAs facing compound challenges (low functionality and high non-functionality) as well as those performing well across both metrics.\n\n\n### 5.2 Spatial Pattern Analysis\n\nFor deeper understanding of water point patterns, hotspot analysis can reveal statistically significant clusters:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nset.seed(42)  # For reproducibility\nNGA_localMoran <- localmoran(NGA_wp$pct_nonfunctional, \n                             NGA_wt, \n                             zero.policy = TRUE, \n                             na.action = na.omit)\n\n# Bind results to spatial dataframe\nNGA_wp$localI <- NGA_localMoran[,1]\nNGA_wp$p_value <- NGA_localMoran[,5]\n\n# Create hotspot map\nNGA_wp <- NGA_wp %>%\n  mutate(hotspot_type = case_when(\n    p_value > 0.05 ~ \"Not Significant\",\n    localI > 0 & p_value <= 0.05 ~ \"High-High Cluster\",\n    localI < 0 & p_value <= 0.05 ~ \"Low-Low Cluster\",\n    TRUE ~ \"Spatial Outlier\"\n  ))\n\ntm_shape(NGA_wp) +\n  tm_fill(\"hotspot_type\",\n          palette = c(\"High-High Cluster\" = \"red\", \n                      \"Low-Low Cluster\" = \"blue\",\n                      \"Spatial Outlier\" = \"purple\",\n                      \"Not Significant\" = \"grey90\"),\n          title = \"Cluster Analysis\") +\n  tm_borders(lwd = 0.1, alpha = 0.5) +\n  tm_layout(main.title = \"Hotspot Analysis of Non-functional Water Points\",\n            legend.outside = TRUE)\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex08c_files/figure-html/unnamed-chunk-21-1.png){width=672}\n:::\n:::\n\n\n\nThis analysis identifies statistically significant spatial clusters of high non-functional water point rates (hotspots) and low rates (coldspots), providing evidence-based targets for intervention programs.\n\n## 6. Combining Visualization Techniques\n\nEffective spatial analysis often requires combining different visualization techniques to gain comprehensive insights. The following example integrates box map classification with hotspot analysis:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Combine box classification with hotspot analysis\nNGA_wp <- NGA_wp %>%\n  mutate(box_cat = cut(wp_nonfunctional,\n                       breaks = boxbreaks(var),\n                       labels = c(\"Lower outlier\", \n                                  \"< 25%\", \n                                  \"25% - 50%\", \n                                  \"50% - 75%\",\n                                  \"> 75%\", \n                                  \"Upper outlier\"),\n                       include.lowest = TRUE))\n\n# Create integrated visualization\ntm_shape(NGA_wp) +\n  tm_fill(\"box_cat\",\n          palette = c(\"Lower outlier\" = \"#d1e5f0\", \n                      \"< 25%\" = \"#92c5de\",\n                      \"25% - 50%\" = \"#4393c3\", \n                      \"50% - 75%\" = \"#2166ac\",\n                      \"> 75%\" = \"#053061\", \n                      \"Upper outlier\" = \"#67001f\"),\n          title = \"Box Map Classification\") +\n  tm_borders(lwd = 0.1, alpha = 0.5) +\n  tm_symbols(size = 0.2,\n             col = \"hotspot_type\",\n             palette = c(\"High-High Cluster\" = \"red\", \n                         \"Low-Low Cluster\" = \"blue\",\n                         \"Spatial Outlier\" = \"purple\",\n                         \"Not Significant\" = \"grey90\"),\n             title = \"Cluster Type\",\n             alpha = 0.7) +\n  tm_layout(main.title = \"Integrated Box Map and Hotspot Analysis\",\n            legend.outside = TRUE)\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex08c_files/figure-html/unnamed-chunk-22-1.png){width=672}\n:::\n:::\n\n\n\nThis integrated approach reveals not only areas with extreme values but also whether these extremes form statistically significant spatial patterns, providing deeper analytical insights.\n\n## 7. Reference\n\nCredits to [Prof Kam](https://r4va.netlify.app/chap23).",
    "supporting": [
      "Hands-on_Ex08c_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}