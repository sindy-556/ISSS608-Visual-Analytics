{
  "hash": "7aa17aedb1a5916d2fcbec27c65c5eb1",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Take-home Exercise 2: Be Tradewise or Otherwise\"\nauthor: \"Sindy\"\ndate-modified: \"last-modified\"\noutput:\n  html_document:\n    css: styles.css\nexecute:\n  echo: true\n  eval: true\n  warning: false\n  freeze: true\n---\n\n\n\n## Overview\n\nThis assignment requires the application of visual analytics techniques to conduct a systematic exploration and analysis of Singapore's international trade patterns and trends since 2015.\n\n## The task\n\nThis take-home exercise comprises the following requirements:\n\n1.  Obtain the \"Merchandise Trade by Region/Market\" dataset from the [Department of Statistics Singapore, DOS](https://www.singstat.gov.sg/) website via the [Merchandise Trade by Region/Market](https://www.singstat.gov.sg/find-data/search-by-theme/trade-and-investment/merchandise-trade/latest-data) page.\n\n2.  Conduct a critical evaluation of three data visualizations presented on [this page](https://www.singstat.gov.sg/modules/infographics/singapore-international-trade) by assessing their respective strengths and limitations\n\n3.  Implement enhanced versions of the selected visualizations with R packages.\n\n4.  Perform time-series forecasting methodologies on the trade data to support analytical findings.\n\n## Getting started\n\n### Load packages\n\nFirst, we load packages required:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npacman::p_load(tidyverse, readxl, dplyr, magick, gganimate, gifski, scales, ggrepel, lubridate, ggplot2, cowplot, patchwork)\n```\n:::\n\n\n\n### Import data\n\nNext, we import the \"Merchandise Trade by Region/Market\" dataset. The dataset has a hierarchical structure with continents and their respective countries, along with various trade metrics across multiple time periods.\n\nThe data preparation process handles the dataset's structure by:\n\n-   Skipping metadata and header rows\n-   Processing the hierarchical relationship between regions and countries\n-   Cleaning country names by removing indentation\n-   Creating a standardized tabular structure with clear column naming\n-   Combining domestic exports and re-exports to calculate total exports\n\nWe created four key dataframes, each corresponding to a specific trade flow:\n\n1.  `imports`: Contains all import data by country and region\n2.  `domestic_exports`: Contains Singapore's direct exports of locally produced goods\n3.  `reexports`: Contains goods that were imported and then exported with minimal processing\n4.  `total_exports`: Combines domestic exports and re-exports\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Code\"}\nfile_path <- \"data/outputFile.xlsx\"\n\nclean_trade_data <- function(file_path, sheet_name) {\n  raw_data <- read_excel(file_path, sheet = sheet_name, skip = 10)\n  \n  # Find where footnotes begin\n  for(i in 1:nrow(raw_data)) {\n    first_col_value <- raw_data[[1]][i]\n    if(is.na(first_col_value) || grepl(\"Footnotes:\", first_col_value) || first_col_value == \"\") {\n      break\n    }\n  }\n  \n  # Keep only the rows before footnotes\n  clean_data <- raw_data[1:(i-1), ]\n  \n  current_region <- NA\n  result_df <- data.frame()\n  \n  for(j in 1:nrow(clean_data)) {\n    row_value <- clean_data$`Data Series`[j]\n    \n    if(row_value %in% c(\"America\", \"Asia\", \"Europe\", \"Oceania\", \"Africa\")) {\n      current_region <- row_value\n      next  # Skip the region row itself\n    }\n    \n    # Skip the \"Total All Markets\" row\n    if(row_value == \"Total All Markets\") {\n      next\n    }\n    \n    if(grepl(\"^ +\", row_value) || !is.na(current_region)) {\n      country_name <- trimws(row_value)\n      \n      country_row <- clean_data[j, ]\n      country_row$Region <- current_region\n      country_row$`Data Series` <- country_name\n      \n      result_df <- rbind(result_df, country_row)\n    }\n  }\n  \n  names(result_df)[1] <- \"Country\"\n  \n  result_df <- result_df %>%\n    select(Country, Region, everything())\n  \n  return(result_df)\n}\n\nimports <- clean_trade_data(file_path, \"T1\")\ndomestic_exports <- clean_trade_data(file_path, \"T2\")\nreexports <- clean_trade_data(file_path, \"T3\")\n\n\n# Make sure both dataframes have the same countries and regions\nall_countries <- unique(c(domestic_exports$Country, reexports$Country))\nall_regions <- unique(c(domestic_exports$Region, reexports$Region))\n\nstandardize_df <- function(df, all_countries, all_regions) {\n  template <- expand.grid(\n    Country = all_countries,\n    Region = all_regions,\n    stringsAsFactors = FALSE\n  ) %>%\n\n    semi_join(\n      bind_rows(\n        select(domestic_exports, Country, Region),\n        select(reexports, Country, Region)\n      ),\n      by = c(\"Country\", \"Region\")\n    )\n  \n  result <- template %>%\n    left_join(df, by = c(\"Country\", \"Region\"))\n  \n  result <- result %>%\n    mutate(across(where(is.numeric), ~ifelse(is.na(.), 0, .)))\n  \n  return(result)\n}\n\ndomestic_exports <- standardize_df(domestic_exports, all_countries, all_regions)\nreexports <- standardize_df(reexports, all_countries, all_regions)\n\ntotal_exports <- domestic_exports %>%\n  select(Country, Region) %>%\n  bind_cols(\n    domestic_exports %>% \n      select(where(is.numeric)) %>%\n      rename_with(~paste0(., \"_domestic\"), everything()),\n    \n    reexports %>% \n      select(where(is.numeric)) %>%\n      # Rename columns to identify source\n      rename_with(~paste0(., \"_reexport\"), everything())\n  )\n\ndate_cols <- unique(sub(\"_domestic$|_reexport$\", \"\", \n                        names(total_exports)[-(1:2)]))\n\n# For each date, add domestic and re-export values\nfor(date in date_cols) {\n  total_exports[[date]] <- total_exports[[paste0(date, \"_domestic\")]] + \n                           total_exports[[paste0(date, \"_reexport\")]]\n}\n\n# Keep only the total columns plus Country and Region\ntotal_exports <- total_exports %>%\n  select(Country, Region, all_of(date_cols))\n\n## Check dimensions to verify. Should be the same\n# dim(domestic_exports)  # output: 154 267\n# dim(reexports)  # output: 154 267      \n# dim(total_exports)  # output: 154 267   \n```\n:::\n\n\n\nWe can verify that imports is correctly configured by examining the initial rows of the dataframe.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhead(imports)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 6 × 267\n  Country          Region `2025 Jan` `2024 Dec` `2024 Nov` `2024 Oct` `2024 Sep`\n  <chr>            <chr>       <dbl>      <dbl>      <dbl>      <dbl>      <dbl>\n1 Antigua And Bar… Ameri…         0         0           0         0          0  \n2 Argentina        Ameri…         4        12.5       116.        4.1        8.1\n3 Bahamas          Ameri…         0         8.1         0         0          0  \n4 Bermuda          Ameri…         0         0           0         0          0  \n5 Brazil           Ameri…       870.      587.        942.      640.       787. \n6 Canada           Ameri…       268.      213.        222.      324.       236. \n# ℹ 260 more variables: `2024 Aug` <dbl>, `2024 Jul` <dbl>, `2024 Jun` <dbl>,\n#   `2024 May` <dbl>, `2024 Apr` <dbl>, `2024 Mar` <dbl>, `2024 Feb` <dbl>,\n#   `2024 Jan` <dbl>, `2023 Dec` <dbl>, `2023 Nov` <dbl>, `2023 Oct` <dbl>,\n#   `2023 Sep` <dbl>, `2023 Aug` <dbl>, `2023 Jul` <dbl>, `2023 Jun` <dbl>,\n#   `2023 May` <dbl>, `2023 Apr` <dbl>, `2023 Mar` <dbl>, `2023 Feb` <dbl>,\n#   `2023 Jan` <dbl>, `2022 Dec` <dbl>, `2022 Nov` <dbl>, `2022 Oct` <dbl>,\n#   `2022 Sep` <dbl>, `2022 Aug` <dbl>, `2022 Jul` <dbl>, `2022 Jun` <dbl>, …\n```\n\n\n:::\n:::\n\n\n\n## Visualisation 1: MERCHANDISE TRADE PERFORMANCE WITH MAJOR TRADING PARTNERS\n\n### Original design\n\nThis visualization is intended to display Singapore's trade relationships with its major trading partners, showing imports, exports, total trade volume, and trade balance simultaneously in a static bubble chart format. The chart uses a scatter plot framework with imports on the x-axis, exports on the y-axis, and bubble size representing total trade volume.\n\nThe original design is shown below.\n\n![MERCHANDISE TRADE PERFORMANCE WITH MAJOR TRADING PARTNERS, 2024](viz1.png)\n\n### Critique\n\n#### Clarity\n\nWhy it is clear:\n\n-   Intuitive coordinate mapping: The use of a diagonal reference line creates an immediate visual classifier for trade surplus vs deficit. This diagonal approach leverages our spatial reasoning abilities to quickly identify balanced trade positions.\n\n-   Multi-dimensional encoding: Successfully represents four data dimensions (imports, exports, total trade volume, and trade balance) in a single visualization, allowing viewers to grasp complex relationships at once.\n\n-   Direct labeling approach: Each bubble contains both qualitative (country name) and quantitative (exact trade value) information, eliminating the need to reference a separate legend for primary data points.\n\nWhy it can be confusing:\n\n-   Axis labeling position: The imports and exports labels positioned in the bottom corners could be potentially confusing or misleading, as readers may be uncertain which axis corresponds to which label. The axes would be more clearly defined if labeled directly on the sides.\n-   Regional vs country-level comparison: Presenting the EU as a single entity while showing individual countries creates an inconsistent unit of analysis. This approach obscures the distribution of countries within the EU and their individual trade positions relative to Singapore.\n-   Static limitation: The single time-point snapshot fails to reveal trends or patterns in trading relationships that have evolved over time, limiting context for analysis.\n\n#### Aesthetics\n\nWhy it is beautiful:\n\n-   Visual harmony: The consistent use of circular elements creates a visual rhythm across the chart, with the varying sizes creating a natural visual hierarchy that draws attention to major trading partners. -Bounded compositional structure: The diagonal line creates a clear compositional structure that organizes the visual space effectively, using the principle of visual balance across the chart.\n\nWhy it can be ugly:\n\n-   While the visualization is generally attractive, the arbitrary color scheme for countries misses an opportunity to add meaningful encoding (such as by geographic region), which would enhance both the aesthetic appeal and analytical value of the chart.\n\n### Animated bubble chart of Singapore's trade with major partners\n\nAnimated bubble chart of Singapore's trade with major partners This visualization shows an animated bubble chart displaying Singapore's merchandise trade performance with its top 20 trading partners over time. The animation provides several key insights that a static visualization cannot:\n\n-   Temporal evolution: We can observe how trading relationships have evolved over the years, with some partners becoming more significant while others decline in importance.\n-   Regional patterns: By color-coding bubbles by region, we can easily identify which regions have become increasingly important to Singapore's trade network.\n-   Trade balance dynamics: The animation reveals how the trade balance (surplus or deficit) with key partners has shifted over time, with bubbles moving across the diagonal line that represents balanced trade.\n-   Comparative size changes: The changing size of bubbles represents the growth or decline in total trade volume with each partner, offering a visual representation of Singapore's changing trade priorities.\n-   Market concentration or diversification: We can observe whether Singapore's trade has become more concentrated among fewer partners or more diversified across many partners over the years.\n\n### Data preparation\n\nWe'll work with the existing dataframes (imports and total_exports) that were already created in the data preparation step.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Get all date columns (excluding Country and Region columns)\ndate_cols <- colnames(imports)[-(1:2)]\n\ndate_objects <- as.Date(paste0(\"01 \", date_cols), format = \"%d %Y %b\")\nif(any(is.na(date_objects))) {\n  date_objects <- as.Date(paste0(\"01 \", date_cols), format = \"%d %b %Y\")\n}\n\n# Sort date columns chronologically\ndate_cols_sorted <- date_cols[order(date_objects)]\n\nlatest_period <- tail(date_cols_sorted, 1)\n\n# Now identify top 20 countries by total trade volume in the latest period\ntop_countries <- imports %>%\n  left_join(total_exports %>% select(Country, Region, all_of(latest_period)), \n            by = c(\"Country\", \"Region\"), \n            suffix = c(\"_imports\", \"_exports\")) %>%\n  mutate(total_trade = .data[[paste0(latest_period, \"_imports\")]] + \n                      .data[[paste0(latest_period, \"_exports\")]]) %>%\n  arrange(desc(total_trade)) %>%\n  slice_head(n = 20) %>%\n  select(Country, Region)\n\n# Print top countries for reference\ntop_countries\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 20 × 2\n   Country              Region \n   <chr>                <chr>  \n 1 Taiwan               Asia   \n 2 Malaysia             Asia   \n 3 China                Asia   \n 4 United States        America\n 5 Hong Kong            Asia   \n 6 Korea, Rep Of        Asia   \n 7 Indonesia            Asia   \n 8 Japan                Asia   \n 9 Viet Nam             Asia   \n10 Thailand             Asia   \n11 India                Asia   \n12 United Arab Emirates Asia   \n13 Australia            Oceania\n14 Philippines          Asia   \n15 Germany              Europe \n16 United Kingdom       Europe \n17 France               Europe \n18 Switzerland          Europe \n19 Netherlands          Europe \n20 Brazil               America\n```\n\n\n:::\n\n```{.r .cell-code}\n# Create a long format dataset for trade data over time for the top 20 countries\ntrade_data_long <- tibble()\n\nfor(date_col in date_cols_sorted) {\n  period_imports <- imports %>%\n    semi_join(top_countries, by = c(\"Country\", \"Region\")) %>%\n    select(Country, Region, all_of(date_col)) %>%\n    rename(Imports = all_of(date_col))\n  \n  period_exports <- total_exports %>%\n    semi_join(top_countries, by = c(\"Country\", \"Region\")) %>%\n    select(Country, Region, all_of(date_col)) %>%\n    rename(Exports = all_of(date_col))\n  \n  # Join imports and exports\n  period_data <- period_imports %>%\n    left_join(period_exports, by = c(\"Country\", \"Region\")) %>%\n    mutate(\n      Period = date_col,\n      Date = as.Date(paste0(\"01 \", date_col), format = \"%d %Y %b\", tz = \"UTC\"),\n      Date = if(all(is.na(Date))) as.Date(paste0(\"01 \", date_col), format = \"%d %b %Y\", tz = \"UTC\") else Date,\n      TotalTrade = Imports + Exports,\n      TradeBalance = Exports - Imports,\n      NetExporter = Exports > Imports,\n      Year = year(Date),\n      Month = month(Date)\n    )\n  \n  trade_data_long <- bind_rows(trade_data_long, period_data)\n}\n\nif(any(is.na(trade_data_long$Date))) {\n  periods <- unique(trade_data_long$Period)\n  period_dates <- seq.Date(from = as.Date(\"2003-01-01\"), \n                           by = \"month\", \n                           length.out = length(periods))\n  period_map <- tibble(\n    Period = periods,\n    MappedDate = period_dates\n  )\n  \n  trade_data_long <- trade_data_long %>%\n    left_join(period_map, by = \"Period\") %>%\n    mutate(Date = coalesce(Date, MappedDate)) %>%\n    select(-MappedDate)\n}\n\ntrade_data_long <- trade_data_long %>%\n  mutate(PeriodLabel = format(Date, \"%b %Y\"))\n\nglimpse(trade_data_long)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nRows: 5,300\nColumns: 12\n$ Country      <chr> \"Brazil\", \"United States\", \"China\", \"Hong Kong\", \"India\",…\n$ Region       <chr> \"America\", \"America\", \"Asia\", \"Asia\", \"Asia\", \"Asia\", \"As…\n$ Imports      <dbl> 77.6, 2129.9, 1539.1, 427.0, 172.8, 1255.1, 1902.4, 676.3…\n$ Exports      <dbl> 27.1, 2777.5, 1258.9, 2277.8, 435.0, 2356.8, 1426.5, 1012…\n$ Period       <chr> \"2003 Jan\", \"2003 Jan\", \"2003 Jan\", \"2003 Jan\", \"2003 Jan…\n$ Date         <date> 2003-01-01, 2003-01-01, 2003-01-01, 2003-01-01, 2003-01-…\n$ TotalTrade   <dbl> 104.7, 4907.4, 2798.0, 2704.8, 607.8, 3611.9, 3328.9, 168…\n$ TradeBalance <dbl> -50.5, 647.6, -280.2, 1850.8, 262.2, 1101.7, -475.9, 336.…\n$ NetExporter  <lgl> FALSE, TRUE, FALSE, TRUE, TRUE, TRUE, FALSE, TRUE, TRUE, …\n$ Year         <dbl> 2003, 2003, 2003, 2003, 2003, 2003, 2003, 2003, 2003, 200…\n$ Month        <dbl> 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, …\n$ PeriodLabel  <chr> \"Jan 2003\", \"Jan 2003\", \"Jan 2003\", \"Jan 2003\", \"Jan 2003…\n```\n\n\n:::\n:::\n\n\n\n### Creating the animated bubble chart\n\nNow, we will create an animated bubble chart showing Singapore's trade patterns over time. The animation showcases:\n\n-   Regional color-coding to identify geographic trade patterns\n-   Bubble size representing total trade volume\n-   Position relative to the diagonal line showing trade balance (surplus/deficit)\n-   Special highlighting for top 5 trading partners\n-   Clear annotations explaining the trade balance zones\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Define color scheme for regions\nregion_colors <- c(\n  \"Asia\" = \"#1E88E5\",       # Blue\n  \"America\" = \"#D81B60\",    # Red\n  \"Europe\" = \"#8E24AA\",     # Purple\n  \"Oceania\" = \"#43A047\",    # Green\n  \"Africa\" = \"#F57C00\"      # Orange\n)\n\ntop_partners <- trade_data_long %>%\n  filter(Period == latest_period) %>%\n  arrange(desc(TotalTrade)) %>%\n  slice_head(n = 5) %>%\n  pull(Country)\n\n# Add a new column to identify top partners\ntrade_data_long <- trade_data_long %>%\n  mutate(\n    TopPartner = if_else(Country %in% top_partners, Country, \"Other\"),\n    TopPartnerFactor = factor(TopPartner, levels = c(top_partners, \"Other\"))\n  )\n\npartner_colors <- c(\n  setNames(RColorBrewer::brewer.pal(5, \"Set1\"), top_partners),\n  \"Other\" = \"gray70\"\n)\n\n# Create the base plot\np <- ggplot(\n  trade_data_long, \n  aes(x = Imports, y = Exports, \n      size = TotalTrade, \n      color = Region,\n      fill = Region,\n      alpha = 0.7)\n) +\n\n  annotate(\"rect\", xmin = -Inf, xmax = Inf, ymin = -Inf, ymax = Inf,\n           fill = \"white\", alpha = 0.2) +\n  geom_polygon(\n    data = data.frame(\n      x = c(0, max(trade_data_long$Imports) * 1.2, 0),\n      y = c(0, max(trade_data_long$Exports) * 1.2, max(trade_data_long$Exports) * 1.2)\n    ),\n    aes(x = x, y = y),\n    fill = \"white\", \n    alpha = 0.2,\n    inherit.aes = FALSE\n  ) +\n  geom_abline(intercept = 0, slope = 1, linetype = \"dashed\", color = \"gray70\") +\n  geom_point(shape = 21, stroke = 0.5) +\n  geom_point(\n    data = function(x) filter(x, Country %in% top_partners),\n    aes(color = Country), \n    shape = 21, \n    stroke = 1.5,\n    alpha = 0.9\n  ) +\n  geom_text_repel(\n    aes(label = Country),\n    size = 3,\n    force = 3,\n    max.iter = 3000,\n    segment.color = \"gray50\",\n    segment.alpha = 0.6,\n    box.padding = 0.5,\n    point.padding = 0.3,\n    max.overlaps = 100,\n    color = \"black\"\n  ) +\n  scale_x_continuous(labels = label_number(suffix = \" Bil\"), \n                     expand = expansion(mult = c(0.1, 0.1))) +\n  scale_y_continuous(labels = label_number(suffix = \" Bil\"), \n                     expand = expansion(mult = c(0.1, 0.1))) +\n  scale_size_continuous(range = c(3, 20), guide = \"none\") + \n  scale_color_manual(values = c(region_colors, partner_colors)) +\n  scale_fill_manual(values = region_colors) +\n  theme_minimal() +\n  theme(\n    legend.position = \"bottom\",\n    legend.box = \"vertical\",\n    legend.justification = \"left\",    \n    legend.box.just = \"left\",     \n    legend.margin = margin(t = 5, r = 5, b = 5, l = 5),\n    panel.grid.minor = element_blank(),\n    plot.title = element_text(size = 14, face = \"bold\"),\n    plot.subtitle = element_text(size = 11, face = \"italic\"),\n    axis.title = element_text(size = 11, face = \"bold\")\n  ) +\n  # Set labels\n  labs(\n    title = \"Singapore's Merchandise Trade Performance\",\n    subtitle = \"Period: {closest_state}\",\n    x = \"Imports (S$ Bil)\",\n    y = \"Exports (S$ Bil)\",\n    color = \"Region / Top Partners\",\n    fill = \"Region\") +\n\n  annotate(\"text\", x = max(trade_data_long$Imports) * 0.25, y = max(trade_data_long$Exports) * 0.85, \n           label = \"Singapore's exports exceed imports\", \n           size = 3, color = \"darkblue\", hjust = 0) +\n  annotate(\"text\", x = max(trade_data_long$Imports) * 0.75, y = max(trade_data_long$Exports) * 0.25, \n           label = \"Singapore's imports exceed exports\", \n           size = 3, color = \"darkgreen\", hjust = 1)\n\nanimated_chart <- p + \n  transition_states(\n    states = PeriodLabel,\n    transition_length = 3,\n    state_length = 15\n  ) +\n  ease_aes('cubic-in-out') +\n  enter_fade() + \n  exit_fade()\n\n# Create the animation object\ntrade_animation <- animate(\n  animated_chart, \n  nframes = 300,\n  fps = 2,      \n  width = 800, \n  height = 800,\n  renderer = gifski_renderer(loop = TRUE),\n  res = 100\n)\n\n# Save the animation to a file\nanim_save(\"trade_animation.gif\", trade_animation)\n```\n:::\n\n\n\n![Singapore Trade Animation](trade_animation.gif)\n\n## Visualisation 2: Part 1 of MAJOR TRADING PARTNERS FOR TRADE IN SERVICES, 2023\n\n### Original design\n\nThis visualization shows Singapore's exports and imports in 2019 and 2023 for each of its top trading partners. The bars on the left indicate exports for 2019 vs 2023, and the bars on the right indicate imports for 2019 vs 2023. Each row represents a major trading partner, with numeric labels giving the exact trade values.\n\n![MAJOR TRADING PARTNERS FOR TRADE IN SERVICES, 2023](viz2.png)\n\n### Critique\n\n#### Clarity\n\nWhy it is clear:\n\n- Geographic context: The map format provides immediate geographic context, making it easy to visualize the global distribution of Singapore's trading partners.\n- Regional color-coding: Different continents are clearly distinguished by distinct color schemes, allowing viewers to quickly identify regional patterns in Singapore's trade partnerships.\nFlag identification: The use of national flags creates immediate recognition of specific countries without requiring extensive labeling or legends.\n- Visual hierarchy: The highlighted regions with dots draw attention to areas of significance in Singapore's trade network.\n\nWhy it can be confusing:\n\n- Limited quantitative information: The visualization lacks actual trade values, making it impossible to understand the relative importance of each partner or region.\n- Binary representation: Countries are either included (with a flag) or excluded, with no indication of the varying degrees of trade importance.\n- Temporal limitations: Like the first visualization, this is a static snapshot that fails to show trends or patterns over time.\n\n\n#### Aesthetics\n\nWhy it is beautiful:\n\n- Clean stylized design: The dot-matrix representation creates a modern, stylized appearance that's visually appealing and reduces the complexity of traditional maps.\n- Color harmony: The color palette is visually pleasing and creates a cohesive look while maintaining clear distinction between regions.\n- Simplified geography: By abstracting continents to dot patterns, the visualization removes unnecessary geographic details while maintaining recognizable shapes.\n\nWhy it can be ugly:\n\n- Information-to-ink ratio: The visualization uses significant space to convey relatively little quantitative information, prioritizing aesthetic appeal over analytical depth.\n- Limited analytical value: Despite its visual appeal, it offers little insight into the actual trade relationships, volumes, or trends.\n\n\n### Horizon graph: visualizing trade patterns over time by region\n\nThe horizon graph makeover addresses several limitations of the original map visualization by:\n\n- Temporal dimension: Unlike the static map, horizon graphs capture trade patterns over time (2003-2025), revealing long-term trends and fluctuations in Singapore's trade relationships.\n- Quantitative comparison: The visualization shows deviations from baseline trade values, allowing for meaningful comparisons between periods of growth and decline.\n- Regional patterns: By faceting by region (continent), the horizon graph maintains the geographic grouping from the original but adds quantitative depth.\n- Dual metrics: The visualization shows both imports and exports simultaneously, enabling comparison between these two critical trade flows.\n- Efficient use of space: Horizon graphs are specifically designed to maximize the data-to-ink ratio, allowing for the display of complex time series data in a compact format.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nprocess_trade_data <- function(df, trade_type) {\n  # Aggregate by continent\n  continent_data <- df %>%\n    group_by(Region) %>%\n    summarize(across(where(is.numeric), sum, na.rm = TRUE)) %>%\n    ungroup()\n  \n  long_data <- continent_data %>%\n    pivot_longer(\n      cols = -Region,\n      names_to = \"Date\",\n      values_to = \"Value\"\n    ) %>%\n    mutate(\n      Date = case_when(\n        grepl(\"^\\\\d{4}\\\\s+\\\\w+$\", Date) ~ as.Date(paste0(\"01 \", Date), format = \"%d %Y %b\"),\n        TRUE ~ as.Date(paste0(\"01 \", Date), format = \"%d %b %Y\")\n      )\n    ) %>%\n    filter(!is.na(Date)) %>%\n    arrange(Region, Date) %>%\n    mutate(TradeType = trade_type) %>%\n    group_by(Region) %>%\n    mutate(Baseline = mean(Value, na.rm = TRUE)) %>%\n    ungroup()\n  \n  return(long_data)\n}\n\ncreate_steps_1_to_3_horizon <- function(all_trade) {\n  max_dev_by_group <- all_trade %>%\n    group_by(Region, TradeType) %>%\n    summarize(\n      MaxDev = max(abs(Value - Baseline), na.rm = TRUE),\n      .groups = \"drop\"\n    )\n  \n  layer_data <- all_trade %>%\n    mutate(Deviation = Value - Baseline) %>%\n    left_join(max_dev_by_group, by = c(\"Region\", \"TradeType\")) %>%\n    mutate(\n      Direction = ifelse(Deviation >= 0, \"Above\", \"Below\")\n    )\n  \n  continent_order <- c(\"Asia\", \"Europe\", \"America\", \"Oceania\", \"Africa\")\n  layer_data <- layer_data %>%\n    mutate(Region = factor(Region, levels = continent_order))\n  \n  create_section_plots <- function(data_subset, trade_type) {\n    subset_data <- data_subset %>% filter(TradeType == trade_type)\n    \n    p1 <- ggplot(subset_data, aes(x = Date, y = Deviation)) +\n      geom_line() +\n      geom_hline(yintercept = 0, linetype = \"dashed\") +\n      facet_grid(Region ~ ., scales = \"free_y\") +\n      theme_minimal() +\n      labs(title = paste(trade_type, \"- Step 1: Standard line graph centered around baseline\"))\n    \n    p2 <- ggplot(subset_data, aes(x = Date, y = abs(Deviation), fill = Direction)) +\n      geom_area(alpha = 0.7) + # Added translucency\n      scale_fill_manual(values = c(\n        \"Above\" = \"#3498DB\", \"Below\" = \"#E67E22\"\n      )) +\n      facet_grid(Region ~ ., scales = \"free_y\") +\n      theme_minimal() +\n      labs(title = paste(trade_type, \"- Step 2: Color (blue positive, orange negative) and layering\"))\n    \n    p3 <- ggplot(subset_data, aes(x = Date, y = abs(Deviation), fill = Direction)) +\n      geom_area(alpha = 0.7) + # Added translucency\n      scale_fill_manual(values = c(\n        \"Above\" = \"#3498DB\", \"Below\" = \"#E67E22\"\n      )) +\n      facet_grid(Region ~ ., scales = \"free_y\") +\n      theme_minimal() +\n      labs(title = paste(trade_type, \"- Step 3: Mirroring around the baseline (negatives folded up)\"))\n    \n    return(list(p1 = p1, p2 = p2, p3 = p3))\n  }\n  \n  # Generate plots for both trade types\n  exports_plots <- create_section_plots(layer_data, \"Exports\")\n  imports_plots <- create_section_plots(layer_data, \"Imports\")\n  \n  combined_steps <- plot_grid(\n    exports_plots$p1, imports_plots$p1,\n    exports_plots$p2, imports_plots$p2,\n    exports_plots$p3, imports_plots$p3,\n    ncol = 2,\n    align = \"hv\"\n  )\n  \n  final_step3 <- plot_grid(\n    exports_plots$p3 + labs(title = \"Exports\") + theme(legend.position = \"right\"),\n    imports_plots$p3 + labs(title = \"Imports\") + theme(legend.position = \"right\"),\n    ncol = 1,\n    align = \"v\"\n  )\n  \n  final_with_title <- plot_grid(\n    ggdraw() + draw_label(\"Singapore's Trade Patterns by Continent (2003-2025)\", fontface = \"bold\", size = 16),\n    final_step3,\n    ggdraw() + draw_label(\"/n/nBaseline = Average monthly trade value for each continent over the entire period (2003-2025)\", size = 8),\n    ncol = 1,\n    rel_heights = c(0.1, 1, 0.1)\n  )\n\n  return(list(steps = combined_steps, final_step3 = final_with_title))\n}\n\nimports_processed <- process_trade_data(imports, \"Imports\")\nexports_processed <- process_trade_data(total_exports, \"Exports\")\nall_trade <- bind_rows(imports_processed, exports_processed)\n\nhorizon_plots <- create_steps_1_to_3_horizon(all_trade)\nhorizon_plots$final_step3\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex2_files/figure-html/unnamed-chunk-6-1.png){width=1152}\n:::\n:::\n\n\n\n\n## Visualisation 3: Part 2 of MAJOR TRADING PARTNERS FOR TRADE IN SERVICES, 2023\n\n### Original design\n\nThis visualization shows Singapore’s exports and imports in 2019 and 2023 for each of its top trading partners. The bars on the left indicate exports for 2019 vs 2023, and the bars on the right indicate imports for 2019 vs 2023. Each row represents a major trading partner, with numeric labels giving the exact trade values.\n\n![MAJOR TRADING PARTNERS FOR TRADE IN SERVICES, 2023](viz3.png)\nIntended message\n\n- Identify major trading partners – United States, EU‐27, Mainland China, and so on.\n- Compare changes in trade – How much exports and imports have grown (or shrunk) for each partner since 2019.\n- Highlight relative magnitudes – For instance, the United States shows a large jump from `S$50.7 Bil` to `S$108 Bil` in imports, while EU‐27’s imports grew more modestly from `S$40.4 Bil` to `S$42.2 Bil`.\n\n### Critique\n\n#### Clarity\n\nWhy it is clear:\n\n- Straightforward grouping: Each trading partner is in its own row, with 2019 and 2023 clearly labeled under “Exports” (green bars) and “Imports” (blue bars).\n- Immediate numeric readout: Viewers see the numbers for both 2019 and 2023 at a glance, without needing to reference additional legends.\n\nWhy it can be confusing:\n\n- Separate bars for exports vs. imports: Because the bars are on opposite sides of the figure, it can be challenging to compare total trade or observe which side grew faster.\n- Not intuitive to compare and rank the relative difference of imports and exports between the countries.\n\n#### Aesthetics\n\nWhy it is beautiful:\n\n- Organized layout: Partners are neatly stacked from top to bottom with icons and flags, giving a strong visual identity.\n- Color‐coding for years: Different color intensities help distinguish 2019 from 2023, making the chart visually appealing and fairly easy to decode.\n    \nWhy it can be ugly:\n\n- Limited temporal perspective: We only see two time points and cannot discern any intermediate trends or fluctuations (for instance, whether trade dipped in 2020 and rebounded afterward).\n\n\n### Slope charts: visualizing year-by-year trade evolution\n\n\nThe enhanced slope chart redesign addresses several limitations of the original bar chart by:\n\n- Continuous timeline: Rather than showing just two years, the slope charts reveal the continuous evolution of trade from 2020 to 2025, capturing year-over-year changes.\n- Revealing patterns: The slopes' directions and steepness immediately reveal growth or decline patterns in trade relationships, making trends more apparent than in static bar comparisons.\n- Country-specific trajectories: By using color-coding and connecting lines, viewers can follow each country's specific trade trajectory across multiple years.\n- Multiple time windows: Breaking the visualization into year-pair panels (2020→2021, 2021→2022, etc.) allows for more detailed analysis of how trade relationships evolved during specific time periods.\nParallel comparison: Stacking imports and exports charts vertically maintains the original's separation while facilitating direct comparison of patterns between the two trade flows.\n- Value annotations: Like the original, the enhanced version retains direct value labeling at each time point, ensuring precise reading of the data.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntop_10_map <- function(country, region) {\n  case_when(\n    country == \"United States\" ~ \"United States\",\n    region == \"Europe\" ~ \"EU-27\",\n    country %in% c(\"Mainland China\", \"China\") ~ \"Mainland China\",\n    country == \"Japan\" ~ \"Japan\",\n    country %in% c(\"Brunei\", \"Cambodia\", \"Indonesia\", \"Laos\", \"Malaysia\", \n                   \"Myanmar\", \"Philippines\", \"Thailand\", \"Viet Nam\") ~ \"ASEAN\",\n    country == \"Australia\" ~ \"Australia\",\n    country == \"Hong Kong\" ~ \"Hong Kong\",\n    country == \"United Kingdom\" ~ \"United Kingdom\",\n    country == \"Switzerland\" ~ \"Switzerland\",\n    country == \"India\" ~ \"India\",\n    TRUE ~ \"Others\"\n  )\n}\n\njan_cols <- c(\"2020 Jan\",\"2021 Jan\",\"2022 Jan\",\"2023 Jan\",\"2024 Jan\",\"2025 Jan\")\n\nimports_top10 <- imports %>%\n  mutate(PartnerGroup = top_10_map(Country, Region)) %>%\n  group_by(PartnerGroup) %>%\n  summarize(across(all_of(jan_cols), sum, na.rm = TRUE)) %>%\n  ungroup() %>%\n  filter(PartnerGroup != \"Others\")\n\nexports_top10 <- total_exports %>%\n  mutate(PartnerGroup = top_10_map(Country, Region)) %>%\n  group_by(PartnerGroup) %>%\n  summarize(across(all_of(jan_cols), sum, na.rm = TRUE)) %>%\n  ungroup() %>%\n  filter(PartnerGroup != \"Others\")\n\n\ncreate_slopegraph <- function(\n  data,\n  col_left, \n  col_right, \n  title_label,\n  plot_type = c(\"Imports\",\"Exports\"),  # new argument\n  y_limits = NULL,   \n  show_y_axis = TRUE,\n  show_left_labels = TRUE\n) {\n  plot_type <- match.arg(plot_type)\n  \n  df_long <- data %>%\n    select(PartnerGroup, all_of(col_left), all_of(col_right)) %>%\n    pivot_longer(\n      cols = c(col_left, col_right),\n      names_to = \"Date\",\n      values_to = \"Value\"\n    ) %>%\n    mutate(Date = factor(Date, levels = c(col_left, col_right)))\n  \n  p <- ggplot(df_long, aes(x = Date, y = Value, group = PartnerGroup)) +\n    geom_line(aes(color = PartnerGroup), size = 1) +\n    geom_point(aes(color = PartnerGroup), size = 2)\n  \n  if (show_left_labels) {\n    p <- p +\n      geom_text(\n        data = filter(df_long, Date == !!col_left),\n        aes(label = PartnerGroup),\n        hjust = 1.05, size = 3\n      )\n  }\n  \n  p <- p +\n    geom_text(\n      data = filter(df_long, Date == !!col_right),\n      aes(label = round(Value,1)),\n      hjust = -0.05, size = 3, color = \"black\"\n    ) +\n    labs(\n      title = title_label,\n      x = NULL,\n      # Show y-axis only if show_y_axis=TRUE:\n      y = if (show_y_axis) paste0(plot_type, \" S$ (Millions)\") else NULL\n    ) +\n    theme_minimal() +\n    theme(\n      legend.position = \"none\",\n      plot.title = element_text(size = 11, face = \"bold\")\n    ) +\n    scale_x_discrete(expand = expansion(mult = c(0.2, 0.2)))\n  \n  if (!is.null(y_limits)) {\n    p <- p + scale_y_continuous(limits = y_limits, expand = c(0,0))\n  }\n  \n  if (!show_y_axis) {\n    p <- p + theme(\n      axis.title.y = element_blank(),\n      axis.text.y  = element_blank(),\n      axis.ticks.y = element_blank()\n    )\n  }\n  \n  return(p)\n}\n\nall_values_imports <- imports_top10 %>%\n  select(any_of(jan_cols)) %>%\n  as.matrix() %>%\n  as.numeric() %>%\n  na.omit()\n\ny_min_imp <- min(all_values_imports)\ny_max_imp <- max(all_values_imports)\ny_limits_imp <- c(y_min_imp, y_max_imp)\n\np1 <- create_slopegraph(\n  data = imports_top10, \n  col_left  = \"2020 Jan\", \n  col_right = \"2021 Jan\",\n  title_label   = \"Jan 2020 → Jan 2021\",\n  plot_type     = \"Imports\",    # <--- new\n  y_limits      = y_limits_imp,\n  show_y_axis   = TRUE,\n  show_left_labels = TRUE\n)\np2 <- create_slopegraph(\n  imports_top10, \"2021 Jan\", \"2022 Jan\",\n  title_label   = \"Jan 2021 → Jan 2022\",\n  plot_type     = \"Imports\",\n  y_limits      = y_limits_imp,\n  show_y_axis   = FALSE,\n  show_left_labels = FALSE\n)\np3 <- create_slopegraph(\n  imports_top10, \"2022 Jan\", \"2023 Jan\",\n  title_label   = \"Jan 2022 → Jan 2023\",\n  plot_type     = \"Imports\",\n  y_limits      = y_limits_imp,\n  show_y_axis   = FALSE,\n  show_left_labels = FALSE\n)\np4 <- create_slopegraph(\n  imports_top10, \"2023 Jan\", \"2024 Jan\",\n  title_label   = \"Jan 2023 → Jan 2024\",\n  plot_type     = \"Imports\",\n  y_limits      = y_limits_imp,\n  show_y_axis   = FALSE,\n  show_left_labels = FALSE\n)\np5 <- create_slopegraph(\n  imports_top10, \"2024 Jan\", \"2025 Jan\",\n  title_label   = \"Jan 2024 → Jan 2025\",\n  plot_type     = \"Imports\",\n  y_limits      = y_limits_imp,\n  show_y_axis   = FALSE,\n  show_left_labels = FALSE\n)\n\nimports_slope_combined <- p1 | p2 | p3 | p4 | p5\n\n\nall_values_exports <- exports_top10 %>%\n  select(any_of(jan_cols)) %>%\n  as.matrix() %>%\n  as.numeric() %>%\n  na.omit()\n\ny_min_exp <- min(all_values_exports)\ny_max_exp <- max(all_values_exports)\ny_limits_exp <- c(y_min_exp, y_max_exp)\n\np6 <- create_slopegraph(\n  exports_top10, \"2020 Jan\", \"2021 Jan\",\n  title_label   = \"Jan 2020 → Jan 2021\",\n  plot_type     = \"Exports\",\n  y_limits      = y_limits_exp,\n  show_y_axis   = TRUE,\n  show_left_labels = TRUE\n)\np7 <- create_slopegraph(\n  exports_top10, \"2021 Jan\", \"2022 Jan\",\n  title_label   = \"Jan 2021 → Jan 2022\",\n  plot_type     = \"Exports\",\n  y_limits      = y_limits_exp,\n  show_y_axis   = FALSE,\n  show_left_labels = FALSE\n)\np8 <- create_slopegraph(\n  exports_top10, \"2022 Jan\", \"2023 Jan\",\n  title_label   = \"Jan 2022 → Jan 2023\",\n  plot_type     = \"Exports\",\n  y_limits      = y_limits_exp,\n  show_y_axis   = FALSE,\n  show_left_labels = FALSE\n)\np9 <- create_slopegraph(\n  exports_top10, \"2023 Jan\", \"2024 Jan\",\n  title_label   = \"Jan 2023 → Jan 2024\",\n  plot_type     = \"Exports\",\n  y_limits      = y_limits_exp,\n  show_y_axis   = FALSE,\n  show_left_labels = FALSE\n)\np10 <- create_slopegraph(\n  exports_top10, \"2024 Jan\", \"2025 Jan\",\n  title_label   = \"Jan 2024 → Jan 2025\",\n  plot_type     = \"Exports\",\n  y_limits      = y_limits_exp,\n  show_y_axis   = FALSE,\n  show_left_labels = FALSE\n)\n\nexports_slope_combined <- p6 | p7 | p8 | p9 | p10\n\n\nfinal_figure <- imports_slope_combined /\n                exports_slope_combined\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nfinal_figure\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex2_files/figure-html/unnamed-chunk-8-1.png){width=1344}\n:::\n:::\n\n\n\n\nThe slope chart format is particularly effective for this data as it:\n\n- Highlights rate of change through the slope angle\n- Makes ranking changes obvious when lines cross\n- Shows acceleration or deceleration in trade through changing slope angles\n- Enables easy identification of outliers or unusual patterns\n- Provides a cleaner visualization for multiple entities compared to multiple overlapping line charts\n\nThis enhanced visualization allows analysts to identify not just which partners Singapore trades with most, but how these relationships have evolved year by year, revealing patterns that might indicate changing economic priorities, effects of global events, or emerging trade opportunities.\n\n\n\n",
    "supporting": [
      "Take-home_Ex2_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}