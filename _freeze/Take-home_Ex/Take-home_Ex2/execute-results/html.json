{
  "hash": "0510ce944b5c818eb18554213df83b22",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Take-home Exercise 2: Be Tradewise or Otherwise\"\nauthor: \"Sindy\"\ndate-modified: \"last-modified\"\noutput:\n  html_document:\n    css: styles.css\nexecute:\n  echo: true\n  eval: true\n  warning: false\n  freeze: true\nformat:\n  html:\n    code-fold: true\n    code-summary: \"Code\"\n---\n\n\n\n## Overview\n\nThis assignment requires the application of visual analytics techniques to conduct a systematic exploration and analysis of Singapore's international trade patterns and trends since 2015.\n\n## The Task\n\nThis take-home exercise comprises the following requirements:\n\n1. Obtain the \"Merchandise Trade by Region/Market\" dataset from the [Department of Statistics Singapore, DOS](https://www.singstat.gov.sg/) website via the [Merchandise Trade by Region/Market](https://www.singstat.gov.sg/find-data/search-by-theme/trade-and-investment/merchandise-trade/latest-data) page.\n\n2. Conduct a critical evaluation of three data visualizations presented on [this page](https://www.singstat.gov.sg/modules/infographics/singapore-international-trade) by:\n   - Assessing their respective strengths and limitations\n   - Developing conceptual sketches for improved visualization alternatives\n\n3. Implement enhanced versions of the selected visualizations with R packages.\n\n4. Perform time-series forecasting methodologies on the trade data to support analytical findings.\n\n## Getting started\n\n### Load packages\n\nFirst, we load packages required:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npacman::p_load(tidyverse, readxl, dplyr)\n```\n:::\n\n\n\n\n### Import data\n\nNext, we import the \"Merchandise Trade by Region/Market\" dataset. The dataset has a hierarchical structure with continents and their respective countries, along with various trade metrics across multiple time periods.\n\nThe data preparation process handles the dataset's structure by:\n\n- Skipping metadata and header rows\n- Processing the hierarchical relationship between regions and countries\n- Cleaning country names by removing indentation\n- Creating a standardized tabular structure with clear column naming\n- Combining domestic exports and re-exports to calculate total exports\n\nWe created four key dataframes, each corresponding to a specific trade flow:\n\n1. `imports`: Contains all import data by country and region\n2. `domestic_exports`: Contains Singapore's direct exports of locally produced goods\n3. `reexports`: Contains goods that were imported and then exported with minimal processing\n4. `total_exports`: Combines domestic exports and re-exports\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Code\"}\nfile_path <- \"data/outputFile.xlsx\"\n\nclean_trade_data <- function(file_path, sheet_name) {\n  raw_data <- read_excel(file_path, sheet = sheet_name, skip = 10)\n  \n  # Find where footnotes begin\n  for(i in 1:nrow(raw_data)) {\n    first_col_value <- raw_data[[1]][i]\n    if(is.na(first_col_value) || grepl(\"Footnotes:\", first_col_value) || first_col_value == \"\") {\n      break\n    }\n  }\n  \n  # Keep only the rows before footnotes\n  clean_data <- raw_data[1:(i-1), ]\n  \n  current_region <- NA\n  result_df <- data.frame()\n  \n  for(j in 1:nrow(clean_data)) {\n    row_value <- clean_data$`Data Series`[j]\n    \n    if(row_value %in% c(\"America\", \"Asia\", \"Europe\", \"Oceania\", \"Africa\")) {\n      current_region <- row_value\n      next  # Skip the region row itself\n    }\n    \n    # Skip the \"Total All Markets\" row\n    if(row_value == \"Total All Markets\") {\n      next\n    }\n    \n    if(grepl(\"^ +\", row_value) || !is.na(current_region)) {\n      country_name <- trimws(row_value)\n      \n      country_row <- clean_data[j, ]\n      country_row$Region <- current_region\n      country_row$`Data Series` <- country_name\n      \n      result_df <- rbind(result_df, country_row)\n    }\n  }\n  \n  names(result_df)[1] <- \"Country\"\n  \n  result_df <- result_df %>%\n    select(Country, Region, everything())\n  \n  return(result_df)\n}\n\nimports <- clean_trade_data(file_path, \"T1\")\ndomestic_exports <- clean_trade_data(file_path, \"T2\")\nreexports <- clean_trade_data(file_path, \"T3\")\n\n\n# Make sure both dataframes have the same countries and regions\nall_countries <- unique(c(domestic_exports$Country, reexports$Country))\nall_regions <- unique(c(domestic_exports$Region, reexports$Region))\n\nstandardize_df <- function(df, all_countries, all_regions) {\n  template <- expand.grid(\n    Country = all_countries,\n    Region = all_regions,\n    stringsAsFactors = FALSE\n  ) %>%\n\n    semi_join(\n      bind_rows(\n        select(domestic_exports, Country, Region),\n        select(reexports, Country, Region)\n      ),\n      by = c(\"Country\", \"Region\")\n    )\n  \n  result <- template %>%\n    left_join(df, by = c(\"Country\", \"Region\"))\n  \n  result <- result %>%\n    mutate(across(where(is.numeric), ~ifelse(is.na(.), 0, .)))\n  \n  return(result)\n}\n\ndomestic_exports <- standardize_df(domestic_exports, all_countries, all_regions)\nreexports <- standardize_df(reexports, all_countries, all_regions)\n\ntotal_exports <- domestic_exports %>%\n  select(Country, Region) %>%\n  bind_cols(\n    domestic_exports %>% \n      select(where(is.numeric)) %>%\n      rename_with(~paste0(., \"_domestic\"), everything()),\n    \n    reexports %>% \n      select(where(is.numeric)) %>%\n      # Rename columns to identify source\n      rename_with(~paste0(., \"_reexport\"), everything())\n  )\n\ndate_cols <- unique(sub(\"_domestic$|_reexport$\", \"\", \n                        names(total_exports)[-(1:2)]))\n\n# For each date, add domestic and re-export values\nfor(date in date_cols) {\n  total_exports[[date]] <- total_exports[[paste0(date, \"_domestic\")]] + \n                           total_exports[[paste0(date, \"_reexport\")]]\n}\n\n# Keep only the total columns plus Country and Region\ntotal_exports <- total_exports %>%\n  select(Country, Region, all_of(date_cols))\n\n## Check dimensions to verify. Should be the same\n# dim(domestic_exports)\n# dim(reexports)      \n# dim(total_exports)   \n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nhead(imports)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 6 × 267\n  Country          Region `2025 Jan` `2024 Dec` `2024 Nov` `2024 Oct` `2024 Sep`\n  <chr>            <chr>       <dbl>      <dbl>      <dbl>      <dbl>      <dbl>\n1 Antigua And Bar… Ameri…         0         0           0         0          0  \n2 Argentina        Ameri…         4        12.5       116.        4.1        8.1\n3 Bahamas          Ameri…         0         8.1         0         0          0  \n4 Bermuda          Ameri…         0         0           0         0          0  \n5 Brazil           Ameri…       870.      587.        942.      640.       787. \n6 Canada           Ameri…       268.      213.        222.      324.       236. \n# ℹ 260 more variables: `2024 Aug` <dbl>, `2024 Jul` <dbl>, `2024 Jun` <dbl>,\n#   `2024 May` <dbl>, `2024 Apr` <dbl>, `2024 Mar` <dbl>, `2024 Feb` <dbl>,\n#   `2024 Jan` <dbl>, `2023 Dec` <dbl>, `2023 Nov` <dbl>, `2023 Oct` <dbl>,\n#   `2023 Sep` <dbl>, `2023 Aug` <dbl>, `2023 Jul` <dbl>, `2023 Jun` <dbl>,\n#   `2023 May` <dbl>, `2023 Apr` <dbl>, `2023 Mar` <dbl>, `2023 Feb` <dbl>,\n#   `2023 Jan` <dbl>, `2022 Dec` <dbl>, `2022 Nov` <dbl>, `2022 Oct` <dbl>,\n#   `2022 Sep` <dbl>, `2022 Aug` <dbl>, `2022 Jul` <dbl>, `2022 Jun` <dbl>, …\n```\n\n\n:::\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}