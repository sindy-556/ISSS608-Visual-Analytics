{
  "hash": "fe65a24e42c60aa35556da2ea480f3bb",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Take-home Exercise 3: GeBiz Procurement Data Visualization Prototype\"\nauthor: \"Sindy\"\ndate-modified: \"last-modified\"\noutput:\n  html_document:\n    css: styles.css\nexecute:\n  echo: true\n  eval: true\n  warning: false\n  freeze: true\n---\n\n\n\n## 1. Overview\n\nThis document presents a visualization prototype for GeBiz procurement data. We will focus on creating Sankey diagrams to visualize procurement flows from ministries to agencies to suppliers.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Load required packages\npacman::p_load(dplyr, stringr, lubridate, networkD3, tidyverse, \n               plotly, DT, viridis, scales, htmlwidgets, htmltools)\n```\n:::\n\n\n\n## 2. Data Preparation\n\n### 2.1 Loading and Enriching Data\n\nBefore creating our visualizations, we need to load and prepare the relevant datasets. We're working with with the GeBiz dataset and 2 other dataset that sourced online:\n\n1.  Procurement transaction data - the core dataset with details of each procurement activity from GeBiz\n\n2.  Supplier financial information - containing grading data for suppliers (note: this dataset is incomplete, as we were unable to obtain financial grades for all suppliers)\n\n3, Agency mapping data - providing the hierarchical relationships between agencies and ministries\n\nThe code below loads these datasets from CSV files into R data frames. We'll need to handle the incomplete nature of the supplier financial data during our analysis.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Load the necessary datasets\nprocurement_df <- read.csv('data/GovernmentProcurementviaGeBIZ.csv')  # Procurement data CSV\nfinancial_df <- read.csv('data/supplier_details.csv')  # CSV with supplier financial grades\nagency_mapping_df <- read.csv('data/agency_mapping.csv')  # Agency mapping data\n```\n:::\n\n\n\n### 2.2 Extracting Supplier Grades\n\nThe `financial_df` dataset contains supplier grade information, which indicates the financial capacity of each supplier. The Singapore government classifies suppliers on a scale from S2 to S10, with each grade corresponding to specific monetary thresholds:\n\n-   S2: \\$100,000 (EPU S2)\n-   S3: \\$250,000 (EPU S3)\n-   S4: \\$500,000 (EPU S4)\n-   S5: \\$1,000,000 (EPU S5)\n-   S6: \\$3,000,000 (EPU S6)\n-   S7: \\$5,000,000 (EPU S7)\n-   S8: \\$10,000,000 (EPU S8)\n-   S9: \\$30,000,000 (EPU S9)\n-   S10: \\>\\$30,000,000 (EPU S10)\n\nHigher grades (S8-S10) represent larger companies with greater financial capacity, while lower grades (S2-S4) represent smaller contractors.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Function to extract just the S-grade (S2-S10) from the financial grade string\nextract_s_grade <- function(grade_string) {\n  if (is.na(grade_string)) {\n    return(NA)\n  }\n  \n  # Use regex to extract S followed by a number\n  match <- str_extract(grade_string, \"S\\\\d+\")\n  return(match)\n}\n\n# Create simplified financial grades\nfinancial_df$financial_grade <- sapply(financial_df$financial_grade, extract_s_grade)\n\n# Create mapping dataframes for lookups\nsupplier_grade_map <- financial_df %>% \n  select(supplier_name, financial_grade) %>%\n  distinct()\n```\n:::\n\n\n\nSince we were unable to obtain financial grades for all suppliers in our procurement dataset, we'll need to handle missing values appropriately in our analysis. We'll need to account for the incomplete coverage in our visualizations and interpretations.\n\n### 2.3 Joining Data and Creating an Enriched Dataset\n\nTo create comprehensive visualizations, we need to combine all our datasets into one enriched procurement dataset. This includes:\n\n1.  Adding supplier financial grades to the procurement records\n2.  Adding ministry information to the agencies\n3.  Creating standardized abbreviations for agencies and ministries for cleaner visualization\n\nThe code below performs these join operations and creates our main analysis dataset.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nprocurement_enriched <- procurement_df %>%\n  left_join(supplier_grade_map, by = \"supplier_name\")\n\nagency_mapping <- agency_mapping_df %>%\n  select(agency, agency_abbr, ministry, ministry_abbr)\n\nprocurement_enriched <- procurement_enriched %>%\n  left_join(agency_mapping, by = \"agency\")\n\nwrite.csv(procurement_enriched, 'procurement_output.csv', row.names = FALSE)\n```\n:::\n\n\n\n### 2.4 Verifying Data Enrichment\n\nAfter joining the datasets, it's important to verify that the enrichment was successful and understand the extent of missing data. The code below reports statistics on the completeness of our enriched dataset, including:\n\n-   Total number of procurement records\n-   Records with financial grades (expected to be incomplete due to data limitations)\n-   Records with agency abbreviations\n-   Records with ministry information\n\nThis verification step is particularly important given that we're working with external datasets of varying completeness. Understanding these limitations will help us design appropriate visualizations and interpret results accurately.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncat(\"Total procurement records:\", nrow(procurement_enriched), \"\\n\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nTotal procurement records: 18638 \n```\n\n\n:::\n\n```{.r .cell-code}\ncat(\"Records with financial grades:\", sum(!is.na(procurement_enriched$financial_grade)), \"\\n\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nRecords with financial grades: 11994 \n```\n\n\n:::\n\n```{.r .cell-code}\ncat(\"Records with agency abbreviations:\", sum(!is.na(procurement_enriched$agency_abbr)), \"\\n\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nRecords with agency abbreviations: 18638 \n```\n\n\n:::\n\n```{.r .cell-code}\ncat(\"Records with ministry information:\", sum(!is.na(procurement_enriched$ministry)), \"\\n\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nRecords with ministry information: 18638 \n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nglimpse(procurement_enriched)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nRows: 18,638\nColumns: 11\n$ tender_no            <chr> \"ACR000ETT18300010\", \"ACR000ETT18300011\", \"ACR000…\n$ tender_description   <chr> \"SUPPLY, DESIGN, DEVELOPMENT, CUSTOMIZATION, DELI…\n$ agency               <chr> \"Accounting And Corporate Regulatory Authority\", …\n$ award_date           <chr> \"11/6/2019\", \"10/5/2019\", \"30/4/2019\", \"29/8/2019…\n$ tender_detail_status <chr> \"Awarded to Suppliers\", \"Awarded to No Suppliers\"…\n$ supplier_name        <chr> \"AZAAS PTE. LTD.\", \"Unknown\", \"ACCENTURE SG SERVI…\n$ awarded_amt          <dbl> 2305880.0, 0.0, 2035000.0, 30700373.9, 178800.0, …\n$ financial_grade      <chr> \"S9\", NA, \"S10\", \"S10\", NA, \"S10\", \"S10\", \"S10\", …\n$ agency_abbr          <chr> \"ACRA\", \"ACRA\", \"ACRA\", \"ACRA\", \"ACRA\", \"ACRA\", \"…\n$ ministry             <chr> \"MINISTRY OF FINANCE\", \"MINISTRY OF FINANCE\", \"MI…\n$ ministry_abbr        <chr> \"MOF\", \"MOF\", \"MOF\", \"MOF\", \"MOF\", \"MOF\", \"MOF\", …\n```\n\n\n:::\n:::\n\n\n\n### 2.5 Exploratory Data Analysis\n\n#### Basic summary statistics for key numeric variables.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsummary(procurement_df$awarded_amt)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n     Min.   1st Qu.    Median      Mean   3rd Qu.      Max. \n0.000e+00 7.000e+03 1.647e+05 5.540e+06 8.227e+05 1.493e+09 \n```\n\n\n:::\n:::\n\n\n\n\n#### Count of records by year to understand the temporal distribution\n\n\n::: {.cell}\n\n```{.r .cell-code}\nyearly_counts <- procurement_df %>%\n  mutate(year = year(as.Date(award_date, format=\"%d/%m/%Y\"))) %>%\n  group_by(year) %>%\n  summarise(count = n(),\n            total_value = sum(awarded_amt, na.rm = TRUE),\n            avg_value = mean(awarded_amt, na.rm = TRUE),\n            median_value = median(awarded_amt, na.rm = TRUE)) %>%\n  arrange(year)\n\nprint(yearly_counts)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 6 × 5\n   year count  total_value avg_value median_value\n  <dbl> <int>        <dbl>     <dbl>        <dbl>\n1  2019  3085 16059483098.  5205667.      188446 \n2  2020  3475 16464137733.  4737881.      139185.\n3  2021  3968 22112113338.  5572609.      154595 \n4  2022  3464 21410618127.  6180894.      168960 \n5  2023  3712 20563061381.  5539618.      156255 \n6  2024   934  6641402748.  7110710.      243375 \n```\n\n\n:::\n:::\n\n\n\n\n#### Examine the distribution of procurement by ministry and agency\n\n\n::: {.cell}\n\n```{.r .cell-code}\nministry_distribution <- procurement_enriched %>%\n  group_by(ministry) %>%\n  summarise(count = n(),\n            total_value = sum(awarded_amt, na.rm = TRUE),\n            avg_value = mean(awarded_amt, na.rm = TRUE)) %>%\n  arrange(desc(total_value))\n\nhead(ministry_distribution, 10)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 10 × 4\n   ministry                                        count  total_value avg_value\n   <chr>                                           <int>        <dbl>     <dbl>\n 1 MINISTRY OF TRANSPORT                            1163 35664601010. 30666037.\n 2 MINISTRY OF NATIONAL DEVELOPMENT                 2033 25698029271. 12640447.\n 3 MINISTRY OF SUSTAINABILITY AND THE ENVIRONMENT   1712 12576675306.  7346189.\n 4 MINISTRY OF TRADE AND INDUSTRY                   2628  6357920701   2419300.\n 5 MINISTRY OF EDUCATION                            3011  5411058603.  1797097.\n 6 MINISTRY OF HOME AFFAIRS                          824  5016127066.  6087533.\n 7 MINISTRY OF HEALTH                               1142  3593118020.  3146338.\n 8 MINISTRY OF CULTURE, COMMUNITY AND YOUTH         1587  2410346023.  1518807.\n 9 MINISTRY OF FINANCE                               848  1305103449.  1539037.\n10 MINISTRY OF DIGITAL DEVELOPMENT AND INFORMATION  1296  1158374359.   893807.\n```\n\n\n:::\n:::\n\n\n\n\n#### Top agencies by procurement value\n\n\n::: {.cell}\n\n```{.r .cell-code}\nagency_distribution <- procurement_enriched %>%\n  group_by(agency) %>%\n  summarise(count = n(),\n            total_value = sum(awarded_amt, na.rm = TRUE),\n            avg_value = mean(awarded_amt, na.rm = TRUE)) %>%\n  arrange(desc(total_value))\n\nhead(agency_distribution, 10)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 10 × 4\n   agency                                            count total_value avg_value\n   <chr>                                             <int>       <dbl>     <dbl>\n 1 Land Transport Authority                            753     3.47e10 46117155.\n 2 Housing and Development Board                      1218     2.44e10 20000790.\n 3 Public Utilities Board                              938     6.92e 9  7372103.\n 4 National Environment Agency                         508     5.30e 9 10430255.\n 5 Jurong Town Corporation                             589     3.91e 9  6632663.\n 6 Ministry of Home Affairs - Ministry Headquarter 1   465     3.55e 9  7631497.\n 7 Ministry of Education                               647     3.49e 9  5389535.\n 8 Ministry of Health-Ministry Headquarter             381     2.88e 9  7564464.\n 9 Ministry of Home Affairs-Ministry Headquarter       207     1.32e 9  6376422.\n10 People's Association                                884     1.01e 9  1137689.\n```\n\n\n:::\n:::\n\n\n\n\n#### Top suppliers by procurement value\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsupplier_distribution <- procurement_enriched %>%\n  group_by(supplier_name) %>%\n  summarise(count = n(),\n            total_value = sum(awarded_amt, na.rm = TRUE),\n            avg_value = mean(awarded_amt, na.rm = TRUE)) %>%\n  arrange(desc(total_value))\n\nhead(supplier_distribution, 10)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 10 × 4\n   supplier_name                                     count total_value avg_value\n   <chr>                                             <int>       <dbl>     <dbl>\n 1 PENTA-OCEAN CONSTRUCTION COMPANY LIMITED              5 2703160550     5.41e8\n 2 WOH HUP (PRIVATE) LIMITED                             3 2241896200     7.47e8\n 3 CHINA COMMUNICATIONS CONSTRUCTION COMPANY LTD.        4 1836067980.    4.59e8\n 4 RICH CONSTRUCTION COMPANY PTE. LTD.                   6 1733331271     2.89e8\n 5 SHANGHAI TUNNEL ENGINEERING CO (SINGAPORE) PTE L…     4 1682948000     4.21e8\n 6 KEPPEL SEGHERS ENGINEERING SINGAPORE PTE. LTD.        1 1493179167     1.49e9\n 7 KAY LIM CONSTRUCTION & TRADING PTE LTD                9 1394038000     1.55e8\n 8 CES ENGINEERING & CONSTRUCTION PTE. LTD.              4 1223080000     3.06e8\n 9 CES_SDC PTE. LTD.                                     3 1222110222     4.07e8\n10 NEWCON BUILDERS PTE. LTD.                             7 1217160000     1.74e8\n```\n\n\n:::\n:::\n\n\n\n#### Distribution of suppliers by financial grade\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngrade_distribution <- procurement_enriched %>%\n  group_by(financial_grade) %>%\n  summarise(count = n(),\n            unique_suppliers = n_distinct(supplier_name),\n            total_value = sum(awarded_amt, na.rm = TRUE),\n            pct_value = round(total_value/sum(procurement_enriched$awarded_amt, na.rm = TRUE)*100, 2),\n            avg_contract_value = mean(awarded_amt, na.rm = TRUE)) %>%\n  arrange(desc(total_value))\n\nprint(grade_distribution)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 10 × 6\n   financial_grade count unique_suppliers  total_value pct_value\n   <chr>           <int>            <int>        <dbl>     <dbl>\n 1 <NA>             6644             3178 71313233781.     69.1 \n 2 S10              4414              569 25177217610.     24.4 \n 3 S8               2919              751  2442910142.      2.37\n 4 S9               1068              245  2413997429.      2.34\n 5 S7               2318              860  1535306836.      1.49\n 6 S6                618              264   216864117.      0.21\n 7 S5                368              191    96560958.      0.09\n 8 S4                212              124    38664019.      0.04\n 9 S3                 48               34    10734680.      0.01\n10 S2                 29               14     5326854.      0.01\n# ℹ 1 more variable: avg_contract_value <dbl>\n```\n\n\n:::\n:::\n\n\n#### Distribution by consolidated financial category\n\n\n::: {.cell}\n\n```{.r .cell-code}\nif(!\"financial_category\" %in% colnames(procurement_enriched)) {\n  procurement_enriched <- procurement_enriched %>%\n    mutate(financial_category = case_when(\n      financial_grade %in% c(\"S1\", \"S2\", \"S3\", \"S4\") ~ \"Small (S1-S4)\",\n      financial_grade %in% c(\"S5\", \"S6\", \"S7\") ~ \"Medium (S5-S7)\",\n      financial_grade %in% c(\"S8\", \"S9\", \"S10\") ~ \"Large (S8-S10)\",\n      TRUE ~ \"Unspecified Grade\"\n    ))\n}\ncategory_distribution <- procurement_enriched %>%\n  group_by(financial_category) %>%\n  summarise(count = n(),\n            unique_suppliers = n_distinct(supplier_name),\n            total_value = sum(awarded_amt, na.rm = TRUE),\n            pct_value = round(total_value/sum(procurement_enriched$awarded_amt, na.rm = TRUE)*100, 2),\n            avg_contract_value = mean(awarded_amt, na.rm = TRUE)) %>%\n  arrange(desc(total_value))\n\nprint(category_distribution)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 4 × 6\n  financial_category count unique_suppliers  total_value pct_value\n  <chr>              <int>            <int>        <dbl>     <dbl>\n1 Unspecified Grade   6644             3178 71313233781.     69.1 \n2 Large (S8-S10)      8401             1565 30034125180.     29.1 \n3 Medium (S5-S7)      3304             1315  1848731910.      1.79\n4 Small (S1-S4)        289              172    54725553.      0.05\n# ℹ 1 more variable: avg_contract_value <dbl>\n```\n\n\n:::\n:::\n\n\n\n\n#### Are contracts awarded consistently with financial capacity?\nThis checks if higher-grade suppliers tend to get higher-value contracts.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngrade_contract_match <- procurement_enriched %>%\n  filter(!is.na(financial_grade)) %>%\n  group_by(financial_grade) %>%\n  summarise(\n    median_contract_value = median(awarded_amt, na.rm = TRUE),\n    avg_contract_value = mean(awarded_amt, na.rm = TRUE),\n    max_contract_value = max(awarded_amt, na.rm = TRUE),\n    total_awarded = sum(awarded_amt, na.rm = TRUE),\n    contract_count = n()\n  ) %>%\n  arrange(financial_grade)\n\nprint(grade_contract_match)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 9 × 6\n  financial_grade median_contract_value avg_contract_value max_contract_value\n  <chr>                           <dbl>              <dbl>              <dbl>\n1 S10                           423925            5703946.        1025102939 \n2 S2                             40000             183685.           3204100 \n3 S3                             53175             223639.           1785714.\n4 S4                             43324.            182377.           4467000 \n5 S5                             71979.            262394.           5588000 \n6 S6                            112100             350913.           7242693.\n7 S7                            133288.            662341.          36968832 \n8 S8                            140480.            836900.          95742051.\n9 S9                            338275            2260297.          80784392 \n# ℹ 2 more variables: total_awarded <dbl>, contract_count <int>\n```\n\n\n:::\n:::\n\n\n\n### 2.6 Temporal Patterns\nExamine monthly patterns in procurement\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmonthly_patterns <- procurement_enriched %>%\n  mutate(month = month(award_date, label = TRUE),\n         year = year(award_date)) %>%\n  group_by(year, month) %>%\n  summarise(count = n(),\n            total_value = sum(awarded_amt, na.rm = TRUE)) %>%\n  ungroup()\n```\n:::\n\n\n\nPlot monthly procurement values over time\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(monthly_patterns, aes(x = month, y = total_value, group = year, color = factor(year))) +\n  geom_line() +\n  geom_point() +\n  labs(title = \"Monthly Procurement Patterns by Year\",\n       x = \"Month\",\n       y = \"Total Procurement Value (SGD)\",\n       color = \"Year\") +\n  theme_minimal() +\n  scale_y_continuous(labels = scales::comma)\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex3_files/figure-html/unnamed-chunk-16-1.png){width=672}\n:::\n:::\n\n\n\n\n### 2.7 Distribution of Award Amounts\nCreate a histogram of award amounts to see the distribution\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(procurement_enriched, aes(x = awarded_amt)) +\n  geom_histogram(bins = 30, fill = \"steelblue\", alpha = 0.7) +\n  scale_x_log10() +  # Log scale for better visualization\n  labs(title = \"Distribution of Award Amounts (Log Scale)\",\n       x = \"Award Amount (Log Scale)\",\n       y = \"Count\") +\n  theme_minimal()\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex3_files/figure-html/unnamed-chunk-17-1.png){width=672}\n:::\n:::\n\n\n\n\n#### Box plot of award amounts by financial category\n\n\n::: {.cell}\n\n```{.r .cell-code}\nif(!\"financial_category\" %in% colnames(procurement_enriched)) {\n  procurement_enriched <- procurement_enriched %>%\n    mutate(financial_category = case_when(\n      financial_grade %in% c(\"S1\", \"S2\", \"S3\", \"S4\") ~ \"Small (S1-S4)\",\n      financial_grade %in% c(\"S5\", \"S6\", \"S7\") ~ \"Medium (S5-S7)\",\n      financial_grade %in% c(\"S8\", \"S9\", \"S10\") ~ \"Large (S8-S10)\",\n      TRUE ~ \"Unspecified Grade\"\n    ))\n}\n\nggplot(procurement_enriched, aes(x = financial_category, y = awarded_amt)) +\n  geom_boxplot(fill = \"steelblue\", alpha = 0.7) +\n  scale_y_log10() +  # Log scale for better visualization\n  labs(title = \"Distribution of Award Amounts by Supplier Category\",\n       x = \"Supplier Financial Category\",\n       y = \"Award Amount (Log Scale)\") +\n  theme_minimal() +\n  theme(axis.text.x = element_text(angle = 45, hjust = 1))\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex3_files/figure-html/unnamed-chunk-18-1.png){width=672}\n:::\n:::\n\n\n\nUnderstanding missing supplier grade information.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfinancial_grade_coverage <- sum(!is.na(procurement_enriched$financial_grade)) / nrow(procurement_enriched) * 100\ncat(\"Percentage of procurement records with financial grade information:\", round(financial_grade_coverage, 2), \"%\\n\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nPercentage of procurement records with financial grade information: 64.35 %\n```\n\n\n:::\n\n```{.r .cell-code}\nmissing_grade_by_size <- procurement_enriched %>%\n  group_by(is_grade_missing = is.na(financial_grade)) %>%\n  summarise(\n    count = n(),\n    total_value = sum(awarded_amt, na.rm = TRUE),\n    avg_contract_value = mean(awarded_amt, na.rm = TRUE),\n    median_contract_value = median(awarded_amt, na.rm = TRUE),\n    pct_of_records = n() / nrow(procurement_enriched) * 100,\n    pct_of_value = sum(awarded_amt, na.rm = TRUE) / sum(procurement_enriched$awarded_amt, na.rm = TRUE) * 100\n  )\n\nprint(missing_grade_by_size)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 2 × 7\n  is_grade_missing count  total_value avg_contract_value median_contract_value\n  <lgl>            <int>        <dbl>              <dbl>                 <dbl>\n1 FALSE            11994 31937582643.           2662797.               201464.\n2 TRUE              6644 71313233781.          10733479.                90000 \n# ℹ 2 more variables: pct_of_records <dbl>, pct_of_value <dbl>\n```\n\n\n:::\n:::\n\n\n\n\n### 2.8 Relationship Between Variables\nLet's see if there's a relationship between award amount and number of contracts per supplier\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsupplier_counts <- procurement_enriched %>%\n  group_by(supplier_name) %>%\n  summarise(contract_count = n(),\n            total_value = sum(awarded_amt, na.rm = TRUE),\n            avg_value = mean(awarded_amt, na.rm = TRUE))\n\nggplot(supplier_counts, aes(x = contract_count, y = avg_value)) +\n  geom_point(alpha = 0.5) +\n  geom_smooth(method = \"loess\") +\n  scale_x_log10() +\n  scale_y_log10() +\n  labs(title = \"Relationship Between Number of Contracts and Average Value\",\n       x = \"Number of Contracts (Log Scale)\",\n       y = \"Average Contract Value (Log Scale)\") +\n  theme_minimal()\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex3_files/figure-html/unnamed-chunk-20-1.png){width=672}\n:::\n:::\n\n\n\n\n## 3. Data Preprocessing\n\n### 3.1 Date Conversion and Handling Missing Values\n\nWe'll perform several preprocessing steps to improve data quality:\n\n1.  Convert date strings to proper Date objects\n2.  Create a year field for filtering\n3.  Handle missing values in supplier names\n4.  Create financial grade categories for visualization\n\nFor the financial grades, we'll consolidate the nine different S-grades (S2-S10) into three more manageable categories:\n\n-   Small (S1-S4): Suppliers with financial capacity up to \\$500,000\n-   Medium (S5-S7): Suppliers with financial capacity between \\$1,000,000 and \\$5,000,000\n-   Large (S8-S10): Suppliers with financial capacity of \\$10,000,000 and above\n\nThese preprocessing steps ensure our data is clean, properly formatted, and appropriately categorized for visualization.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Convert award_date to proper date format\nprocurement_enriched <- procurement_enriched %>%\n  mutate(award_date = as.Date(award_date, format=\"%d/%m/%Y\"))\n\n# Create a year field for filtering\nprocurement_enriched <- procurement_enriched %>%\n  mutate(year = year(award_date))\n\n# Handle missing values in supplier_name\nprocurement_enriched <- procurement_enriched %>%\n  mutate(supplier_name = ifelse(is.na(supplier_name) | supplier_name == \"Unknown\", \"Unspecified Supplier\", supplier_name))\n\n# Create financial grade categories for better visualization\nprocurement_enriched <- procurement_enriched %>%\n  mutate(financial_category = case_when(\n    financial_grade %in% c(\"S1\", \"S2\", \"S3\", \"S4\") ~ \"Small (S1-S4)\",\n    financial_grade %in% c(\"S5\", \"S6\", \"S7\") ~ \"Medium (S5-S7)\",\n    financial_grade %in% c(\"S8\", \"S9\", \"S10\") ~ \"Large (S8-S10)\",\n    TRUE ~ \"Unspecified Grade\"\n  ))\n\n# Preview the processed data\nhead(procurement_enriched)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n          tender_no\n1 ACR000ETT18300010\n2 ACR000ETT18300011\n3 ACR000ETT19300001\n4 ACR000ETT19300002\n5 ACR000ETT19300003\n6 ACR000ETT19300004\n                                                                                                                                                                                          tender_description\n1 SUPPLY, DESIGN, DEVELOPMENT, CUSTOMIZATION, DELIVERY, INSTALLATION, TESTING, COMMISSIONING AND MAINTENANCE OF A VARIABLE CAPITAL COMPANIES (VCC) SYSTEM FOR ACCOUNTING AND CORPORATE REGULARTORY AUTHORITY\n2                APPLICATION ENHANCEMENT, CUSTOMISATION, MIGRATION, DELIVERY, INSTALLATION, TESTING AND COMMISSIONING OF THE FULLY OPERATIONAL BIZFINx 2.0 APPLICATION SYSTEM WITH AN OPTION FOR MAINTENANCE\n3                                                                                      PROVISION OF CONSULTANCY SERVICES FOR STRATEGIC BUSINESS PROCESSES RE-ENGINEERING (SBPR) AND ACRA'S IT INFRASTRUCTURE\n4                                                SUPPLY, DELIVERY, DESIGN, CUSTOMISATION, INSTALLATION, CONFIGURATION, TESTING, COMMISSIONING OF A FULLY OPERATIONAL BIZFILE+ WITH AN OPTION FOR MAINTENANCE\n5                                                                                                  PROVISION OF MEDIA MONITORING SERVICES FOR A PERIOD OF TWO YEARS WITH OPTION TO EXTEND FOR UP TO ONE YEAR\n6                 INVITATION TO TENDER FOR THE PROVISION OF CALL CENTRE SERVICES FOR ACCOUNTING AND CORPORATE REGULATORY AUTHORITY FOR A PERIOD OF 3 YEARS WITH OPTION OF UP TO 2 EXTENSIONS OF 2 YEARS EACH\n                                         agency award_date\n1 Accounting And Corporate Regulatory Authority 2019-06-11\n2 Accounting And Corporate Regulatory Authority 2019-05-10\n3 Accounting And Corporate Regulatory Authority 2019-04-30\n4 Accounting And Corporate Regulatory Authority 2019-08-29\n5 Accounting And Corporate Regulatory Authority 2019-08-06\n6 Accounting And Corporate Regulatory Authority 2019-11-05\n     tender_detail_status                            supplier_name awarded_amt\n1    Awarded to Suppliers                          AZAAS PTE. LTD.     2305880\n2 Awarded to No Suppliers                     Unspecified Supplier           0\n3    Awarded to Suppliers          ACCENTURE SG SERVICES PTE. LTD.     2035000\n4    Awarded to Suppliers TECH MAHINDRA LIMITED (SINGAPORE BRANCH)    30700374\n5    Awarded to Suppliers                            INSIGHTMATRIX      178800\n6    Awarded to Suppliers                      TDCX (SG) PTE. LTD.     8566831\n  financial_grade agency_abbr            ministry ministry_abbr\n1              S9        ACRA MINISTRY OF FINANCE           MOF\n2            <NA>        ACRA MINISTRY OF FINANCE           MOF\n3             S10        ACRA MINISTRY OF FINANCE           MOF\n4             S10        ACRA MINISTRY OF FINANCE           MOF\n5            <NA>        ACRA MINISTRY OF FINANCE           MOF\n6             S10        ACRA MINISTRY OF FINANCE           MOF\n  financial_category year\n1     Large (S8-S10) 2019\n2  Unspecified Grade 2019\n3     Large (S8-S10) 2019\n4     Large (S8-S10) 2019\n5  Unspecified Grade 2019\n6     Large (S8-S10) 2019\n```\n\n\n:::\n:::\n\n\n\n## 4. Building the Sankey Diagram Visualization\n\nThe heart of our visualization is the create_sankey() function defined below. This function creates a Sankey diagram showing the flow of procurement funds from ministries to agencies to suppliers.\n\nThe function is highly customizable, allowing users to:\n\n- Filter by year, ministry, agency, or supplier\n- Show only the top K ministries, agencies, or suppliers by procurement value\n- Set a minimum value threshold to include only significant flows\n- Enable debug mode for troubleshooting when developing the Shiny application\n\nThis customizability makes the function valuable for exploring different aspects of the procurement network.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncreate_sankey <- function(data, \n                          year_filter = NULL, \n                          ministry_filter = NULL,\n                          agency_filter = NULL,\n                          supplier_filter = NULL,\n                          top_k_ministries = 10,\n                          top_k_agencies = 10,\n                          top_k_suppliers = 10,\n                          min_value = 1000000,\n                          debug = FALSE) {\n  \n  # Log data diagnostics if debug is enabled\n  if(debug) {\n    message(\"Data dimensions: \", nrow(data), \" rows x \", ncol(data), \" columns\")\n    if(\"ministry\" %in% colnames(data)) {\n      message(\"Unique ministries: \", length(unique(data$ministry)))\n      if(!is.null(ministry_filter)) {\n        message(\"Checking for requested ministry: \", \n                ifelse(any(ministry_filter %in% unique(data$ministry)), \"Found\", \"Not found\"))\n      }\n    } else {\n      warning(\"'ministry' column not found in data\")\n    }\n  }\n  \n  # Make a copy of the data\n  filtered_data <- data\n  \n  # Apply year filter if specified\n  if(!is.null(year_filter)) {\n    if(\"year\" %in% colnames(filtered_data)) {\n      filtered_data <- filtered_data %>% filter(year == year_filter)\n      if(debug) message(\"After year filter: \", nrow(filtered_data), \" rows\")\n    } else {\n      warning(\"'year' column not found, skipping year filter\")\n    }\n  }\n  \n  # 1. Determine which ministries to include\n  if(!is.null(ministry_filter)) {\n    # Use the specified ministries\n    ministries_to_include <- ministry_filter\n  } else {\n    # Get top ministries by award amount\n    ministries_to_include <- filtered_data %>%\n      group_by(ministry) %>%\n      summarize(total_value = sum(awarded_amt, na.rm = TRUE)) %>%\n      arrange(desc(total_value)) %>%\n      head(top_k_ministries) %>%\n      pull(ministry)\n  }\n  \n  # 2. Determine which agencies to include\n  if(!is.null(agency_filter)) {\n    # Use the specified agencies\n    agencies_to_include <- agency_filter\n  } else {\n    # Get top agencies by award amount\n    agencies_to_include <- filtered_data %>%\n      filter(ministry %in% ministries_to_include) %>%\n      group_by(agency) %>%\n      summarize(total_value = sum(awarded_amt, na.rm = TRUE)) %>%\n      arrange(desc(total_value)) %>%\n      head(top_k_agencies) %>%\n      pull(agency)\n  }\n  \n  # 3. Determine which suppliers to include\n  if(!is.null(supplier_filter)) {\n    # Use the specified suppliers\n    suppliers_to_include <- supplier_filter\n  } else {\n    # Get top suppliers by award amount\n    suppliers_to_include <- filtered_data %>%\n      filter(agency %in% agencies_to_include) %>%\n      group_by(supplier_name) %>%\n      summarize(total_value = sum(awarded_amt, na.rm = TRUE)) %>%\n      arrange(desc(total_value)) %>%\n      head(top_k_suppliers) %>%\n      pull(supplier_name)\n  }\n  \n  if(debug) {\n    message(\"Ministries to include: \", length(ministries_to_include))\n    message(\"Agencies to include: \", length(agencies_to_include))\n    message(\"Suppliers to include: \", length(suppliers_to_include))\n  }\n  \n  # Filter the data to only include the selected entities\n  filtered_data <- filtered_data %>%\n    filter(\n      ministry %in% ministries_to_include,\n      agency %in% agencies_to_include,\n      supplier_name %in% suppliers_to_include\n    )\n  \n  if(debug) message(\"After entity filtering: \", nrow(filtered_data), \" rows\")\n  \n  # Check if we have any data left\n  if(nrow(filtered_data) == 0) {\n    warning(\"No data remains after filtering\")\n    return(NULL)\n  }\n  \n  # Create ministry-to-agency flow\n  ministry_agency_flow <- filtered_data %>%\n    group_by(ministry, agency) %>%\n    summarize(value = sum(awarded_amt, na.rm = TRUE), .groups = 'drop') %>%\n    filter(value >= min_value)\n  \n  # Create agency-to-supplier flow\n  agency_supplier_flow <- filtered_data %>%\n    group_by(agency, financial_category) %>%\n    summarize(value = sum(awarded_amt, na.rm = TRUE), .groups = 'drop') %>%\n    filter(value >= min_value) %>%\n    rename(supplier_name = financial_category)\n  \n  if(debug) {\n    message(\"Ministry-agency flows: \", nrow(ministry_agency_flow))\n    message(\"Agency-supplier flows: \", nrow(agency_supplier_flow))\n  }\n  \n  # Check if we have any flows above the minimum value\n  if(nrow(ministry_agency_flow) == 0 && nrow(agency_supplier_flow) == 0) {\n    warning(\"No flows remain after applying minimum value filter (\", \n            min_value, \")\")\n    return(NULL)\n  }\n  \n  # Get unique lists of each entity type\n  ministry_nodes <- unique(ministry_agency_flow$ministry)\n  agency_nodes <- unique(c(ministry_agency_flow$agency, agency_supplier_flow$agency))\n  supplier_nodes <- unique(agency_supplier_flow$supplier_name)\n  \n  # Create a data frame to hold both display names and full names for tooltips\n  nodes <- data.frame(\n    name = character(),        # Full name\n    display_name = character(),  # Abbreviated name for display\n    group = character(),       # Node type\n    stringsAsFactors = FALSE\n  )\n  \n  # Add ministries with abbreviation\n  for (ministry in ministry_nodes) {\n    # Look up the abbreviation\n    ministry_abbr <- filtered_data %>%\n      filter(ministry == !!ministry) %>%\n      pull(ministry_abbr) %>%\n      unique()\n    \n    # Use abbreviation if available, otherwise use full name\n    display <- if(length(ministry_abbr) > 0 && !is.na(ministry_abbr[1])) ministry_abbr[1] else ministry\n    \n    nodes <- rbind(nodes, data.frame(\n      name = ministry,\n      display_name = display,\n      group = \"ministry\",\n      stringsAsFactors = FALSE\n    ))\n  }\n  \n  # Add agencies with abbreviation\n  for (agency in agency_nodes) {\n    # Look up the abbreviation\n    agency_abbr <- filtered_data %>%\n      filter(agency == !!agency) %>%\n      pull(agency_abbr) %>%\n      unique()\n    \n    # Use abbreviation if available, otherwise use full name\n    display <- if(length(agency_abbr) > 0 && !is.na(agency_abbr[1])) agency_abbr[1] else agency\n    \n    nodes <- rbind(nodes, data.frame(\n      name = agency,\n      display_name = display,\n      group = \"agency\",\n      stringsAsFactors = FALSE\n    ))\n  }\n  \n  # Add suppliers with truncation\n  for (supplier in supplier_nodes) {\n    # Truncate long supplier names\n    display <- if(nchar(supplier) > 50) paste0(substr(supplier, 1, 47), \"...\") else supplier\n    \n    nodes <- rbind(nodes, data.frame(\n      name = supplier,\n      display_name = display,\n      group = \"supplier\",\n      stringsAsFactors = FALSE\n    ))\n  }\n  \n  # Get the indices of each node\n  node_indices <- setNames(0:(nrow(nodes)-1), nodes$name)\n  \n  # Create the ministry to agency links\n  links_m2a <- ministry_agency_flow %>%\n    mutate(\n      source = node_indices[ministry],\n      target = node_indices[agency]\n    ) %>%\n    select(source, target, value)\n  \n  # Create the agency to supplier links\n  links_a2s <- agency_supplier_flow %>%\n    mutate(\n      source = node_indices[agency],\n      target = node_indices[supplier_name]\n    ) %>%\n    select(source, target, value)\n  \n  # Combine all links\n  links <- bind_rows(links_m2a, links_a2s)\n  \n  # Check if we have any links\n  if(nrow(links) == 0) {\n    warning(\"No links could be created\")\n    return(NULL)\n  }\n  \n  # Create Sankey diagram\n  sankey <- sankeyNetwork(\n    Links = links, \n    Nodes = nodes, \n    Source = \"source\", \n    Target = \"target\", \n    Value = \"value\", \n    NodeID = \"display_name\",\n    NodeGroup = \"group\",\n    # Custom color scheme\n    colourScale = JS('d3.scaleOrdinal()\n                     .domain([\"ministry\", \"agency\", \"supplier\"])\n                     .range([\"#1f77b4\", \"#ff7f0e\", \"#2ca02c\"])'),\n    # Layout parameters\n    nodeWidth = 30,\n    nodePadding = 20,\n    margin = list(top = 30, right = 30, bottom = 30, left = 30),\n    sinksRight = TRUE,\n    fontSize = 11,\n    height = 800,\n    width = 1200,\n    iterations = 64  # More iterations for better layout\n  )\n  \n  # Add JavaScript for better rendering and tooltip formatting\n  sankey <- htmlwidgets::onRender(\n    sankey,\n    '\n    function(el, x) {\n      // Ensure diagram is properly sized\n      d3.select(el).select(\"svg\")\n        .attr(\"viewBox\", \"0 0 1200 800\")\n        .attr(\"preserveAspectRatio\", \"xMidYMid meet\");\n        \n      // Add formatted tooltips to links\n      d3.select(el).selectAll(\".link\")\n        .append(\"title\")\n        .text(function(d) { \n          return d.source.name + \" → \" + d.target.name + \n                 \"\\\\nValue: $\" + d3.format(\",.0f\")(d.value); \n        });\n    }\n    '\n  )\n  \n  return(sankey)\n}\n```\n:::\n\n\n\n## 5. Creating Sankey Visualization Examples\n\nIn this section, we'll create several example Sankey diagrams to demonstrate different filtering capabilities:\n\nFiltering by ministry (1-2 examples)\nFiltering by agency (1-2 examples)\nFiltering by suppliers (1-2 examples)\nFiltering by top K for all 3 entity types\n\nThese examples showcase the flexibility of our visualization approach and highlight different aspects of the procurement network.\n\n## 6. Embedding the Sankey Diagram\n\n\n\n```{=html}\n<iframe src=\"gebiz_sankey_2021.html\" width=\"100%\" height=\"600px\" frameborder=\"0\"></iframe>\n```\n",
    "supporting": [
      "Take-home_Ex3_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}