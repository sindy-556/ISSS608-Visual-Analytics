---
title: "Take-home Exercise 3:GeBiz Procurement Data Visualization Prototype"
author: "Sindy"
date-modified: "last-modified"
output:
  html_document:
    css: styles.css
execute:
  echo: true
  eval: true
  warning: false
  freeze: true
---

## Overview


```{r}
pacman::p_load(dplyr, stringr, lubridate, networkD3, tidyverse, 
               plotly, DT, viridis, scales, htmlwidgets, htmltools)
```



## Include info from external datasets
```{r}
financial_df <- read.csv('data/supplier_details.csv')  # CSV with supplier financial grades
procurement_df <- read.csv('data/GovernmentProcurementviaGeBIZ.csv')  # Procurement data CSV
agency_mapping_df <- read.csv('data/agency_mapping.csv')  # Agency mapping data

# 1. Extract just the S-grade (S2-S10) from the financial grade string
extract_s_grade <- function(grade_string) {
  if (is.na(grade_string)) {
    return(NA)
  }
  
  # Use regex to extract S followed by a number
  match <- str_extract(grade_string, "S\\d+")
  return(match)
}

# Create simplified financial grades
financial_df$financial_grade <- sapply(financial_df$financial_grade, extract_s_grade)

# 2. Create mapping dataframes for lookups
supplier_grade_map <- financial_df %>% 
  select(supplier_name, financial_grade) %>%
  distinct()

# 3. Apply the financial grade mapping to the procurement dataset
procurement_enriched <- procurement_df %>%
  left_join(supplier_grade_map, by = "supplier_name")

# 4. Create agency information mappings
agency_mapping <- agency_mapping_df %>%
  select(agency, agency_abbr, ministry, ministry_abbr)

# 5. Add agency information to the procurement dataframe
procurement_enriched <- procurement_enriched %>%
  left_join(agency_mapping, by = "agency")

write.csv(procurement_enriched, 'procurement_output.csv', row.names = FALSE)

# Display some statistics to verify the results
cat("Total procurement records:", nrow(procurement_enriched), "\n")
cat("Records with financial grades:", sum(!is.na(procurement_enriched$simple_grade)), "\n")
cat("Records with agency abbreviations:", sum(!is.na(procurement_enriched$agency_abbr)), "\n")
cat("Records with ministry information:", sum(!is.na(procurement_enriched$ministry)), "\n")

# Show a sample of the enriched data
head(procurement_enriched)
```

```{r}
glimpse(procurement_enriched)
```


```{r}
# Convert award_date to proper date format
procurement_enriched <- procurement_enriched %>%
  mutate(award_date = as.Date(award_date, format="%d/%m/%Y"))

# Create a year field for filtering
procurement_enriched <- procurement_enriched %>%
  mutate(year = year(award_date))

# Handle missing values in supplier_name
procurement_enriched <- procurement_enriched %>%
  mutate(supplier_name = ifelse(is.na(supplier_name) | supplier_name == "Unknown", "Unspecified Supplier", supplier_name))

# Create financial grade categories for better visualization
procurement_enriched <- procurement_enriched %>%
  mutate(financial_category = case_when(
    financial_grade %in% c("S1", "S2", "S3", "S4") ~ "Small (S1-S4)",
    financial_grade %in% c("S5", "S6", "S7") ~ "Medium (S5-S7)",
    financial_grade %in% c("S8", "S9", "S10") ~ "Large (S8-S10)",
    TRUE ~ "Unspecified Grade"
  ))

# Preview the processed data
head(procurement_enriched)
```
```{r}
# Function to prepare data for Sankey diagram
prepare_sankey_data <- function(data, year_filter = NULL, min_value = 1000000, 
                              group_suppliers = TRUE) {
  
  # Apply year filter if specified
  if (!is.null(year_filter)) {
    data <- data %>% filter(year == year_filter)
  }
  
  # Create ministry to agency flow
  ministry_agency_flow <- data %>%
    group_by(ministry, agency) %>%
    summarize(value = sum(awarded_amt, na.rm = TRUE), .groups = 'drop') %>%
    filter(value >= min_value)
  
  # Create agency to supplier flow
  if (group_suppliers) {
    # Group suppliers by financial category for simplification
    agency_supplier_flow <- data %>%
      group_by(agency, financial_category) %>%
      summarize(value = sum(awarded_amt, na.rm = TRUE), .groups = 'drop') %>%
      filter(value >= min_value) %>%
      rename(supplier_name = financial_category)
  } else {
    # Use individual suppliers
    agency_supplier_flow <- data %>%
      group_by(agency, supplier_name) %>%
      summarize(value = sum(awarded_amt, na.rm = TRUE), .groups = 'drop') %>%
      filter(value >= min_value)
  }
  
  # Create nodes dataframe
  all_nodes <- c(unique(ministry_agency_flow$ministry), 
                unique(ministry_agency_flow$agency),
                unique(agency_supplier_flow$supplier_name))
  
  nodes <- data.frame(
    name = all_nodes,
    stringsAsFactors = FALSE
  )
  
  # Create ministry to agency links
  links_m2a <- ministry_agency_flow %>%
    mutate(
      source = match(ministry, nodes$name) - 1,
      target = match(agency, nodes$name) - 1
    ) %>%
    select(source, target, value)
  
  # Create agency to supplier links
  links_a2s <- agency_supplier_flow %>%
    mutate(
      source = match(agency, nodes$name) - 1,
      target = match(supplier_name, nodes$name) - 1
    ) %>%
    select(source, target, value)
  
  # Combine all links
  links <- bind_rows(links_m2a, links_a2s)
  
  # Return both nodes and links
  list(nodes = nodes, links = links)
}
```


```{r}
# Enhanced Sankey diagram function with better scaling and display options
create_improved_sankey <- function(data, year_filter = NULL, min_value = 100000, 
                                  group_suppliers = TRUE) {
  
  # Prepare data
  sankey_data <- prepare_sankey_data(data, year_filter, min_value, group_suppliers)
  
  # Check if we have data
  if (nrow(sankey_data$nodes) == 0 || nrow(sankey_data$links) == 0) {
    return(NULL)
  }
  
  # Add group information to nodes for better coloring
  node_groups <- rep("supplier", nrow(sankey_data$nodes))
  ministry_names <- unique(data$ministry)
  agency_names <- unique(data$agency)
  
  for (i in 1:length(sankey_data$nodes$name)) {
    if (sankey_data$nodes$name[i] %in% ministry_names) {
      node_groups[i] <- "ministry"
    } else if (sankey_data$nodes$name[i] %in% agency_names) {
      node_groups[i] <- "agency"
    }
  }
  
  sankey_data$nodes$group <- node_groups
  
  # Create Sankey diagram with improved settings
  sankey <- sankeyNetwork(
    Links = sankey_data$links, 
    Nodes = sankey_data$nodes, 
    Source = "source", 
    Target = "target", 
    Value = "value", 
    NodeID = "name",
    NodeGroup = "group",
    # Use better colors for visibility
    colourScale = JS('d3.scaleOrdinal().domain(["ministry", "agency", "supplier"]).range(["#4e79a7", "#f28e2c", "#59a14f"])'),
    # Adjust these to ensure visibility
    nodeWidth = 20,       # Reduced from 30
    nodePadding = 15,     # Increased from 10
    margin = list(top = 20, right = 20, bottom = 20, left = 20),
    sinksRight = TRUE,
    fontSize = 10,        # Reduced to fit better
    height = 800,         # Increased for better visibility
    width = 1000,
    iterations = 32       # More iterations for better layout
  )
  
  # Add helpful JavaScript for better display
  htmlwidgets::onRender(
    sankey,
    '
    function(el, x) {
      // Ensure the diagram is centered and fits
      var svg = d3.select(el).select("svg");
      svg.attr("preserveAspectRatio", "xMinYMin meet")
         .attr("viewBox", "0 0 1000 800");
      
      // Add zoom functionality
      var zoom = d3.zoom()
        .scaleExtent([0.5, 3])
        .on("zoom", function() {
          svg.select("g").attr("transform", d3.event.transform);
        });
      
      svg.call(zoom);
    }
    '
  )
}
```

```{r}
# Let's check for extreme value disparities that might cause scaling issues
value_summary <- procurement_enriched %>%
  filter(year == 2021) %>%
  group_by(ministry, agency) %>%
  summarize(total_value = sum(awarded_amt, na.rm = TRUE), .groups = 'drop') %>%
  summarize(
    min_value = min(total_value, na.rm = TRUE),
    max_value = max(total_value, na.rm = TRUE),
    median_value = median(total_value, na.rm = TRUE),
    ratio_max_min = max_value / min_value
  )

print(value_summary)

# If max/min ratio is very high (>1000), let's apply log transformation
use_log_transform <- value_summary$ratio_max_min > 1000

# Create improved Sankey
sankey_improved <- create_improved_sankey(
  data = procurement_enriched,
  year_filter = 2021,
  min_value = 100000000,  # Using a smaller minimum value for more visibility
  group_suppliers = FALSE
)

# Display
sankey_improved
```

```{r}
# Enhanced Sankey diagram with proper layout and formatting
create_better_sankey <- function(data, year_filter = NULL, min_value = 1000000) {
  # Filter data
  if (!is.null(year_filter)) {
    data <- data %>% filter(year == year_filter)
  }
  
  # Get top N ministries by value to reduce clutter
  top_ministries <- data %>%
    group_by(ministry) %>%
    summarize(total_value = sum(awarded_amt, na.rm = TRUE), .groups = 'drop') %>%
    arrange(desc(total_value)) %>%
    head(10) %>%  # Top 10 ministries
    pull(ministry)
  
  # Filter to top ministries
  filtered_data <- data %>%
    filter(ministry %in% top_ministries)
  
  # Create ministry to agency flow
  ministry_agency_flow <- filtered_data %>%
    group_by(ministry, agency) %>%
    summarize(value = sum(awarded_amt, na.rm = TRUE), .groups = 'drop') %>%
    filter(value >= min_value) %>%
    # Get top 30 flows
    arrange(desc(value)) %>%
    head(30)
  
  # Get agencies from the top flows
  top_agencies <- unique(ministry_agency_flow$agency)
  
  # Create agency to supplier category flow
  agency_category_flow <- filtered_data %>%
    filter(agency %in% top_agencies) %>%
    group_by(agency, financial_category) %>%
    summarize(value = sum(awarded_amt, na.rm = TRUE), .groups = 'drop') %>%
    filter(value >= min_value) %>%
    # Get top 30 flows
    arrange(desc(value)) %>%
    head(30)
  
  # Create nodes dataframe
  node_list <- c(top_ministries, top_agencies, unique(agency_category_flow$financial_category))
  node_list <- unique(node_list) # Remove duplicates
  
  nodes <- data.frame(
    name = node_list,
    stringsAsFactors = FALSE
  )
  
  # Add group information for coloring
  nodes$group <- case_when(
    nodes$name %in% top_ministries ~ "ministry",
    nodes$name %in% top_agencies ~ "agency",
    TRUE ~ "category"
  )
  
  # Create links for ministry to agency
  links_m2a <- ministry_agency_flow %>%
    filter(ministry %in% nodes$name & agency %in% nodes$name) %>%
    mutate(
      source = match(ministry, nodes$name) - 1,
      target = match(agency, nodes$name) - 1
    ) %>%
    select(source, target, value)
  
  # Create links for agency to category
  links_a2c <- agency_category_flow %>%
    filter(agency %in% nodes$name & financial_category %in% nodes$name) %>%
    mutate(
      source = match(agency, nodes$name) - 1,
      target = match(financial_category, nodes$name) - 1
    ) %>%
    select(source, target, value)
  
  # Combine links
  links <- bind_rows(links_m2a, links_a2c)
  
  # Add a year title if filtered
  year_title <- if(!is.null(year_filter)) {
    paste("GeBiz Procurement Flows -", year_filter)
  } else {
    "GeBiz Procurement Flows - All Years"
  }
  
  # Create improved Sankey diagram
  sankey <- sankeyNetwork(
    Links = links, 
    Nodes = nodes, 
    Source = "source", 
    Target = "target", 
    Value = "value", 
    NodeID = "name",
    NodeGroup = "group",
    # Custom color scheme
    colourScale = JS('d3.scaleOrdinal()
                      .domain(["ministry", "agency", "category"])
                      .range(["#1f77b4", "#ff7f0e", "#2ca02c"])'),
    # Better layout parameters
    nodeWidth = 30,
    nodePadding = 20,
    margin = list(top = 30, right = 30, bottom = 30, left = 30),
    sinksRight = TRUE,
    fontSize = 11,
    height = 800,
    width = 1200,
    iterations = 64  # More iterations for better layout
  )
  
  # Add JavaScript for better rendering and scaling
  htmlwidgets::onRender(
    sankey,
    '
    function(el, x) {
      // Ensure diagram is rendered properly
      d3.select(el).select("svg")
        .attr("viewBox", "0 0 1200 800")
        .attr("preserveAspectRatio", "xMidYMid meet");
        
      // Add tooltips with formatted values
      d3.select(el).selectAll(".link")
        .append("title")
        .text(function(d) { 
          return d.source.name + " → " + d.target.name + 
                 "\\nValue: $" + d3.format(",.0f")(d.value); 
        });
    }
    '
  )
  
  return(sankey)
}
```


```{r}
# Create improved Sankey diagram focusing on top flows
better_sankey <- create_better_sankey(
  data = procurement_enriched,
  year_filter = 2021,
  min_value = 1000000  # 1 million minimum flow value
)

htmlwidgets::saveWidget(better_sankey, "gebiz_sankey.html", selfcontained = TRUE)
```

```{=html}
<iframe src="gebiz_sankey.html" width="100%" height="600px" frameborder="0"></iframe>
```





