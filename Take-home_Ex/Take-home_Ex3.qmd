---
title: "Take-home Exercise 3: GeBiz Procurement Data Visualization Prototype"
author: "Sindy"
date-modified: "March 30, 2025"
output:
  html_document:
    css: styles.css
execute:
  echo: true
  eval: true
  warning: false
  freeze: true
---

## 1. Overview

This document presents a comprehensive visualization prototype for GeBiz procurement data. It features two complementary analytical approaches: Sankey diagrams to visualize procurement flows from ministries to agencies to suppliers, and RFM (Recency, Frequency, Monetary) analysis to segment and evaluate supplier relationships. Together, these visualizations provide powerful insights into government procurement patterns and supplier management.

```{r}
# Load required packages
pacman::p_load(dplyr, stringr, lubridate, networkD3, tidyverse, 
               plotly, DT, viridis, scales, htmlwidgets, htmltools,
               RColorBrewer, treemapify)
```

## 2. Data Preparation

### 2.1 Loading and Enriching Data

Before creating our visualizations, we need to load and prepare the relevant datasets. We're working with with the GeBiz dataset and 2 other dataset that sourced online:

1.  Procurement transaction data - the core dataset with details of each procurement activity from GeBiz

2.  Supplier financial information - containing grading data for suppliers (note: this dataset is incomplete, as we were unable to obtain financial grades for all suppliers)

3, Agency mapping data - providing the hierarchical relationships between agencies and ministries

The code below loads these datasets from CSV files into R data frames. We'll need to handle the incomplete nature of the supplier financial data during our analysis.

```{r}
# Load the necessary datasets
procurement_df <- read.csv('data/GovernmentProcurementviaGeBIZ.csv')  # Procurement data CSV
financial_df <- read.csv('data/supplier_details.csv')  # CSV with supplier financial grades
agency_mapping_df <- read.csv('data/agency_mapping.csv')  # Agency mapping data
```

### 2.2 Extracting Supplier Grades

The `financial_df` dataset contains supplier grade information, which indicates the financial capacity of each supplier. The Singapore government classifies suppliers on a scale from S2 to S10, with each grade corresponding to specific monetary thresholds:

-   S2: \$100,000 (EPU S2)
-   S3: \$250,000 (EPU S3)
-   S4: \$500,000 (EPU S4)
-   S5: \$1,000,000 (EPU S5)
-   S6: \$3,000,000 (EPU S6)
-   S7: \$5,000,000 (EPU S7)
-   S8: \$10,000,000 (EPU S8)
-   S9: \$30,000,000 (EPU S9)
-   S10: \>\$30,000,000 (EPU S10)

Higher grades (S8-S10) represent larger companies with greater financial capacity, while lower grades (S2-S4) represent smaller contractors.

```{r}
# Function to extract just the S-grade (S2-S10) from the financial grade string
extract_s_grade <- function(grade_string) {
  if (is.na(grade_string)) {
    return(NA)
  }
  
  # Use regex to extract S followed by a number
  match <- str_extract(grade_string, "S\\d+")
  return(match)
}

# Create simplified financial grades
financial_df$financial_grade <- sapply(financial_df$financial_grade, extract_s_grade)

# Create mapping dataframes for lookups
supplier_grade_map <- financial_df %>% 
  select(supplier_name, financial_grade) %>%
  distinct()
```

Since we were unable to obtain financial grades for all suppliers in our procurement dataset, we'll need to handle missing values appropriately in our analysis. We'll need to account for the incomplete coverage in our visualizations and interpretations.

### 2.3 Joining Data and Creating an Enriched Dataset

To create comprehensive visualizations, we need to combine all our datasets into one enriched procurement dataset. This includes:

1.  Adding supplier financial grades to the procurement records
2.  Adding ministry information to the agencies
3.  Creating standardized abbreviations for agencies and ministries for cleaner visualization

The code below performs these join operations and creates our main analysis dataset.

```{r}
procurement_enriched <- procurement_df %>%
  left_join(supplier_grade_map, by = "supplier_name")

agency_mapping <- agency_mapping_df %>%
  select(agency, agency_abbr, ministry, ministry_abbr)

procurement_enriched <- procurement_enriched %>%
  left_join(agency_mapping, by = "agency")

write.csv(procurement_enriched, 'procurement_output.csv', row.names = FALSE)
```

### 2.4 Verifying Data Enrichment

After joining the datasets, it's important to verify that the enrichment was successful and understand the extent of missing data. The code below reports statistics on the completeness of our enriched dataset, including:

-   Total number of procurement records
-   Records with financial grades (expected to be incomplete due to data limitations)
-   Records with agency abbreviations
-   Records with ministry information

This verification step is particularly important given that we're working with external datasets of varying completeness. Understanding these limitations will help us design appropriate visualizations and interpret results accurately.

```{r}
cat("Total procurement records:", nrow(procurement_enriched), "\n")
cat("Records with financial grades:", sum(!is.na(procurement_enriched$financial_grade)), "\n")
cat("Records with agency abbreviations:", sum(!is.na(procurement_enriched$agency_abbr)), "\n")
cat("Records with ministry information:", sum(!is.na(procurement_enriched$ministry)), "\n")
```

```{r}
glimpse(procurement_enriched)
```

### 2.5 Exploratory Data Analysis

#### Basic summary statistics for key numeric variables.

```{r}
summary(procurement_df$awarded_amt)
```

#### Count of records by year to understand the temporal distribution

```{r}
yearly_counts <- procurement_df %>%
  mutate(year = year(as.Date(award_date, format="%d/%m/%Y"))) %>%
  group_by(year) %>%
  summarise(count = n(),
            total_value = sum(awarded_amt, na.rm = TRUE),
            avg_value = mean(awarded_amt, na.rm = TRUE),
            median_value = median(awarded_amt, na.rm = TRUE)) %>%
  arrange(year)

print(yearly_counts)
```

#### Examine the distribution of procurement by ministry and agency

```{r}
ministry_distribution <- procurement_enriched %>%
  group_by(ministry) %>%
  summarise(count = n(),
            total_value = sum(awarded_amt, na.rm = TRUE),
            avg_value = mean(awarded_amt, na.rm = TRUE)) %>%
  arrange(desc(total_value))

head(ministry_distribution, 10)
```

#### Top agencies by procurement value

```{r}
agency_distribution <- procurement_enriched %>%
  group_by(agency) %>%
  summarise(count = n(),
            total_value = sum(awarded_amt, na.rm = TRUE),
            avg_value = mean(awarded_amt, na.rm = TRUE)) %>%
  arrange(desc(total_value))

head(agency_distribution, 10)
```

#### Top suppliers by procurement value

```{r}
supplier_distribution <- procurement_enriched %>%
  group_by(supplier_name) %>%
  summarise(count = n(),
            total_value = sum(awarded_amt, na.rm = TRUE),
            avg_value = mean(awarded_amt, na.rm = TRUE)) %>%
  arrange(desc(total_value))

head(supplier_distribution, 10)

```

#### Distribution of suppliers by financial grade

```{r}
grade_distribution <- procurement_enriched %>%
  group_by(financial_grade) %>%
  summarise(count = n(),
            unique_suppliers = n_distinct(supplier_name),
            total_value = sum(awarded_amt, na.rm = TRUE),
            pct_value = round(total_value/sum(procurement_enriched$awarded_amt, na.rm = TRUE)*100, 2),
            avg_contract_value = mean(awarded_amt, na.rm = TRUE)) %>%
  arrange(desc(total_value))

print(grade_distribution)
```

#### Distribution by consolidated financial category

```{r}
if(!"financial_category" %in% colnames(procurement_enriched)) {
  procurement_enriched <- procurement_enriched %>%
    mutate(financial_category = case_when(
      financial_grade %in% c("S1", "S2", "S3", "S4") ~ "Small (S1-S4)",
      financial_grade %in% c("S5", "S6", "S7") ~ "Medium (S5-S7)",
      financial_grade %in% c("S8", "S9", "S10") ~ "Large (S8-S10)",
      TRUE ~ "Unspecified Grade"
    ))
}
category_distribution <- procurement_enriched %>%
  group_by(financial_category) %>%
  summarise(count = n(),
            unique_suppliers = n_distinct(supplier_name),
            total_value = sum(awarded_amt, na.rm = TRUE),
            pct_value = round(total_value/sum(procurement_enriched$awarded_amt, na.rm = TRUE)*100, 2),
            avg_contract_value = mean(awarded_amt, na.rm = TRUE)) %>%
  arrange(desc(total_value))

print(category_distribution)
```

#### Are contracts awarded consistently with financial capacity?

This checks if higher-grade suppliers tend to get higher-value contracts.

```{r}
grade_contract_match <- procurement_enriched %>%
  filter(!is.na(financial_grade)) %>%
  group_by(financial_grade) %>%
  summarise(
    median_contract_value = median(awarded_amt, na.rm = TRUE),
    avg_contract_value = mean(awarded_amt, na.rm = TRUE),
    max_contract_value = max(awarded_amt, na.rm = TRUE),
    total_awarded = sum(awarded_amt, na.rm = TRUE),
    contract_count = n()
  ) %>%
  arrange(financial_grade)

print(grade_contract_match)
```

### 2.6 Temporal Patterns

#### Examine monthly patterns in procurement

```{r}
if(!inherits(procurement_enriched$award_date, "Date")) {
  procurement_enriched <- procurement_enriched %>%
    mutate(award_date = as.Date(award_date, format="%d/%m/%Y"))
}
monthly_patterns <- procurement_enriched %>%
  mutate(month = month(award_date, label = TRUE),
         year = year(award_date)) %>%
  # Filter to include only the relevant years (2019-2023)
  filter(year >= 2019 & year <= 2023) %>%
  group_by(year, month) %>%
  summarise(count = n(),
            total_value = sum(awarded_amt, na.rm = TRUE)) %>%
  ungroup()
```

#### Plot monthly patterns across years with improved styling

```{r}
year_colors <- c("2019" = "#1f77b4", "2020" = "#ff7f0e", 
                "2021" = "#2ca02c", "2022" = "#d62728", 
                "2023" = "#9467bd")

ggplot(monthly_patterns, aes(x = month, y = total_value, group = year, color = factor(year))) +
  geom_line(size = 1, alpha = 0.3) + 
  geom_point(size = 2.5, alpha = 0.7) +  
  labs(title = "Monthly Procurement Patterns (2019-2023)",
       subtitle = "Comparing monthly procurement values across years",
       x = "Month",
       y = "Total Procurement Value (SGD)",
       color = "Year") +
  theme_minimal() +
  theme(
    legend.position = "right",
    panel.grid.minor = element_blank(),
    text = element_text(size = 12),
    plot.title = element_text(face = "bold", size = 16),
    axis.text.x = element_text(angle = 45, hjust = 1)
  ) +
  scale_y_continuous(labels = scales::comma) +
  scale_color_manual(values = year_colors)
```

### 2.7 Distribution of Award Amounts

Create a histogram of award amounts to see the distribution

```{r}
ggplot(procurement_enriched, aes(x = awarded_amt)) +
  geom_histogram(bins = 30, fill = "steelblue", alpha = 0.7) +
  scale_x_log10() +  # Log scale for better visualization
  labs(title = "Distribution of Award Amounts (Log Scale)",
       x = "Award Amount (Log Scale)",
       y = "Count") +
  theme_minimal()
```

#### Box plot of award amounts by financial category

```{r}
if(!"financial_category" %in% colnames(procurement_enriched)) {
  procurement_enriched <- procurement_enriched %>%
    mutate(financial_category = case_when(
      financial_grade %in% c("S1", "S2", "S3", "S4") ~ "Small (S1-S4)",
      financial_grade %in% c("S5", "S6", "S7") ~ "Medium (S5-S7)",
      financial_grade %in% c("S8", "S9", "S10") ~ "Large (S8-S10)",
      TRUE ~ "Unspecified Grade"
    ))
}

ggplot(procurement_enriched, aes(x = financial_category, y = awarded_amt)) +
  geom_boxplot(fill = "steelblue", alpha = 0.7) +
  scale_y_log10() +  # Log scale for better visualization
  labs(title = "Distribution of Award Amounts by Supplier Category",
       x = "Supplier Financial Category",
       y = "Award Amount (Log Scale)") +
  theme_minimal() +
  theme(axis.text.x = element_text(angle = 45, hjust = 1))
```

Understanding missing supplier grade information.

```{r}
financial_grade_coverage <- sum(!is.na(procurement_enriched$financial_grade)) / nrow(procurement_enriched) * 100
cat("Percentage of procurement records with financial grade information:", round(financial_grade_coverage, 2), "%\n")

missing_grade_by_size <- procurement_enriched %>%
  group_by(is_grade_missing = is.na(financial_grade)) %>%
  summarise(
    count = n(),
    total_value = sum(awarded_amt, na.rm = TRUE),
    avg_contract_value = mean(awarded_amt, na.rm = TRUE),
    median_contract_value = median(awarded_amt, na.rm = TRUE),
    pct_of_records = n() / nrow(procurement_enriched) * 100,
    pct_of_value = sum(awarded_amt, na.rm = TRUE) / sum(procurement_enriched$awarded_amt, na.rm = TRUE) * 100
  )

print(missing_grade_by_size)
```

### 2.8 Relationship Between Variables

Let's see if there's a relationship between award amount and number of contracts per supplier

```{r}
supplier_counts <- procurement_enriched %>%
  group_by(supplier_name) %>%
  summarise(contract_count = n(),
            total_value = sum(awarded_amt, na.rm = TRUE),
            avg_value = mean(awarded_amt, na.rm = TRUE))

ggplot(supplier_counts, aes(x = contract_count, y = avg_value)) +
  geom_point(alpha = 0.5) +
  geom_smooth(method = "loess") +
  scale_x_log10() +
  scale_y_log10() +
  labs(title = "Relationship Between Number of Contracts and Average Value",
       x = "Number of Contracts (Log Scale)",
       y = "Average Contract Value (Log Scale)") +
  theme_minimal()
```

## 3. Data Preprocessing

### 3.1 Date Conversion and Handling Missing Values

We'll perform several preprocessing steps to improve data quality:

1.  Convert date strings to proper Date objects
2.  Create a year field for filtering
3.  Handle missing values in supplier names
4.  Create financial grade categories for visualization

For the financial grades, we'll consolidate the nine different S-grades (S2-S10) into three more manageable categories:

-   Small (S1-S4): Suppliers with financial capacity up to \$500,000
-   Medium (S5-S7): Suppliers with financial capacity between \$1,000,000 and \$5,000,000
-   Large (S8-S10): Suppliers with financial capacity of \$10,000,000 and above

These preprocessing steps ensure our data is clean, properly formatted, and appropriately categorized for visualization.

```{r}
# Convert award_date to proper date format
procurement_enriched <- procurement_enriched %>%
  mutate(award_date = as.Date(award_date, format="%d/%m/%Y"))

# Create a year field for filtering
procurement_enriched <- procurement_enriched %>%
  mutate(year = year(award_date))

# Handle missing values in supplier_name
procurement_enriched <- procurement_enriched %>%
  mutate(supplier_name = ifelse(is.na(supplier_name) | supplier_name == "Unknown", "Unspecified Supplier", supplier_name))

# Create financial grade categories for better visualization
procurement_enriched <- procurement_enriched %>%
  mutate(financial_category = case_when(
    financial_grade %in% c("S1", "S2", "S3", "S4") ~ "Small (S1-S4)",
    financial_grade %in% c("S5", "S6", "S7") ~ "Medium (S5-S7)",
    financial_grade %in% c("S8", "S9", "S10") ~ "Large (S8-S10)",
    TRUE ~ "Unspecified Grade"
  ))

# Preview the processed data
glimpse(procurement_enriched)
```

## 4. Building the Sankey Diagram Visualization

The heart of our visualization is the create_sankey() function defined below. This function creates a Sankey diagram showing the flow of procurement funds from ministries to agencies to suppliers.

The function is highly customizable, allowing users to:

-   Filter by year, ministry, agency, or supplier
-   Show only the top K ministries, agencies, or suppliers by procurement value
-   Set a minimum value threshold to include only significant flows
-   Enable debug mode for troubleshooting when developing the Shiny application

This customizability makes the function valuable for exploring different aspects of the procurement network.

```{r}
create_sankey <- function(data, 
                          year_filter = NULL, 
                          ministry_filter = NULL,
                          agency_filter = NULL,
                          supplier_filter = NULL,
                          top_k_ministries = 10,
                          top_k_agencies = 10,
                          top_k_suppliers = 10,
                          min_value = 1000000,
                          supplier_char_limit = 50,
                          group_by_grade = FALSE,
                          debug = FALSE) {
  
  # Log data diagnostics if debug is enabled
  if(debug) {
    message("Data dimensions: ", nrow(data), " rows x ", ncol(data), " columns")
    if("ministry" %in% colnames(data)) {
      message("Unique ministries: ", length(unique(data$ministry)))
      if(!is.null(ministry_filter)) {
        message("Checking for requested ministry: ", 
                ifelse(any(ministry_filter %in% unique(data$ministry)), "Found", "Not found"))
      }
    } else {
      warning("'ministry' column not found in data")
    }
  }
  
  # Make a copy of the data
  filtered_data <- data
  
  # Apply year filter if specified
  if(!is.null(year_filter)) {
    if("year" %in% colnames(filtered_data)) {
      filtered_data <- filtered_data %>% filter(year == year_filter)
      if(debug) message("After year filter: ", nrow(filtered_data), " rows")
    } else {
      warning("'year' column not found, skipping year filter")
    }
  }
  
  # 1. Determine which ministries to include
  if(!is.null(ministry_filter)) {
    # Use the specified ministries
    ministries_to_include <- ministry_filter
  } else {
    # Get top ministries by award amount
    ministries_to_include <- filtered_data %>%
      group_by(ministry) %>%
      summarize(total_value = sum(awarded_amt, na.rm = TRUE)) %>%
      arrange(desc(total_value)) %>%
      head(top_k_ministries) %>%
      pull(ministry)
  }
  
  # 2. Determine which agencies to include
  if(!is.null(agency_filter)) {
    # Use the specified agencies
    agencies_to_include <- agency_filter
  } else {
    # Get top agencies by award amount
    agencies_to_include <- filtered_data %>%
      filter(ministry %in% ministries_to_include) %>%
      group_by(agency) %>%
      summarize(total_value = sum(awarded_amt, na.rm = TRUE)) %>%
      arrange(desc(total_value)) %>%
      head(top_k_agencies) %>%
      pull(agency)
  }
  
  # 3. Determine which suppliers to include based on the view mode
  if(!is.null(supplier_filter)) {
    # Use the specified suppliers
    suppliers_to_include <- supplier_filter
  } else {
    # Get top suppliers by award amount
    if(group_by_grade) {
      # When grouping by grade, supplier categories will be the financial_category (e.g., "Large (S8-S10)")
      # We still need to filter by top suppliers for consistency, but we'll sum across all suppliers
      suppliers_to_include <- filtered_data %>%
        filter(agency %in% agencies_to_include) %>%
        group_by(financial_category) %>%
        summarize(total_value = sum(awarded_amt, na.rm = TRUE)) %>%
        filter(!is.na(financial_category)) %>%  # Exclude NA categories
        arrange(desc(total_value)) %>%
        head(top_k_suppliers) %>%
        pull(financial_category)
    } else {
      # When showing individual suppliers
      suppliers_to_include <- filtered_data %>%
        filter(agency %in% agencies_to_include) %>%
        group_by(supplier_name) %>%
        summarize(total_value = sum(awarded_amt, na.rm = TRUE)) %>%
        arrange(desc(total_value)) %>%
        head(top_k_suppliers) %>%
        pull(supplier_name)
    }
  }
  
  if(debug) {
    message("Ministries to include: ", length(ministries_to_include))
    message("Agencies to include: ", length(agencies_to_include))
    message("Suppliers to include: ", length(suppliers_to_include))
  }
  
  # Filter the data to only include the selected entities
  if(group_by_grade) {
    # When grouping by grade, filter by financial_category
    filtered_data <- filtered_data %>%
      filter(
        ministry %in% ministries_to_include,
        agency %in% agencies_to_include,
        financial_category %in% suppliers_to_include
      )
  } else {
    # When showing individual suppliers, filter by supplier_name
    filtered_data <- filtered_data %>%
      filter(
        ministry %in% ministries_to_include,
        agency %in% agencies_to_include,
        supplier_name %in% suppliers_to_include
      )
  }
  
  if(debug) message("After entity filtering: ", nrow(filtered_data), " rows")
  
  # Check if we have any data left
  if(nrow(filtered_data) == 0) {
    warning("No data remains after filtering")
    return(NULL)
  }
  
  # Create ministry-to-agency flow
  ministry_agency_flow <- filtered_data %>%
    group_by(ministry, agency) %>%
    summarize(value = sum(awarded_amt, na.rm = TRUE), .groups = 'drop') %>%
    filter(value >= min_value)
  
  # Create agency-to-supplier flow based on the view mode
  if(group_by_grade) {
    # Group by financial_category (S-grades)
    agency_supplier_flow <- filtered_data %>%
      group_by(agency, financial_category) %>%
      summarize(value = sum(awarded_amt, na.rm = TRUE), .groups = 'drop') %>%
      filter(value >= min_value) %>%
      rename(supplier_name = financial_category)
  } else {
    # Group by individual supplier_name
    agency_supplier_flow <- filtered_data %>%
      group_by(agency, supplier_name) %>%
      summarize(value = sum(awarded_amt, na.rm = TRUE), .groups = 'drop') %>%
      filter(value >= min_value)
  }
  
  if(debug) {
    message("Ministry-agency flows: ", nrow(ministry_agency_flow))
    message("Agency-supplier flows: ", nrow(agency_supplier_flow))
  }
  
  # Check if we have any flows above the minimum value
  if(nrow(ministry_agency_flow) == 0 && nrow(agency_supplier_flow) == 0) {
    warning("No flows remain after applying minimum value filter (", 
            min_value, ")")
    return(NULL)
  }
  
  # Get unique lists of each entity type
  ministry_nodes <- unique(ministry_agency_flow$ministry)
  agency_nodes <- unique(c(ministry_agency_flow$agency, agency_supplier_flow$agency))
  supplier_nodes <- unique(agency_supplier_flow$supplier_name)
  
  # Create a data frame to hold both display names and full names for tooltips
  nodes <- data.frame(
    name = character(),        # Full name
    display_name = character(),  # Display name (full name for ministry/agency)
    group = character(),       # Node type
    stringsAsFactors = FALSE
  )
  
  # Add ministries with full name
  for (ministry in ministry_nodes) {
    display <- ministry
    
    nodes <- rbind(nodes, data.frame(
      name = ministry,
      display_name = display,
      group = "ministry",
      stringsAsFactors = FALSE
    ))
  }
  
  # Add agencies with full name
  for (agency in agency_nodes) {
    display <- agency
    
    nodes <- rbind(nodes, data.frame(
      name = agency,
      display_name = display,
      group = "agency",
      stringsAsFactors = FALSE
    ))
  }
  
  # Add suppliers with truncation if needed
  for (supplier in supplier_nodes) {
    # Truncate long supplier names based on the supplier_char_limit parameter
    display <- if(nchar(supplier) > supplier_char_limit) 
                 paste0(substr(supplier, 1, supplier_char_limit - 3), "...") 
               else 
                 supplier
    
    nodes <- rbind(nodes, data.frame(
      name = supplier,
      display_name = display,
      group = "supplier",
      stringsAsFactors = FALSE
    ))
  }
  
  # Get the indices of each node
  node_indices <- setNames(0:(nrow(nodes)-1), nodes$name)
  
  # Create the ministry to agency links
  links_m2a <- ministry_agency_flow %>%
    mutate(
      source = node_indices[ministry],
      target = node_indices[agency]
    ) %>%
    select(source, target, value)
  
  # Create the agency to supplier links
  links_a2s <- agency_supplier_flow %>%
    mutate(
      source = node_indices[agency],
      target = node_indices[supplier_name]
    ) %>%
    select(source, target, value)
  
  # Combine all links
  links <- bind_rows(links_m2a, links_a2s)
  
  # Check if we have any links
  if(nrow(links) == 0) {
    warning("No links could be created")
    return(NULL)
  }
  
  # Create Sankey diagram
  sankey <- sankeyNetwork(
    Links = links, 
    Nodes = nodes, 
    Source = "source", 
    Target = "target", 
    Value = "value", 
    NodeID = "display_name",
    NodeGroup = "group",
    # Custom color scheme
    colourScale = JS('d3.scaleOrdinal()
                     .domain(["ministry", "agency", "supplier"])
                     .range(["#1f77b4", "#ff7f0e", "#2ca02c"])'),
    # Layout parameters
    nodeWidth = 30,
    nodePadding = 20,
    margin = list(top = 30, right = 30, bottom = 30, left = 30),
    sinksRight = TRUE,
    fontSize = 11,
    height = 800,
    width = 1200,
    iterations = 64  # More iterations for better layout
  )
  
  # Add JavaScript for better rendering and tooltip formatting
  sankey <- htmlwidgets::onRender(
    sankey,
    '
    function(el, x) {
      // Ensure diagram is properly sized
      d3.select(el).select("svg")
        .attr("viewBox", "0 0 1200 800")
        .attr("preserveAspectRatio", "xMidYMid meet");
        
      // Add formatted tooltips to links
      d3.select(el).selectAll(".link")
        .append("title")
        .text(function(d) { 
          return d.source.name + " → " + d.target.name + 
                 "\\nValue: $" + d3.format(",.0f")(d.value); 
        });
    }
    '
  )
  
  return(sankey)
}
```

The `create_sankey()` function is highly customizable through various parameters that control filtering, display options, and performance.

Filtering parameters:

-   `year_filter`: Numeric or NULL. Filter records by a specific year (e.g., 2023). If NULL (default), all years are included.
-   `ministry_filter`: Character vector or NULL. Filter by specific ministry names. If NULL (default), top ministries are selected based on top_k_ministries.
-   `agency_filter`: Character vector or NULL. Filter by specific agency names. If NULL (default), top agencies are selected based on `top_k_agencies`.
-   `supplier_filter`: Character vector or NULL. Filter by specific supplier names or categories (depending on `group_by_grade`). If NULL (default), top suppliers are selected based on `top_k_suppliers`.

Top-k selection parameters:

-   `top_k_ministries`: Numeric, default 10. When no ministry filter is provided, specifies how many top ministries to include, ranked by total procurement value.
-   `top_k_agencies`: Numeric, default 10. When no agency filter is provided, specifies how many top agencies to include, ranked by total procurement value.
-   `top_k_suppliers`: Numeric, default 10. When no supplier filter is provided, specifies how many top suppliers or categories to include, ranked by total procurement value.

Other parameters:

-   `min_value`: Numeric, default 1,000,000. Minimum threshold value for flows to be included in the diagram. Flows with values below this threshold are excluded, helping to simplify complex diagrams.

-   `supplier_char_limit`: Numeric, default 50. Maximum number of characters to display for supplier names. Longer names are truncated with "...".

-   `group_by_grade`: Logical, default FALSE. Controls whether suppliers are grouped by financial grade categories (TRUE) or shown as individual suppliers (FALSE).

-   `debug`: Logical, default FALSE. When TRUE, prints diagnostic messages during function execution to help troubleshoot issues.

## 5. Creating Sankey Visualization Examples

This section presents several Sankey diagram visualizations that demonstrate different perspectives on the GeBiz procurement data. Each visualization highlights specific patterns and relationships within the procurement network, helping stakeholders understand how government funds flow from ministries to agencies to suppliers.

### 5.1 Filtering by Ministry

This visualization focuses on the Ministry of Education's procurement flows, revealing how education funding distributes across agencies and suppliers. It highlights the ministry's key procurement channels and major supplier relationships.

```{r}
# Create Sankey diagram for Ministry of Education
moe_sankey <- create_sankey(
  data = procurement_enriched,
  year_filter = 2023,
  ministry_filter = c("MINISTRY OF EDUCATION"),
  min_value = 1000000,
  top_k_agencies = 100,
  top_k_suppliers = 20,
  supplier_char_limit = 30
)

# Save the widget to an HTML file
saveNetwork(moe_sankey, file = paste0("sankey_moe_", 2023, ".html"))
```

```{=html}
<iframe src="sankey_moe_2023.html" width="100%" height="600px" frameborder="0"></iframe>
```
The second visualization compares the Ministry of Health and Ministry of Education, with suppliers grouped by financial grade. This comparison reveals differences in agency structures, supplier profiles, and procurement value distributions between these major ministries.

```{r}
# Create Sankey diagram comparing two major ministries
health_defence_sankey <- create_sankey(
  data = procurement_enriched,
  year_filter = 2023,
    ministry_filter = c("MINISTRY OF HEALTH", "MINISTRY OF EDUCATION"),
  min_value = 5000000,
  top_k_agencies = 10, 
  top_k_suppliers = 15,  
  group_by_grade = TRUE
)

saveNetwork(health_defence_sankey, file = paste0("sankey_health_education_", 2023, ".html"))
```

```{=html}
<iframe src="sankey_health_education_2023.html" width="100%" height="600px" frameborder="0"></iframe>
```
### 5.2 Filtering by Agency

This Sankey diagram examines the Land Transport Authority's procurement patterns, showing its ministry connection and how its funds flow to suppliers of varying financial capacities. This view helps understand procurement strategies within key infrastructure agencies.

```{r}
# Create Sankey diagram for Land Transport Authority
lta_sankey <- create_sankey(
  data = procurement_enriched,
  year_filter = 2023,
  agency_filter = c("Land Transport Authority"),
  min_value = 500000, 
  top_k_suppliers = 25
)

saveNetwork(lta_sankey, file = paste0("sankey_lta_", 2023, ".html"))
```

```{=html}
<iframe src="sankey_lta_2023.html" width="100%" height="600px" frameborder="0"></iframe>
```
### 5.3 Filtering by Suppliers

#### Large Suppliers Analysis

This visualization focuses on the largest suppliers (S8-S10 financial grades) to understand how government procurement from major companies flows through different ministries and agencies. This perspective helps identify which large suppliers are receiving significant government contracts and through which channels.

```{r}
# Identify top 10 suppliers by total contract value
top_suppliers <- procurement_enriched %>%
  group_by(supplier_name) %>%
  summarize(total_value = sum(awarded_amt, na.rm = TRUE)) %>%
  arrange(desc(total_value)) %>%
  head(10) %>%
  pull(supplier_name)

# Create Sankey diagram for top suppliers
top_suppliers_sankey <- create_sankey(
  data = procurement_enriched,
  supplier_filter = top_suppliers,
  min_value = 500000, 
  top_k_ministries = 15,
  top_k_agencies = 25,   
  debug = FALSE
)

saveNetwork(top_suppliers_sankey, file = paste0("sankey_top_suppliers_", 2023, ".html"))
```

```{=html}
<iframe src="sankey_top_suppliers_2023.html" width="100%" height="600px" frameborder="0"></iframe>
```
#### SME Suppliers Analysis

This view highlights Small and Medium Enterprise suppliers (S2-S7 financial grades), showing which ministries and agencies engage more with smaller businesses. The analysis supports policy objectives related to SME participation in government procurement.

```{r}
# Get small-medium sized suppliers (those with lower financial grades)
sme_suppliers <- procurement_enriched %>%
  filter(financial_grade %in% c("S2", "S3", "S4", "S5", "S6", "S7")) %>%
  group_by(supplier_name) %>%
  summarize(total_value = sum(awarded_amt, na.rm = TRUE)) %>%
  arrange(desc(total_value)) %>%
  head(15) %>%
  pull(supplier_name)

# Create Sankey diagram for SME suppliers
sme_suppliers_sankey <- create_sankey(
  data = procurement_enriched,
  # Consider removing the year filter to see all data for these suppliers
  # year_filter = 2023,  
  supplier_filter = sme_suppliers,
  min_value = 100000,   # Lower threshold for SMEs
  top_k_ministries = 10,  # Show up to 10 ministries
  top_k_agencies = 20,
  group_by_grade = FALSE
)

saveNetwork(sme_suppliers_sankey, file = paste0("sankey_sme_suppliers_", 2023, ".html"))
```

```{=html}
<iframe src="sankey_sme_suppliers_2023.html" width="100%" height="600px" frameborder="0"></iframe>
```
### 5.4 Top K Analysis

This visualization presents the most significant procurement flows across the entire government for 2023. It quickly identifies the dominant ministries, key agencies, and major suppliers by procurement value, providing a strategic overview of government spending patterns.

```{r}
# Create Sankey diagram showing top entities across all dimensions
top_k_sankey <- create_sankey(
  data = procurement_enriched,
  year_filter = 2023,
  top_k_ministries = 5,  
  top_k_agencies = 10, 
  top_k_suppliers = 20, 
  min_value = 500000
)

saveNetwork(top_k_sankey, file = "sankey_top_k_2023.html")
```

```{=html}
<iframe src="sankey_top_k_2023.html" width="100%" height="600px" frameborder="0"></iframe>
```
## 6. UI Design for Interactive Dashboard

This section outlines the user interface design for the GeBiz Procurement Data Visualization dashboard. The interactive dashboard is designed to enable users to explore complex procurement flows through an intuitive and insight-focused interface.

### 6.1 Dashboard Layout

The dashboard follows a three-panel layout design optimized for both analytical depth and ease of use:

1.  Filter & Control Panel (Left): Provides structured access to filters and visualization settings
2.  Visualization Area (Center): Displays the interactive Sankey diagram with supporting tools
3.  Insights Panel (Right): Shows context-aware metrics and analytical highlights

This organization balances user control with information discovery, enabling both directed analysis and exploratory data visualization.

### 6.2 Filter & Control Panel

The left panel is organized into two distinct functional areas to improve workflow efficiency:

#### Data Filtering Section

-   Time Period Filter
    -   Year dropdown (2019-2023)
    -   Quarter selection (optional)
    -   Default: Most recent complete year
-   Focus Selection
    -   Tabbed interface (Ministry/Agency/Supplier)
    -   Searchable entity list with checkboxes
    -   "Select Top N" shortcut buttons
    -   Multi-select capabilities with clear indicators
-   Quick Filters
    -   Predefined filters (e.g., "Education Sector", "Healthcare", "Top 5 by Value")
    -   Recently used filter combinations
    -   Save/load filter configurations

#### Visualization Settings

-   Threshold Controls
    -   Minimum flow value slider with formatted value display
    -   Top N entities to display (separate controls for ministries, agencies, suppliers)
-   Display Options
    -   Group suppliers by financial grade toggle
    -   Use abbreviations toggle
    -   Node sizing options (fixed vs. proportional)
    -   Color scheme selector

### 6.3 Visualization Area

The central area features a dynamically updated Sankey diagram with supporting tools:

#### Visualization Toolbar

-   View Controls: Zoom in/out, reset view, fit to screen
-   Layout Options: Auto-arrange, lock/unlock node positions
-   Export Tools: Download as SVG/PNG, copy link, get embed code
-   Help Features: Diagram explanation, interaction guide

#### Interactive Sankey Diagram

-   Enhanced Interactions:
    -   Hover: Highlight related flows, show tooltip with key metrics
    -   Click: Select node, update insights panel, persist highlight
    -   Drag: Reposition nodes for custom layouts
    -   Double-click: Expand/collapse node to show/hide details
-   Visual Elements:
    -   Color-coded nodes (blue: ministries, orange: agencies, green: suppliers)
    -   Link thickness proportional to value
    -   Color intensity indicating relative importance
    -   Consistent visual language across the application

#### Legend and Context

-   Color Legend: Explains node and link color coding
-   Filter Status: Shows active filters and view parameters
-   Data Coverage: Indicates data completeness (especially for financial grades)

### 6.4 Insights Panel

The right panel provides context-aware information that updates dynamically based on user interactions:

#### Selection Context

-   Entity Profile: Detailed information about selected ministry/agency/supplier
-   Key Metrics: Procurement volume, contract count, average value
-   Comparative Indicators: Performance relative to peers and historical trends

#### Flow Analysis

-   Top Flows: Identifies largest procurement channels
-   Flow Distribution: Shows how funds distribute across the procurement network
-   Concentration Analysis: Highlights diversification or concentration patterns

#### Supplier Analysis

-   Financial Grade Distribution:
    -   Breakdown by supplier capacity (S1-S10)
    -   Comparison with government-wide averages
    -   SME participation metrics
-   Temporal Patterns:
    -   Sparklines showing procurement trends
    -   Seasonal patterns visualization
    -   Year-over-year comparisons

#### Actionable Insights

-   Key Findings: Automatically generated observations about the visualized data
-   Suggested Explorations: Recommended filters or views for deeper analysis
-   Anomaly Detection: Highlights unusual patterns or outliers

### 6.5 Interactive Features

The dashboard implements several advanced interactive features:

1.  Cross-filtering: Selections in one view affect other views for consistent analysis
2.  Progressive Disclosure: Interface elements appear contextually based on user actions
3.  State Persistence: User selections and custom views are maintained during analysis
4.  Responsive Layout: Interface adapts to available screen space
5.  Keyboard Navigation: Full keyboard access for accessibility compliance

```{=html}
<iframe src="mockup1.html" width="100%" height="600px" frameborder="0"></iframe>
```
## 7. RFM Analysis Module

The RFM (Recency, Frequency, Monetary) analysis module provides powerful supplier segmentation capabilities based on procurement behavior patterns.

### 7.1 RFM Analysis Function

The `create_rfm_analysis()` function segments suppliers based on their procurement patterns.

```{r}
create_rfm_analysis <- function(data, 
                               year_filter = NULL,
                               ministry_filter = NULL,
                               agency_filter = NULL,
                               supplier_filter = NULL,
                               min_monetary_value = 10000,
                               max_suppliers = 1000,
                               recency_quartiles = 4,
                               frequency_quartiles = 4,
                               monetary_quartiles = 4,
                               include_financial_grade = TRUE,
                               analysis_date = NULL,
                               debug = FALSE) {
  
  # Make a copy of the data to work with
  filtered_data <- data
  
  # Apply year filter if specified
  if(!is.null(year_filter)) {
    if("year" %in% colnames(filtered_data)) {
      filtered_data <- filtered_data %>% filter(year == year_filter)
      if(debug) message("After year filter: ", nrow(filtered_data), " rows")
    } else {
      warning("'year' column not found, skipping year filter")
    }
  }
  
  # Apply ministry filter if specified
  if(!is.null(ministry_filter)) {
    filtered_data <- filtered_data %>% filter(ministry %in% ministry_filter)
    if(debug) message("After ministry filter: ", nrow(filtered_data), " rows")
  }
  
  # Apply agency filter if specified
  if(!is.null(agency_filter)) {
    filtered_data <- filtered_data %>% filter(agency %in% agency_filter)
    if(debug) message("After agency filter: ", nrow(filtered_data), " rows")
  }
  
  # Apply supplier filter if specified
  if(!is.null(supplier_filter)) {
    filtered_data <- filtered_data %>% filter(supplier_name %in% supplier_filter)
    if(debug) message("After supplier filter: ", nrow(filtered_data), " rows")
  }
  
  # Ensure date column is properly formatted
  if(!"award_date" %in% colnames(filtered_data) || !inherits(filtered_data$award_date, "Date")) {
    filtered_data <- filtered_data %>%
      mutate(award_date = as.Date(award_date, format="%d/%m/%Y"))
  }
  
  # Set analysis date if not provided
  if(is.null(analysis_date)) {
    analysis_date <- max(filtered_data$award_date, na.rm = TRUE) + days(1)
    if(debug) message("Analysis date set to: ", analysis_date)
  }
  
  # Calculate RFM metrics for each supplier
  supplier_rfm <- filtered_data %>%
    group_by(supplier_name) %>%
    summarize(
      # Recency: days since last contract (lower is better)
      recency = as.numeric(difftime(analysis_date, max(award_date, na.rm = TRUE), units = "days")),
      # Frequency: number of contracts
      frequency = n(),
      # Monetary: total value of contracts
      monetary = sum(awarded_amt, na.rm = TRUE),
      # Additional metrics
      avg_contract = monetary / frequency,
      first_contract = min(award_date, na.rm = TRUE),
      last_contract = max(award_date, na.rm = TRUE),
      days_active = as.numeric(difftime(max(award_date, na.rm = TRUE), 
                                      min(award_date, na.rm = TRUE), 
                                      units = "days")) + 1,
      .groups = 'drop'
    )
  
  # Add financial grade information if requested
  if(include_financial_grade && "financial_grade" %in% colnames(filtered_data)) {
    financial_info <- filtered_data %>%
      group_by(supplier_name) %>%
      summarize(
        financial_grade = first(financial_grade),
        financial_category = first(financial_category),
        .groups = 'drop'
      )
    
    supplier_rfm <- supplier_rfm %>%
      left_join(financial_info, by = "supplier_name")
  }
  
  # Remove suppliers with missing names or identified as "Unknown"
  supplier_rfm <- supplier_rfm %>%
    filter(!is.na(supplier_name), 
           supplier_name != "Unknown", 
           supplier_name != "Unspecified Supplier") %>%
    # Filter out suppliers with extremely low values
    filter(monetary > min_monetary_value)
  
  # Calculate RFM scores (quartiles)
  supplier_rfm_scored <- supplier_rfm %>%
    mutate(
      # Recency score (note: lower recency days = higher score)
      r_score = ntile(desc(recency), recency_quartiles),
      # Frequency score
      f_score = ntile(frequency, frequency_quartiles),
      # Monetary score
      m_score = ntile(monetary, monetary_quartiles),
      # Combined RFM score
      rfm_score = r_score + f_score + m_score
    )
  
  # Create meaningful segment labels based on RFM scores
  supplier_rfm_scored <- supplier_rfm_scored %>%
    mutate(
      segment = case_when(
        r_score >= 3 & f_score >= 3 & m_score >= 3 ~ "Top Suppliers",
        r_score >= 3 & f_score >= 3 ~ "Active Contractors",
        r_score >= 3 & m_score >= 3 ~ "Big-Ticket Recent",
        f_score >= 3 & m_score >= 3 ~ "High Value Regular",
        r_score >= 3 ~ "Recent Contractors",
        f_score >= 3 ~ "Regular Contractors",
        m_score >= 3 ~ "Big Spenders",
        r_score == 1 & f_score == 1 & m_score == 1 ~ "Least Engaged",
        TRUE ~ "Average Contractors"
      )
    )
  
  # Add segment description for tooltip and display
  segment_descriptions <- c(
    "Top Suppliers" = "Recent, frequent, and high-value contractors",
    "Active Contractors" = "Recent and frequent, but lower contract values",
    "Big-Ticket Recent" = "Recent and high-value, but less frequent",
    "High Value Regular" = "Frequent and high-value, but less recent",
    "Recent Contractors" = "Recently engaged, but lower frequency and value",
    "Regular Contractors" = "Frequent engagement, but lower recency and value",
    "Big Spenders" = "High contract values, but less recent and frequent",
    "Average Contractors" = "Middle-range performance across RFM metrics",
    "Least Engaged" = "Low scores across all RFM dimensions"
  )
  
  supplier_rfm_scored <- supplier_rfm_scored %>%
    mutate(segment_description = segment_descriptions[segment])
  
  # Create summary by segment
  segment_summary <- supplier_rfm_scored %>%
    group_by(segment) %>%
    summarize(
      count = n(),
      pct_suppliers = round(n() / nrow(supplier_rfm_scored) * 100, 1),
      avg_recency = round(mean(recency)),
      avg_frequency = round(mean(frequency), 1),
      avg_monetary = round(mean(monetary)),
      total_monetary = sum(monetary),
      pct_spend = round(sum(monetary) / sum(supplier_rfm_scored$monetary) * 100, 1),
      .groups = 'drop'
    ) %>%
    arrange(desc(total_monetary))
  
  # Sample data if there are too many suppliers for visualization
  if(nrow(supplier_rfm_scored) > max_suppliers) {
    supplier_rfm_sampled <- supplier_rfm_scored %>%
      # Stratified sampling to maintain segment proportions
      group_by(segment) %>%
      sample_frac(min(1, max_suppliers / nrow(supplier_rfm_scored))) %>%
      ungroup()
    
    if(debug) message("Sampled ", nrow(supplier_rfm_sampled), " suppliers from ", 
                    nrow(supplier_rfm_scored), " total suppliers for visualization")
  } else {
    supplier_rfm_sampled <- supplier_rfm_scored
  }
  
  # Return all objects needed for analysis in a list
  return(list(
    rfm_data = supplier_rfm_scored,
    rfm_sample = supplier_rfm_sampled,
    segment_summary = segment_summary,
    analysis_date = analysis_date
  ))
}
```

#### RFM Analysis Parameters

The `create_rfm_analysis()` function offers extensive customization through various parameters that control filtering, segmentation granularity, and output configuration. Understanding these parameters is crucial for effectively tailoring the RFM analysis to specific analytical needs.


Filtering Parameters

- `year_filter`: Numeric or NULL. Restricts analysis to a specific year. When NULL (default), all years are included.
- `ministry_filter`: Character vector or NULL. Limits analysis to specific ministries. When NULL (default), all ministries are included.
- `agency_filter`: Character vector or NULL. Restricts analysis to specific agencies. When NULL (default), all agencies are included.
- `supplier_filter`: Character vector or NULL. Limits analysis to specific suppliers. When NULL (default), all suppliers are included.

Value and Sample Size Controls

- `min_monetary_value`: Numeric, default 10,000. Sets the minimum procurement value threshold for including a supplier in the analysis. Suppliers with total values below this threshold are excluded to focus on significant relationships.
- `max_suppliers`: Numeric, default 1,000. Limits the number of suppliers included in visualization outputs. If the number of suppliers exceeds this value, a stratified sample is selected to maintain representation across segments.

Segmentation Controls

- `recency_quartiles`: Numeric, default 4. Sets the number of segments for the recency dimension. Higher values create more granular segmentation.
- `frequency_quartiles`: Numeric, default 4. Sets the number of segments for the frequency dimension. Higher values create more granular segmentation.
- `monetary_quartiles`: Numeric, default 4. Sets the number of segments for the monetary value dimension. Higher values create more granular segmentation.

Additional Options

- `include_financial_grade`: Logical, default TRUE. When TRUE, incorporates supplier financial grade information into the RFM analysis, enabling correlation between financial capacity and procurement behavior.
- `analysis_date`: Date or NULL. Specifies the reference date for calculating recency (days since last contract). When NULL (default), uses the most recent date in the dataset plus one day.
- `debug`: Logical, default FALSE. When TRUE, outputs diagnostic messages during analysis to assist with troubleshooting.


The function outputs a comprehensive list containing:
- `rfm_data`: Complete RFM analysis for all suppliers
- `rfm_sample`: A sample of suppliers for visualization (limited by max_suppliers)
- `segment_summary`: Aggregated metrics for each RFM segment
- `analysis_date`: The reference date used for recency calculations

### 7.2 Creating RFM Visualizations

Various visualization functions to represent RFM analysis: - `create_rfm_heatmap()`: Visualizes the distribution of suppliers across RFM scores - `create_rfm_bubble_chart()`: Maps suppliers across the RFM dimensions - `create_segment_distribution()`: Compares supplier count vs. procurement value - `create_grade_segment_heatmap()`: Shows the relationship between financial grades and RFM segments - `create_rfm_datatable()`: Provides an interactive table of RFM analysis results

```{r}
create_rfm_heatmap <- function(rfm_results, 
                               title = "RFM Heatmap: Supplier Distribution",
                               subtitle = NULL,  # Make subtitle optional
                               interactive = TRUE) {
  
  # Prepare data for heatmap
  rfm_heatmap_data <- rfm_results$rfm_data %>%
    count(r_score, f_score, m_score) %>%
    # Convert scores to factors for better visualization
    mutate(
      r_score = factor(r_score, levels = 4:1),  # Reversed to put higher scores at top
      f_score = factor(f_score),
      m_score = factor(m_score)
    )
  
  # Create base plot
  rfm_heatmap <- ggplot(rfm_heatmap_data, aes(f_score, r_score, fill = n)) +
    geom_tile(color = "white") +
    geom_text(aes(label = n), color = "white", size = 3) +
    scale_fill_viridis_c() +
    labs(
      title = title,
      x = "Frequency Score (1-4)",
      y = "Recency Score (1-4)",
      fill = "Number of\nSuppliers"
    ) +
    facet_wrap(~m_score, labeller = labeller(m_score = function(x) paste("Monetary Score:", x))) +
    theme_minimal() +
    theme(
      plot.title = element_text(face = "bold", size = 16, margin = margin(t = 10, b = 20)),
      axis.title = element_text(face = "bold"),
      legend.title = element_text(face = "bold"),
      strip.text = element_text(face = "bold", size = 12),
      strip.background = element_rect(fill = "grey90", color = NA),
      plot.margin = margin(t = 20, r = 10, b = 10, l = 10),
      panel.spacing = unit(1, "lines")
    )
  
  # Add subtitle only if it's provided
  if (!is.null(subtitle)) {
    rfm_heatmap <- rfm_heatmap +
      labs(subtitle = subtitle) +
      theme(plot.subtitle = element_text(size = 12, margin = margin(b = 15)))
  }
  
  # For interactive plots, adjust the layout
  if(interactive) {
    p <- ggplotly(rfm_heatmap, height = 600)
    
    # Handle title and subtitle for interactive plot
    if (!is.null(subtitle)) {
      p <- p %>% layout(
        title = list(text = paste0(title, "<br>", "<sup>", subtitle, "</sup>")),
        margin = list(t = 100)
      )
    } else {
      p <- p %>% layout(
        title = list(text = title),
        margin = list(t = 60)  # Less margin needed without subtitle
      )
    }
    
    return(p)
  } else {
    return(rfm_heatmap)
  }
}

# 2. RFM Bubble Chart - visualizing suppliers across the RFM dimensions
create_rfm_bubble_chart <- function(rfm_results,
                                   title = "Supplier RFM Analysis",
                                   subtitle = "Bubble size represents total contract value",
                                   x_log = TRUE,
                                   size_range = c(2, 15),
                                   color_palette = "Set1",
                                   interactive = TRUE) {
  
  # Create RFM bubble chart
  rfm_bubble <- ggplot(rfm_results$rfm_sample, 
                      aes(frequency, recency, size = monetary, color = segment)) +
    geom_point(alpha = 0.7) +
    scale_size(range = size_range, name = "Contract Value") +
    scale_color_brewer(palette = color_palette) +
    labs(
      title = title,
      subtitle = subtitle,
      x = "Frequency (Number of Contracts)",
      y = "Recency (Days Since Last Contract)",
      color = "Segment"
    ) +
    theme_minimal() +
    theme(
      plot.title = element_text(face = "bold", size = 16),
      plot.subtitle = element_text(size = 12),
      axis.title = element_text(face = "bold"),
      legend.title = element_text(face = "bold")
    )
  
  # Apply log scale if requested
  if(x_log) {
    rfm_bubble <- rfm_bubble + 
      scale_x_log10(labels = scales::comma) +
      labs(x = "Frequency (Number of Contracts, log scale)")
  } else {
    rfm_bubble <- rfm_bubble +
      scale_x_continuous(labels = scales::comma)
  }
  
  # Always reverse y-axis so lower recency (better) is at the top
  rfm_bubble <- rfm_bubble + scale_y_reverse(labels = scales::comma)
  
  # Return interactive or static plot based on parameter
  if(interactive) {
    return(ggplotly(rfm_bubble) %>%
             layout(title = list(text = paste0(title, "<br>", "<sup>", subtitle, "</sup>"))))
  } else {
    return(rfm_bubble)
  }
}

# 3. Segment Distribution Chart - comparing supplier count vs. procurement value
create_segment_distribution <- function(rfm_results,
                                      title = "Supplier Segments: Distribution",
                                      subtitle = "Comparing percentage of suppliers to percentage of total procurement value",
                                      colors = c("#1f77b4", "#ff7f0e"),
                                      interactive = TRUE) {
  
  # Create a dual-bar chart using position_dodge instead of position_nudge
  segment_dist_chart <- ggplot(rfm_results$segment_summary, 
                              aes(x = reorder(segment, pct_spend))) +
    geom_bar(aes(y = pct_suppliers, fill = "% of Suppliers"), stat = "identity", 
             alpha = 0.7, position = position_dodge(width = 0.8), width = 0.7) +
    geom_bar(aes(y = pct_spend, fill = "% of Spend"), stat = "identity", 
             alpha = 0.7, position = position_dodge(width = 0.8), width = 0.7) +
    scale_fill_manual(values = setNames(colors, c("% of Suppliers", "% of Spend"))) +
    labs(
      title = title,
      subtitle = subtitle,
      x = "Segment",
      y = "Percentage (%)",
      fill = ""
    ) +
    theme_minimal() +
    theme(
      plot.title = element_text(face = "bold", size = 16),
      plot.subtitle = element_text(size = 12),
      axis.title = element_text(face = "bold"),
      axis.text.x = element_text(angle = 45, hjust = 1),
      legend.position = "top"
    ) +
    coord_flip()
  
  # Return interactive or static plot based on parameter
  if(interactive) {
    return(ggplotly(segment_dist_chart) %>%
             layout(title = list(text = paste0(title, "<br>", "<sup>", subtitle, "</sup>"))))
  } else {
    return(segment_dist_chart)
  }
}

# 4. Financial Grade vs. RFM Segment Heatmap
create_grade_segment_heatmap <- function(rfm_results,
                                       title = "Supplier Distribution: Financial Grade vs. RFM Segment",
                                       interactive = TRUE) {
  
  # Check if financial grade data is available
  if(!"financial_category" %in% colnames(rfm_results$rfm_data)) {
    warning("Financial category data not available. Cannot create grade vs segment heatmap.")
    return(NULL)
  }
  
  # Prepare data for cross-analysis
  grade_rfm_data <- rfm_results$rfm_data %>%
    filter(!is.na(financial_category)) %>%
    group_by(financial_category, segment) %>%
    summarize(
      count = n(),
      total_monetary = sum(monetary),
      .groups = 'drop'
    )
  
  # Create a heatmap showing the distribution of segments across financial categories
  grade_segment_heatmap <- ggplot(grade_rfm_data, 
                                aes(segment, financial_category, fill = count)) +
    geom_tile() +
    geom_text(aes(label = count), color = "white") +
    scale_fill_viridis_c() +
    labs(
      title = title,
      x = "RFM Segment",
      y = "Financial Category",
      fill = "Count"
    ) +
    theme_minimal() +
    theme(
      axis.text.x = element_text(angle = 45, hjust = 1),
      plot.title = element_text(face = "bold")
    )
  
  # Return interactive or static plot based on parameter
  if(interactive) {
    return(ggplotly(grade_segment_heatmap))
  } else {
    return(grade_segment_heatmap)
  }
}
# 5. Interactive RFM Data Table - Fixed version
create_rfm_datatable <- function(rfm_results,
                            title = "Supplier RFM Analysis and Segmentation",
                            max_rows = 1000) {
  # Get the data and convert to plain data.frame
  rfm_data <- as.data.frame(rfm_results$rfm_data) 
  
  # Select important columns only
  rfm_data <- rfm_data[, c("supplier_name", "recency", "frequency", "monetary", 
                          "avg_contract", "r_score", "f_score", "m_score",
                          "rfm_score", "segment", "financial_category")]
  
  # Create the datatable
  dt <- datatable(
    rfm_data,
    caption = "Supplier RFM Analysis and Segmentation",
    colnames = c(
      "Supplier" = "supplier_name",
      "Recency (Days)" = "recency",
      "Frequency" = "frequency",
      "Value ($)" = "monetary",
      "Avg Contract ($)" = "avg_contract",
      "R" = "r_score", 
      "F" = "f_score", 
      "M" = "m_score",
      "RFM Score" = "rfm_score",
      "Segment" = "segment",
      "Financial Category" = "financial_category"
    ),
    options = list(
      pageLength = 25,
      scrollX = TRUE,
      scrollY = 400
    ),
    escape = FALSE  # Try this to prevent escape-related errors
  )
  
  # Add number formatting - Use the NEW column names after datatable() renames them
  dt <- dt %>% 
    formatRound(columns = c("Recency (Days)", "Value ($)", "Avg Contract ($)"), digits = 0)
  
  return(dt)
}
```

### 7.3 Demonstrating RFM Analysis with Different Parameters

Now let's demonstrate the RFM analysis with different parameter settings, starting with a baseline analysis of all suppliers:

::: panel-tabset
### Heatmap

```{r}
# First create the RFM analysis results
rfm_results_all <- create_rfm_analysis(
  data = procurement_enriched,
  min_monetary_value = 100000,  # Focus on more significant contracts
  max_suppliers = 50  # Limit for visualization
)

# Create the RFM heatmap
rfm_heatmap <- create_rfm_heatmap(
  rfm_results_all,
  title = "RFM Heatmap: Supplier Distribution"
)

# Display the heatmap
rfm_heatmap
```

### Bubble Chart

```{r}
# Create the bubble chart visualization
rfm_bubble <- create_rfm_bubble_chart(rfm_results_all)

# Display the bubble chart
rfm_bubble
```

### Segment Distribution

```{r}
# Create the segment distribution visualization
segment_dist <- create_segment_distribution(rfm_results_all)

# Display the segment distribution
segment_dist
```

### Segment Summary

```{r}
# Display the RFM segment summary
print(rfm_results_all$segment_summary)
```

### Interactive Table

```{r}
# Create the interactive datatable
rfm_table <- create_rfm_datatable(rfm_results_all)

# Display the interactive table
rfm_table
```
:::

### 7.3 Demonstrating RFM Analysis with Different Parameters

Examples of RFM analysis with different parameter settings.

::: panel-tabset
### Heatmap

```{r}
# First create the RFM analysis results
rfm_results_all <- create_rfm_analysis(
  data = procurement_enriched,
  min_monetary_value = 100000,  # Focus on more significant contracts
  max_suppliers = 50  # Limit for visualization
)
# Create the RFM heatmap
rfm_heatmap <- create_rfm_heatmap(
  rfm_results_all,
  title = "RFM Heatmap: Supplier Distribution"
)
# Display the heatmap
rfm_heatmap
```

### Bubble Chart

```{r}
# Create the bubble chart visualization
rfm_bubble <- create_rfm_bubble_chart(rfm_results_all)
# Display the bubble chart
rfm_bubble
```

### Segment Distribution

```{r}
# Create the segment distribution visualization
segment_dist <- create_segment_distribution(rfm_results_all)
# Display the segment distribution
segment_dist
```

### Segment Summary

```{r}
# Display the RFM segment summary
print(rfm_results_all$segment_summary)
```

### Interactive Table

```{r}
# Create the interactive datatable
rfm_table <- create_rfm_datatable(rfm_results_all)
# Display the interactive table
rfm_table
```
:::

### 7.4 Ministry Level Demonstration

Ministry-specific RFM analysis examples. 

::: panel-tabset 

### MOE Heatmap

```{r}
# Analyze suppliers working with Ministry of Education
moe_rfm_results <- create_rfm_analysis(
  data = procurement_enriched,
  ministry_filter = "MINISTRY OF EDUCATION",
  min_monetary_value = 50000,  # Lower threshold for ministry-specific analysis
  debug = TRUE
)
# Create Ministry of Education heatmap with no subtitle
moe_rfm_heatmap <- create_rfm_heatmap(
  moe_rfm_results,
  title = "Ministry of Education: RFM Heatmap"
)
# Display the MOE heatmap
moe_rfm_heatmap
```

### MOE Bubble Chart

```{r}
# Create the MOE bubble chart
moe_rfm_bubble <- create_rfm_bubble_chart(
  moe_rfm_results,
  title = "Ministry of Education: Supplier RFM Analysis",
  subtitle = "Education supplier positioning by recency, frequency and value",
  color_palette = "Dark2"
)
# Display the MOE bubble chart
moe_rfm_bubble
```

### MOE Segment Distribution

```{r}
# Create the MOE segment distribution
moe_segment_dist <- create_segment_distribution(
  moe_rfm_results,
  title = "Ministry of Education: Supplier Segment Distribution",
  subtitle = "Comparing education supplier count vs. procurement value by segment"
)
# Display the MOE segment distribution
moe_segment_dist
```

:::

```{r, echo=FALSE, eval=FALSE}
# Check the structure of rfm_results_all
str(rfm_results_all)

# Specifically examine the columns in the rfm_data component
cat("\nColumns in rfm_results_all$rfm_data:\n")
colnames(rfm_results_all$rfm_data)

# Check the class of the rfm_data
cat("\nClass of rfm_data:\n")
class(rfm_results_all$rfm_data)

# Check the first few rows to understand the data structure
cat("\nFirst few rows of rfm_data:\n")
head(rfm_results_all$rfm_data)

# Compare with columns we're trying to format in the original function
cat("\nColumns we're trying to format:\n")
format_cols <- c("recency", "monetary", "avg_contract")
segment_cols <- "segment"
score_cols <- c("r_score", "f_score", "m_score")

cat("Format columns present:", format_cols %in% colnames(rfm_results_all$rfm_data), "\n")
cat("Segment column present:", segment_cols %in% colnames(rfm_results_all$rfm_data), "\n")
cat("Score columns present:", score_cols %in% colnames(rfm_results_all$rfm_data), "\n")
```

### 7.5 RFM Analysis: Financial Grade Integration

Demonstrates integration of financial grade information with RFM analysis.

```{r}
# Run RFM analysis with financial grade focus
financial_rfm_results <- create_rfm_analysis(
  data = procurement_enriched,
  min_monetary_value = 100000,
  include_financial_grade = TRUE
)

# Create financial grade vs. RFM segment heatmap with no subtitle
grade_segment_heatmap <- create_grade_segment_heatmap(
  financial_rfm_results,
  title = "Supplier Distribution: Financial Grade vs. RFM Segment",
)

# Create a bubble chart with financial categories highlighted
financial_bubble <- create_rfm_bubble_chart(
  financial_rfm_results,
  title = "Supplier RFM Analysis by Financial Category",
  subtitle = "Showing relationship between financial grade and RFM position"
)
financial_bubble

# Create interactive datatable with financial grade information
financial_rfm_table <- create_rfm_datatable(
  financial_rfm_results,
  title = "Supplier RFM Analysis with Financial Grades"
)
financial_rfm_table
```

## 8. UI Design for RFM Analysis Dashboard

The RFM Analysis Dashboard provides a comprehensive interface for analyzing supplier performance and segmentation through the lens of Recency, Frequency, and Monetary Value metrics. This powerful segmentation tool helps procurement officers identify key supplier groups and optimize engagement strategies.

### 8.1 Dashboard Layout

The RFM Analysis Dashboard follows a structured layout optimized for both in-depth analysis and intuitive exploration:

1.  Parameters & Control Panel (Left): Allows users to configure RFM analysis parameters and selection criteria
2.  Visualization Hub (Center): Houses multiple coordinated visualizations of RFM data
3.  Segment Insights Panel (Right): Provides detailed metrics and actionable insights for selected segments

This integrated layout ensures users can seamlessly move between parameter adjustment, visual exploration, and strategic insight extraction.

### 8.2 Parameters & Control Panel

The left panel provides complete control over RFM analysis parameters:

#### Data Selection

-   Analysis Scope
    -   Date range with default to last complete fiscal year
    -   Ministry/Agency filter with multi-select capability
    -   Supplier category filter (All, Large, Medium, Small)
    -   Minimum contract value threshold slider
-   RFM Calculation Parameters
    -   Analysis reference date picker (defaults to current date)
    -   Recency weight adjustment (1-5)
    -   Frequency weight adjustment (1-5)
    -   Monetary weight adjustment (1-5)
    -   Quartile boundaries adjustment (3-5 segments per dimension)
-   Segment Customization
    -   Predefined segment templates (Standard RFM, Value-focused, Engagement-focused)
    -   Custom segment definition interface
    -   Segment naming and color scheme selection

#### Output Configuration

-   Visualization Controls
    -   Chart type selector (Heatmap, Bubble, Distribution)
    -   Display density slider (data points per view)
    -   Label density control
    -   Include/exclude unclassified suppliers toggle
-   Export Options
    -   Save configuration preset
    -   Schedule automated analysis
    -   Export format selection (PDF, Excel, Power BI)

### 8.3 Visualization Hub

The central area presents coordinated, interactive visualizations:

#### Primary Visualization Area

-   Tabbed Interface with the following views:
    -   RFM Heatmap: Shows supplier distribution across RFM score combinations
    -   Segment Bubble Chart: Maps suppliers by recency, frequency with bubble size for monetary value
    -   Distribution Analysis: Bar charts comparing supplier counts vs. procurement value
    -   Segment Migration: Shows how suppliers move between segments over time
    -   Financial Grade Correlation: Compares RFM segments with financial grades
-   Interactive Features:
    -   Drill-down capabilities on all charts
    -   Brushing and linking across visualizations
    -   Animation controls for temporal analysis
    -   Highlighting of selected segments across all views

#### Visualization Toolbar

-   View Controls: Zoom, pan, reset view
-   Selection Tools: Rectangle select, lasso select
-   Comparative Tools: Segment comparison, benchmark overlay
-   Annotation Tools: Add notes, highlight insights

#### Key Metrics Dashboard

-   Summary Statistics Band:
    -   Total suppliers analyzed
    -   Total procurement value
    -   Average RFM score
    -   Segment concentration index
    -   Year-over-year segment volatility

### 8.4 Segment Insights Panel

The right panel delivers actionable insights about selected segments:

#### Segment Profile

-   Segment Header:
    -   Segment name and color coding
    -   Summary description of segment characteristics
    -   Count and percentage of total suppliers
    -   Procurement value and percentage of total
-   RFM Profile:
    -   Average recency (days since last contract)
    -   Average frequency (contracts per year)
    -   Average monetary value (per supplier)
    -   RFM score distribution within segment

#### Performance Metrics

-   Procurement Pattern Analysis:
    -   Contract size distribution
    -   Temporal pattern visualization
    -   Agency distribution
    -   Contract type breakdown
-   Comparative Analysis:
    -   Performance vs. other segments
    -   Year-over-year changes
    -   Performance vs. financial grade expectations
    -   Distance from ideal supplier profile

#### Strategic Recommendations

-   Engagement Strategies:
    -   Tailored engagement recommendations based on segment
    -   Opportunity identification
    -   Risk assessment
    -   Performance improvement suggestions
-   Action Planning:
    -   Suggested next steps for each segment
    -   Priority ranking of actions
    -   Expected impact metrics
    -   Integration with procurement planning

### 8.5 Advanced Interaction Features

The RFM Analysis Dashboard implements several advanced interaction features:

1.  Segment-Driven Filtering: Selections in segment visualizations automatically filter all other views
2.  Parameter Impact Simulation: Interactive preview of how parameter changes affect segmentation
3.  Threshold Sensitivity Analysis: Shows stability of segments across different threshold settings
4.  Temporal Playback: Animated visualization of how supplier segments evolve over time
5.  Personalized Insights: Context-aware recommendations based on selected segments and historical actions

### 8.6 Integration with Other Modules

The RFM Analysis Dashboard seamlessly integrates with other system modules:

1.  Sankey Flow Integration: Selected segments can be highlighted in procurement flow visualizations
2.  Supplier Profile Connection: Direct links to detailed supplier profiles for deeper analysis
3.  Predictive Analytics Bridge: Feed RFM segments into procurement forecasting and planning tools
4.  Export to Strategy: Direct export of segment insights to procurement strategy documents
5.  Notification System: Set up alerts for segment transitions or significant changes in supplier behavior

```{=html}
<iframe src="mockup2.html" width="100%" height="600px" frameborder="0"></iframe>
```
