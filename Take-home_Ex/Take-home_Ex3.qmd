---
title: "Take-home Exercise 3: GeBiz Procurement Data Visualization Prototype"
author: "Sindy"
date-modified: "last-modified"
output:
  html_document:
    css: styles.css
execute:
  echo: true
  eval: true
  warning: false
  freeze: true
---

## 1. Overview

This document presents a visualization prototype for GeBiz procurement data. We will focus on creating Sankey diagrams to visualize procurement flows from ministries to agencies to suppliers.

```{r}
# Load required packages
pacman::p_load(dplyr, stringr, lubridate, networkD3, tidyverse, 
               plotly, DT, viridis, scales, htmlwidgets, htmltools)
```

## 2. Data Preparation

### 2.1 Loading and Enriching Data

Before creating our visualizations, we need to load and prepare the relevant datasets. We're working with with the GeBiz dataset and 2 other dataset that sourced online:

1.  Procurement transaction data - the core dataset with details of each procurement activity from GeBiz

2.  Supplier financial information - containing grading data for suppliers (note: this dataset is incomplete, as we were unable to obtain financial grades for all suppliers)

3, Agency mapping data - providing the hierarchical relationships between agencies and ministries

The code below loads these datasets from CSV files into R data frames. We'll need to handle the incomplete nature of the supplier financial data during our analysis.

```{r}
# Load the necessary datasets
procurement_df <- read.csv('data/GovernmentProcurementviaGeBIZ.csv')  # Procurement data CSV
financial_df <- read.csv('data/supplier_details.csv')  # CSV with supplier financial grades
agency_mapping_df <- read.csv('data/agency_mapping.csv')  # Agency mapping data
```

### 2.2 Extracting Supplier Grades

The `financial_df` dataset contains supplier grade information, which indicates the financial capacity of each supplier. The Singapore government classifies suppliers on a scale from S2 to S10, with each grade corresponding to specific monetary thresholds:

-   S2: \$100,000 (EPU S2)
-   S3: \$250,000 (EPU S3)
-   S4: \$500,000 (EPU S4)
-   S5: \$1,000,000 (EPU S5)
-   S6: \$3,000,000 (EPU S6)
-   S7: \$5,000,000 (EPU S7)
-   S8: \$10,000,000 (EPU S8)
-   S9: \$30,000,000 (EPU S9)
-   S10: \>\$30,000,000 (EPU S10)

Higher grades (S8-S10) represent larger companies with greater financial capacity, while lower grades (S2-S4) represent smaller contractors.

```{r}
# Function to extract just the S-grade (S2-S10) from the financial grade string
extract_s_grade <- function(grade_string) {
  if (is.na(grade_string)) {
    return(NA)
  }
  
  # Use regex to extract S followed by a number
  match <- str_extract(grade_string, "S\\d+")
  return(match)
}

# Create simplified financial grades
financial_df$financial_grade <- sapply(financial_df$financial_grade, extract_s_grade)

# Create mapping dataframes for lookups
supplier_grade_map <- financial_df %>% 
  select(supplier_name, financial_grade) %>%
  distinct()
```

Since we were unable to obtain financial grades for all suppliers in our procurement dataset, we'll need to handle missing values appropriately in our analysis. We'll need to account for the incomplete coverage in our visualizations and interpretations.

### 2.3 Joining Data and Creating an Enriched Dataset

To create comprehensive visualizations, we need to combine all our datasets into one enriched procurement dataset. This includes:

1.  Adding supplier financial grades to the procurement records
2.  Adding ministry information to the agencies
3.  Creating standardized abbreviations for agencies and ministries for cleaner visualization

The code below performs these join operations and creates our main analysis dataset.

```{r}
procurement_enriched <- procurement_df %>%
  left_join(supplier_grade_map, by = "supplier_name")

agency_mapping <- agency_mapping_df %>%
  select(agency, agency_abbr, ministry, ministry_abbr)

procurement_enriched <- procurement_enriched %>%
  left_join(agency_mapping, by = "agency")

write.csv(procurement_enriched, 'procurement_output.csv', row.names = FALSE)
```

### 2.4 Verifying Data Enrichment

After joining the datasets, it's important to verify that the enrichment was successful and understand the extent of missing data. The code below reports statistics on the completeness of our enriched dataset, including:

-   Total number of procurement records
-   Records with financial grades (expected to be incomplete due to data limitations)
-   Records with agency abbreviations
-   Records with ministry information

This verification step is particularly important given that we're working with external datasets of varying completeness. Understanding these limitations will help us design appropriate visualizations and interpret results accurately.

```{r}
cat("Total procurement records:", nrow(procurement_enriched), "\n")
cat("Records with financial grades:", sum(!is.na(procurement_enriched$financial_grade)), "\n")
cat("Records with agency abbreviations:", sum(!is.na(procurement_enriched$agency_abbr)), "\n")
cat("Records with ministry information:", sum(!is.na(procurement_enriched$ministry)), "\n")
```

```{r}
glimpse(procurement_enriched)
```

### 2.5 Exploratory Data Analysis

#### Basic summary statistics for key numeric variables.
```{r}
summary(procurement_df$awarded_amt)
```


#### Count of records by year to understand the temporal distribution
```{r}
yearly_counts <- procurement_df %>%
  mutate(year = year(as.Date(award_date, format="%d/%m/%Y"))) %>%
  group_by(year) %>%
  summarise(count = n(),
            total_value = sum(awarded_amt, na.rm = TRUE),
            avg_value = mean(awarded_amt, na.rm = TRUE),
            median_value = median(awarded_amt, na.rm = TRUE)) %>%
  arrange(year)

print(yearly_counts)
```


#### Examine the distribution of procurement by ministry and agency
```{r}
ministry_distribution <- procurement_enriched %>%
  group_by(ministry) %>%
  summarise(count = n(),
            total_value = sum(awarded_amt, na.rm = TRUE),
            avg_value = mean(awarded_amt, na.rm = TRUE)) %>%
  arrange(desc(total_value))

head(ministry_distribution, 10)
```


#### Top agencies by procurement value
```{r}
agency_distribution <- procurement_enriched %>%
  group_by(agency) %>%
  summarise(count = n(),
            total_value = sum(awarded_amt, na.rm = TRUE),
            avg_value = mean(awarded_amt, na.rm = TRUE)) %>%
  arrange(desc(total_value))

head(agency_distribution, 10)
```


#### Top suppliers by procurement value
```{r}
supplier_distribution <- procurement_enriched %>%
  group_by(supplier_name) %>%
  summarise(count = n(),
            total_value = sum(awarded_amt, na.rm = TRUE),
            avg_value = mean(awarded_amt, na.rm = TRUE)) %>%
  arrange(desc(total_value))

head(supplier_distribution, 10)

```

#### Distribution of suppliers by financial grade

```{r}
grade_distribution <- procurement_enriched %>%
  group_by(financial_grade) %>%
  summarise(count = n(),
            unique_suppliers = n_distinct(supplier_name),
            total_value = sum(awarded_amt, na.rm = TRUE),
            pct_value = round(total_value/sum(procurement_enriched$awarded_amt, na.rm = TRUE)*100, 2),
            avg_contract_value = mean(awarded_amt, na.rm = TRUE)) %>%
  arrange(desc(total_value))

print(grade_distribution)
```
#### Distribution by consolidated financial category
```{r}
if(!"financial_category" %in% colnames(procurement_enriched)) {
  procurement_enriched <- procurement_enriched %>%
    mutate(financial_category = case_when(
      financial_grade %in% c("S1", "S2", "S3", "S4") ~ "Small (S1-S4)",
      financial_grade %in% c("S5", "S6", "S7") ~ "Medium (S5-S7)",
      financial_grade %in% c("S8", "S9", "S10") ~ "Large (S8-S10)",
      TRUE ~ "Unspecified Grade"
    ))
}
category_distribution <- procurement_enriched %>%
  group_by(financial_category) %>%
  summarise(count = n(),
            unique_suppliers = n_distinct(supplier_name),
            total_value = sum(awarded_amt, na.rm = TRUE),
            pct_value = round(total_value/sum(procurement_enriched$awarded_amt, na.rm = TRUE)*100, 2),
            avg_contract_value = mean(awarded_amt, na.rm = TRUE)) %>%
  arrange(desc(total_value))

print(category_distribution)
```


#### Are contracts awarded consistently with financial capacity?
This checks if higher-grade suppliers tend to get higher-value contracts.
```{r}
grade_contract_match <- procurement_enriched %>%
  filter(!is.na(financial_grade)) %>%
  group_by(financial_grade) %>%
  summarise(
    median_contract_value = median(awarded_amt, na.rm = TRUE),
    avg_contract_value = mean(awarded_amt, na.rm = TRUE),
    max_contract_value = max(awarded_amt, na.rm = TRUE),
    total_awarded = sum(awarded_amt, na.rm = TRUE),
    contract_count = n()
  ) %>%
  arrange(financial_grade)

print(grade_contract_match)
```

### 2.6 Temporal Patterns

#### Examine monthly patterns in procurement

```{r}
if(!inherits(procurement_enriched$award_date, "Date")) {
  procurement_enriched <- procurement_enriched %>%
    mutate(award_date = as.Date(award_date, format="%d/%m/%Y"))
}
monthly_patterns <- procurement_enriched %>%
  mutate(month = month(award_date, label = TRUE),
         year = year(award_date)) %>%
  # Filter to include only the relevant years (2019-2023)
  filter(year >= 2019 & year <= 2023) %>%
  group_by(year, month) %>%
  summarise(count = n(),
            total_value = sum(awarded_amt, na.rm = TRUE)) %>%
  ungroup()
```

#### Plot monthly patterns across years with improved styling
```{r}
year_colors <- c("2019" = "#1f77b4", "2020" = "#ff7f0e", 
                "2021" = "#2ca02c", "2022" = "#d62728", 
                "2023" = "#9467bd")

ggplot(monthly_patterns, aes(x = month, y = total_value, group = year, color = factor(year))) +
  geom_line(size = 1, alpha = 0.3) + 
  geom_point(size = 2.5, alpha = 0.7) +  
  labs(title = "Monthly Procurement Patterns (2019-2023)",
       subtitle = "Comparing monthly procurement values across years",
       x = "Month",
       y = "Total Procurement Value (SGD)",
       color = "Year") +
  theme_minimal() +
  theme(
    legend.position = "right",
    panel.grid.minor = element_blank(),
    text = element_text(size = 12),
    plot.title = element_text(face = "bold", size = 16),
    axis.text.x = element_text(angle = 45, hjust = 1)
  ) +
  scale_y_continuous(labels = scales::comma) +
  scale_color_manual(values = year_colors)
```

### 2.7 Distribution of Award Amounts
Create a histogram of award amounts to see the distribution
```{r}
ggplot(procurement_enriched, aes(x = awarded_amt)) +
  geom_histogram(bins = 30, fill = "steelblue", alpha = 0.7) +
  scale_x_log10() +  # Log scale for better visualization
  labs(title = "Distribution of Award Amounts (Log Scale)",
       x = "Award Amount (Log Scale)",
       y = "Count") +
  theme_minimal()
```


#### Box plot of award amounts by financial category
```{r}
if(!"financial_category" %in% colnames(procurement_enriched)) {
  procurement_enriched <- procurement_enriched %>%
    mutate(financial_category = case_when(
      financial_grade %in% c("S1", "S2", "S3", "S4") ~ "Small (S1-S4)",
      financial_grade %in% c("S5", "S6", "S7") ~ "Medium (S5-S7)",
      financial_grade %in% c("S8", "S9", "S10") ~ "Large (S8-S10)",
      TRUE ~ "Unspecified Grade"
    ))
}

ggplot(procurement_enriched, aes(x = financial_category, y = awarded_amt)) +
  geom_boxplot(fill = "steelblue", alpha = 0.7) +
  scale_y_log10() +  # Log scale for better visualization
  labs(title = "Distribution of Award Amounts by Supplier Category",
       x = "Supplier Financial Category",
       y = "Award Amount (Log Scale)") +
  theme_minimal() +
  theme(axis.text.x = element_text(angle = 45, hjust = 1))
```

Understanding missing supplier grade information.
```{r}
financial_grade_coverage <- sum(!is.na(procurement_enriched$financial_grade)) / nrow(procurement_enriched) * 100
cat("Percentage of procurement records with financial grade information:", round(financial_grade_coverage, 2), "%\n")

missing_grade_by_size <- procurement_enriched %>%
  group_by(is_grade_missing = is.na(financial_grade)) %>%
  summarise(
    count = n(),
    total_value = sum(awarded_amt, na.rm = TRUE),
    avg_contract_value = mean(awarded_amt, na.rm = TRUE),
    median_contract_value = median(awarded_amt, na.rm = TRUE),
    pct_of_records = n() / nrow(procurement_enriched) * 100,
    pct_of_value = sum(awarded_amt, na.rm = TRUE) / sum(procurement_enriched$awarded_amt, na.rm = TRUE) * 100
  )

print(missing_grade_by_size)
```


### 2.8 Relationship Between Variables
Let's see if there's a relationship between award amount and number of contracts per supplier
```{r}
supplier_counts <- procurement_enriched %>%
  group_by(supplier_name) %>%
  summarise(contract_count = n(),
            total_value = sum(awarded_amt, na.rm = TRUE),
            avg_value = mean(awarded_amt, na.rm = TRUE))

ggplot(supplier_counts, aes(x = contract_count, y = avg_value)) +
  geom_point(alpha = 0.5) +
  geom_smooth(method = "loess") +
  scale_x_log10() +
  scale_y_log10() +
  labs(title = "Relationship Between Number of Contracts and Average Value",
       x = "Number of Contracts (Log Scale)",
       y = "Average Contract Value (Log Scale)") +
  theme_minimal()
```


## 3. Data Preprocessing

### 3.1 Date Conversion and Handling Missing Values

We'll perform several preprocessing steps to improve data quality:

1.  Convert date strings to proper Date objects
2.  Create a year field for filtering
3.  Handle missing values in supplier names
4.  Create financial grade categories for visualization

For the financial grades, we'll consolidate the nine different S-grades (S2-S10) into three more manageable categories:

-   Small (S1-S4): Suppliers with financial capacity up to \$500,000
-   Medium (S5-S7): Suppliers with financial capacity between \$1,000,000 and \$5,000,000
-   Large (S8-S10): Suppliers with financial capacity of \$10,000,000 and above

These preprocessing steps ensure our data is clean, properly formatted, and appropriately categorized for visualization.

```{r}
# Convert award_date to proper date format
procurement_enriched <- procurement_enriched %>%
  mutate(award_date = as.Date(award_date, format="%d/%m/%Y"))

# Create a year field for filtering
procurement_enriched <- procurement_enriched %>%
  mutate(year = year(award_date))

# Handle missing values in supplier_name
procurement_enriched <- procurement_enriched %>%
  mutate(supplier_name = ifelse(is.na(supplier_name) | supplier_name == "Unknown", "Unspecified Supplier", supplier_name))

# Create financial grade categories for better visualization
procurement_enriched <- procurement_enriched %>%
  mutate(financial_category = case_when(
    financial_grade %in% c("S1", "S2", "S3", "S4") ~ "Small (S1-S4)",
    financial_grade %in% c("S5", "S6", "S7") ~ "Medium (S5-S7)",
    financial_grade %in% c("S8", "S9", "S10") ~ "Large (S8-S10)",
    TRUE ~ "Unspecified Grade"
  ))

# Preview the processed data
glimpse(procurement_enriched)
```

## 4. Building the Sankey Diagram Visualization

The heart of our visualization is the create_sankey() function defined below. This function creates a Sankey diagram showing the flow of procurement funds from ministries to agencies to suppliers.

The function is highly customizable, allowing users to:

- Filter by year, ministry, agency, or supplier
- Show only the top K ministries, agencies, or suppliers by procurement value
- Set a minimum value threshold to include only significant flows
- Enable debug mode for troubleshooting when developing the Shiny application

This customizability makes the function valuable for exploring different aspects of the procurement network.

```{r}
create_sankey <- function(data, 
                          year_filter = NULL, 
                          ministry_filter = NULL,
                          agency_filter = NULL,
                          supplier_filter = NULL,
                          top_k_ministries = 10,
                          top_k_agencies = 10,
                          top_k_suppliers = 10,
                          min_value = 1000000,
                          supplier_char_limit = 50,
                          group_by_grade = FALSE,
                          debug = FALSE) {
  
  # Log data diagnostics if debug is enabled
  if(debug) {
    message("Data dimensions: ", nrow(data), " rows x ", ncol(data), " columns")
    if("ministry" %in% colnames(data)) {
      message("Unique ministries: ", length(unique(data$ministry)))
      if(!is.null(ministry_filter)) {
        message("Checking for requested ministry: ", 
                ifelse(any(ministry_filter %in% unique(data$ministry)), "Found", "Not found"))
      }
    } else {
      warning("'ministry' column not found in data")
    }
  }
  
  # Make a copy of the data
  filtered_data <- data
  
  # Apply year filter if specified
  if(!is.null(year_filter)) {
    if("year" %in% colnames(filtered_data)) {
      filtered_data <- filtered_data %>% filter(year == year_filter)
      if(debug) message("After year filter: ", nrow(filtered_data), " rows")
    } else {
      warning("'year' column not found, skipping year filter")
    }
  }
  
  # 1. Determine which ministries to include
  if(!is.null(ministry_filter)) {
    # Use the specified ministries
    ministries_to_include <- ministry_filter
  } else {
    # Get top ministries by award amount
    ministries_to_include <- filtered_data %>%
      group_by(ministry) %>%
      summarize(total_value = sum(awarded_amt, na.rm = TRUE)) %>%
      arrange(desc(total_value)) %>%
      head(top_k_ministries) %>%
      pull(ministry)
  }
  
  # 2. Determine which agencies to include
  if(!is.null(agency_filter)) {
    # Use the specified agencies
    agencies_to_include <- agency_filter
  } else {
    # Get top agencies by award amount
    agencies_to_include <- filtered_data %>%
      filter(ministry %in% ministries_to_include) %>%
      group_by(agency) %>%
      summarize(total_value = sum(awarded_amt, na.rm = TRUE)) %>%
      arrange(desc(total_value)) %>%
      head(top_k_agencies) %>%
      pull(agency)
  }
  
  # 3. Determine which suppliers to include based on the view mode
  if(!is.null(supplier_filter)) {
    # Use the specified suppliers
    suppliers_to_include <- supplier_filter
  } else {
    # Get top suppliers by award amount
    if(group_by_grade) {
      # When grouping by grade, supplier categories will be the financial_category (e.g., "Large (S8-S10)")
      # We still need to filter by top suppliers for consistency, but we'll sum across all suppliers
      suppliers_to_include <- filtered_data %>%
        filter(agency %in% agencies_to_include) %>%
        group_by(financial_category) %>%
        summarize(total_value = sum(awarded_amt, na.rm = TRUE)) %>%
        filter(!is.na(financial_category)) %>%  # Exclude NA categories
        arrange(desc(total_value)) %>%
        head(top_k_suppliers) %>%
        pull(financial_category)
    } else {
      # When showing individual suppliers
      suppliers_to_include <- filtered_data %>%
        filter(agency %in% agencies_to_include) %>%
        group_by(supplier_name) %>%
        summarize(total_value = sum(awarded_amt, na.rm = TRUE)) %>%
        arrange(desc(total_value)) %>%
        head(top_k_suppliers) %>%
        pull(supplier_name)
    }
  }
  
  if(debug) {
    message("Ministries to include: ", length(ministries_to_include))
    message("Agencies to include: ", length(agencies_to_include))
    message("Suppliers to include: ", length(suppliers_to_include))
  }
  
  # Filter the data to only include the selected entities
  if(group_by_grade) {
    # When grouping by grade, filter by financial_category
    filtered_data <- filtered_data %>%
      filter(
        ministry %in% ministries_to_include,
        agency %in% agencies_to_include,
        financial_category %in% suppliers_to_include
      )
  } else {
    # When showing individual suppliers, filter by supplier_name
    filtered_data <- filtered_data %>%
      filter(
        ministry %in% ministries_to_include,
        agency %in% agencies_to_include,
        supplier_name %in% suppliers_to_include
      )
  }
  
  if(debug) message("After entity filtering: ", nrow(filtered_data), " rows")
  
  # Check if we have any data left
  if(nrow(filtered_data) == 0) {
    warning("No data remains after filtering")
    return(NULL)
  }
  
  # Create ministry-to-agency flow
  ministry_agency_flow <- filtered_data %>%
    group_by(ministry, agency) %>%
    summarize(value = sum(awarded_amt, na.rm = TRUE), .groups = 'drop') %>%
    filter(value >= min_value)
  
  # Create agency-to-supplier flow based on the view mode
  if(group_by_grade) {
    # Group by financial_category (S-grades)
    agency_supplier_flow <- filtered_data %>%
      group_by(agency, financial_category) %>%
      summarize(value = sum(awarded_amt, na.rm = TRUE), .groups = 'drop') %>%
      filter(value >= min_value) %>%
      rename(supplier_name = financial_category)
  } else {
    # Group by individual supplier_name
    agency_supplier_flow <- filtered_data %>%
      group_by(agency, supplier_name) %>%
      summarize(value = sum(awarded_amt, na.rm = TRUE), .groups = 'drop') %>%
      filter(value >= min_value)
  }
  
  if(debug) {
    message("Ministry-agency flows: ", nrow(ministry_agency_flow))
    message("Agency-supplier flows: ", nrow(agency_supplier_flow))
  }
  
  # Check if we have any flows above the minimum value
  if(nrow(ministry_agency_flow) == 0 && nrow(agency_supplier_flow) == 0) {
    warning("No flows remain after applying minimum value filter (", 
            min_value, ")")
    return(NULL)
  }
  
  # Get unique lists of each entity type
  ministry_nodes <- unique(ministry_agency_flow$ministry)
  agency_nodes <- unique(c(ministry_agency_flow$agency, agency_supplier_flow$agency))
  supplier_nodes <- unique(agency_supplier_flow$supplier_name)
  
  # Create a data frame to hold both display names and full names for tooltips
  nodes <- data.frame(
    name = character(),        # Full name
    display_name = character(),  # Display name (full name for ministry/agency)
    group = character(),       # Node type
    stringsAsFactors = FALSE
  )
  
  # Add ministries with full name
  for (ministry in ministry_nodes) {
    display <- ministry
    
    nodes <- rbind(nodes, data.frame(
      name = ministry,
      display_name = display,
      group = "ministry",
      stringsAsFactors = FALSE
    ))
  }
  
  # Add agencies with full name
  for (agency in agency_nodes) {
    display <- agency
    
    nodes <- rbind(nodes, data.frame(
      name = agency,
      display_name = display,
      group = "agency",
      stringsAsFactors = FALSE
    ))
  }
  
  # Add suppliers with truncation if needed
  for (supplier in supplier_nodes) {
    # Truncate long supplier names based on the supplier_char_limit parameter
    display <- if(nchar(supplier) > supplier_char_limit) 
                 paste0(substr(supplier, 1, supplier_char_limit - 3), "...") 
               else 
                 supplier
    
    nodes <- rbind(nodes, data.frame(
      name = supplier,
      display_name = display,
      group = "supplier",
      stringsAsFactors = FALSE
    ))
  }
  
  # Get the indices of each node
  node_indices <- setNames(0:(nrow(nodes)-1), nodes$name)
  
  # Create the ministry to agency links
  links_m2a <- ministry_agency_flow %>%
    mutate(
      source = node_indices[ministry],
      target = node_indices[agency]
    ) %>%
    select(source, target, value)
  
  # Create the agency to supplier links
  links_a2s <- agency_supplier_flow %>%
    mutate(
      source = node_indices[agency],
      target = node_indices[supplier_name]
    ) %>%
    select(source, target, value)
  
  # Combine all links
  links <- bind_rows(links_m2a, links_a2s)
  
  # Check if we have any links
  if(nrow(links) == 0) {
    warning("No links could be created")
    return(NULL)
  }
  
  # Create Sankey diagram
  sankey <- sankeyNetwork(
    Links = links, 
    Nodes = nodes, 
    Source = "source", 
    Target = "target", 
    Value = "value", 
    NodeID = "display_name",
    NodeGroup = "group",
    # Custom color scheme
    colourScale = JS('d3.scaleOrdinal()
                     .domain(["ministry", "agency", "supplier"])
                     .range(["#1f77b4", "#ff7f0e", "#2ca02c"])'),
    # Layout parameters
    nodeWidth = 30,
    nodePadding = 20,
    margin = list(top = 30, right = 30, bottom = 30, left = 30),
    sinksRight = TRUE,
    fontSize = 11,
    height = 800,
    width = 1200,
    iterations = 64  # More iterations for better layout
  )
  
  # Add JavaScript for better rendering and tooltip formatting
  sankey <- htmlwidgets::onRender(
    sankey,
    '
    function(el, x) {
      // Ensure diagram is properly sized
      d3.select(el).select("svg")
        .attr("viewBox", "0 0 1200 800")
        .attr("preserveAspectRatio", "xMidYMid meet");
        
      // Add formatted tooltips to links
      d3.select(el).selectAll(".link")
        .append("title")
        .text(function(d) { 
          return d.source.name + " → " + d.target.name + 
                 "\\nValue: $" + d3.format(",.0f")(d.value); 
        });
    }
    '
  )
  
  return(sankey)
}
```

The `create_sankey()` function is highly customizable through various parameters that control filtering, display options, and performance.

Filtering parameters:

- `year_filter`: Numeric or NULL. Filter records by a specific year (e.g., 2023). If NULL (default), all years are included. 
- `ministry_filter`: Character vector or NULL. Filter by specific ministry names. If NULL (default), top ministries are selected based on top_k_ministries.
- `agency_filter`: Character vector or NULL. Filter by specific agency names. If NULL (default), top agencies are selected based on `top_k_agencies`.
- `supplier_filter`: Character vector or NULL. Filter by specific supplier names or categories (depending on `group_by_grade`). If NULL (default), top suppliers are selected based on `top_k_suppliers`.

Top-k selection parameters:

- `top_k_ministries`: Numeric, default 10. When no ministry filter is provided, specifies how many top ministries to include, ranked by total procurement value.
- `top_k_agencies`: Numeric, default 10. When no agency filter is provided, specifies how many top agencies to include, ranked by total procurement value.
- `top_k_suppliers`: Numeric, default 10. When no supplier filter is provided, specifies how many top suppliers or categories to include, ranked by total procurement value.

Other parameters:

- `min_value`: Numeric, default 1,000,000. Minimum threshold value for flows to be included in the diagram. Flows with values below this threshold are excluded, helping to simplify complex diagrams.

- `supplier_char_limit`: Numeric, default 50. Maximum number of characters to display for supplier names. Longer names are truncated with "...".

- `group_by_grade`: Logical, default FALSE. Controls whether suppliers are grouped by financial grade categories (TRUE) or shown as individual suppliers (FALSE).

- `debug`: Logical, default FALSE. When TRUE, prints diagnostic messages during function execution to help troubleshoot issues.

## 5. Creating Sankey Visualization Examples

This section presents several Sankey diagram visualizations that demonstrate different perspectives on the GeBiz procurement data. Each visualization highlights specific patterns and relationships within the procurement network, helping stakeholders understand how government funds flow from ministries to agencies to suppliers.

### 5.1 Filtering by Ministry

This visualization focuses on the Ministry of Education's procurement flows, revealing how education funding distributes across agencies and suppliers. It highlights the ministry's key procurement channels and major supplier relationships.

```{r}
# Create Sankey diagram for Ministry of Education
moe_sankey <- create_sankey(
  data = procurement_enriched,
  year_filter = 2023,
  ministry_filter = c("MINISTRY OF EDUCATION"),
  min_value = 1000000,
  top_k_agencies = 100,
  top_k_suppliers = 20,
  supplier_char_limit = 30
)

# Save the widget to an HTML file
saveNetwork(moe_sankey, file = paste0("sankey_moe_", 2023, ".html"))
```

```{=html}
<iframe src="sankey_moe_2023.html" width="100%" height="600px" frameborder="0"></iframe>
```

The second visualization compares the Ministry of Health and Ministry of Education, with suppliers grouped by financial grade. This comparison reveals differences in agency structures, supplier profiles, and procurement value distributions between these major ministries.

```{r}
# Create Sankey diagram comparing two major ministries
health_defence_sankey <- create_sankey(
  data = procurement_enriched,
  year_filter = 2023,
    ministry_filter = c("MINISTRY OF HEALTH", "MINISTRY OF EDUCATION"),
  min_value = 5000000,
  top_k_agencies = 10, 
  top_k_suppliers = 15,  
  group_by_grade = TRUE
)

saveNetwork(health_defence_sankey, file = paste0("sankey_health_education_", 2023, ".html"))
```

```{=html}
<iframe src="sankey_health_education_2023.html" width="100%" height="600px" frameborder="0"></iframe>
```

### 5.2 Filtering by Agency

This Sankey diagram examines the Land Transport Authority's procurement patterns, showing its ministry connection and how its funds flow to suppliers of varying financial capacities. This view helps understand procurement strategies within key infrastructure agencies.

```{r}
# Create Sankey diagram for Land Transport Authority
lta_sankey <- create_sankey(
  data = procurement_enriched,
  year_filter = 2023,
  agency_filter = c("Land Transport Authority"),
  min_value = 500000, 
  top_k_suppliers = 25
)

saveNetwork(lta_sankey, file = paste0("sankey_lta_", 2023, ".html"))
```

```{=html}
<iframe src="sankey_lta_2023.html" width="100%" height="600px" frameborder="0"></iframe>
```

### 5.3 Filtering by Suppliers

#### Large Suppliers Analysis
This visualization focuses on the largest suppliers (S8-S10 financial grades) to understand how government procurement from major companies flows through different ministries and agencies. This perspective helps identify which large suppliers are receiving significant government contracts and through which channels.

```{r}
# Identify top 10 suppliers by total contract value
top_suppliers <- procurement_enriched %>%
  group_by(supplier_name) %>%
  summarize(total_value = sum(awarded_amt, na.rm = TRUE)) %>%
  arrange(desc(total_value)) %>%
  head(10) %>%
  pull(supplier_name)

# Create Sankey diagram for top suppliers
top_suppliers_sankey <- create_sankey(
  data = procurement_enriched,
  supplier_filter = top_suppliers,
  min_value = 500000, 
  top_k_ministries = 15,
  top_k_agencies = 25,   
  debug = FALSE
)

saveNetwork(top_suppliers_sankey, file = paste0("sankey_top_suppliers_", 2023, ".html"))
```

```{=html}
<iframe src="sankey_top_suppliers_2023.html" width="100%" height="600px" frameborder="0"></iframe>
```

#### SME Suppliers Analysis
This view highlights Small and Medium Enterprise suppliers (S2-S7 financial grades), showing which ministries and agencies engage more with smaller businesses. The analysis supports policy objectives related to SME participation in government procurement.

```{r}
# Get small-medium sized suppliers (those with lower financial grades)
sme_suppliers <- procurement_enriched %>%
  filter(financial_grade %in% c("S2", "S3", "S4", "S5", "S6", "S7")) %>%
  group_by(supplier_name) %>%
  summarize(total_value = sum(awarded_amt, na.rm = TRUE)) %>%
  arrange(desc(total_value)) %>%
  head(15) %>%
  pull(supplier_name)

# Create Sankey diagram for SME suppliers
sme_suppliers_sankey <- create_sankey(
  data = procurement_enriched,
  # Consider removing the year filter to see all data for these suppliers
  # year_filter = 2023,  
  supplier_filter = sme_suppliers,
  min_value = 100000,   # Lower threshold for SMEs
  top_k_ministries = 10,  # Show up to 10 ministries
  top_k_agencies = 20,
  group_by_grade = FALSE
)

saveNetwork(sme_suppliers_sankey, file = paste0("sankey_sme_suppliers_", 2023, ".html"))
```

```{=html}
<iframe src="sankey_sme_suppliers_2023.html" width="100%" height="600px" frameborder="0"></iframe>
```
### 5.4 Top K Analysis

This visualization presents the most significant procurement flows across the entire government for 2023. It quickly identifies the dominant ministries, key agencies, and major suppliers by procurement value, providing a strategic overview of government spending patterns.

```{r}
# Create Sankey diagram showing top entities across all dimensions
top_k_sankey <- create_sankey(
  data = procurement_enriched,
  year_filter = 2023,
  top_k_ministries = 5,  
  top_k_agencies = 10, 
  top_k_suppliers = 20, 
  min_value = 500000
)

saveNetwork(top_k_sankey, file = "sankey_top_k_2023.html")
```

```{=html}
<iframe src="sankey_top_k_2023.html" width="100%" height="600px" frameborder="0"></iframe>
```


## 6. UI Design for Interactive Dashboard

This section outlines the user interface design for the proposed GeBiz Procurement Data Visualization dashboard. The interactive dashboard will allow users to explore procurement data through various filters and visualization options.

### 6.1 Dashboard Layout

The dashboard will follow a three-panel layout design:

1. **Control Panel (Left)**: Contains all filtering and customization options
2. **Visualization Area (Center)**: Displays the selected Sankey diagram or other visualizations
3. **Information Panel (Right)**: Shows additional context, metrics, and details about selected elements

This layout ensures that users can easily navigate between different views while maintaining context.

### 6.2 Control Panel Components

The control panel will include the following UI components:

#### 6.2.1 Date Range Selector
- **Type**: Slider or dropdown
- **Function**: Allows users to filter data by year (2019-2023)
- **Default**: Most recent complete year

#### 6.2.2 Entity Type Selectors
- **Type**: Tabbed interface with three tabs (Ministry, Agency, Supplier)
- **Function**: Determines the main focus of the analysis
- **Default**: Ministry view

#### 6.2.3 Entity Selection
- **Type**: Searchable multi-select dropdown
- **Function**: Allows selection of specific ministries, agencies, or suppliers
- **Features**: Includes autocomplete and "Select Top K" options

#### 6.2.4 Visualization Controls
- **Type**: Radio buttons and sliders
- **Functions**:
  - Toggle between individual suppliers and supplier groups (by financial grade)
  - Adjust minimum flow value threshold
  - Set "Top K" limits for ministries, agencies, and suppliers
  - Customize node display options (abbreviations vs. full names)

#### 6.2.5 Export and Share Options
- **Type**: Button group
- **Functions**: Save visualization as PNG/PDF, share link, download data

### 6.3 Visualization Area Components

#### 6.3.1 Sankey Diagram
- **Type**: Interactive SVG
- **Features**:
  - Zoom and pan controls
  - Node dragging for better arrangement
  - Hover tooltips showing detailed information
  - Click interaction to highlight related flows
  - Animation during transitions between different views

#### 6.3.2 Alternative Visualizations
- **Type**: Tabbed interface
- **Options**:
  - Sankey Diagram (default)
  - Network Graph
  - Treemap
  - Bar Charts (for comparative analysis)

### 6.4 Information Panel Components

#### 6.4.1 Selection Details
- **Type**: Dynamic information cards
- **Content**: Detailed information about selected ministries, agencies, or suppliers
- **Features**: Updates when users click on nodes in the visualization

#### 6.4.2 Summary Metrics
- **Type**: Key performance indicators (KPIs)
- **Content**:
  - Total procurement value
  - Number of contracts
  - Average contract value
  - Supplier diversity metrics

#### 6.4.3 Trend Analysis
- **Type**: Small multiple charts
- **Content**: Time series showing procurement patterns for selected entities

### 6.5 Interactive Features

The UI design incorporates several interactive features to enhance user experience:

1. **Cross-filtering**: Selections in one panel affect what's displayed in others
2. **Responsive layout**: Adapts to different screen sizes
3. **State persistence**: Maintains user selections during session
4. **Progressive disclosure**: Shows relevant options based on current context
5. **Search functionality**: Enables quick location of specific entities
6. **Guided analysis**: Optional tooltips explaining dashboard features

### 6.6 Color Scheme and Accessibility

The dashboard follows a consistent color scheme:

- **Ministries**: Blue shades (#1f77b4 and variants)
- **Agencies**: Orange shades (#ff7f0e and variants)
- **Suppliers**: Green shades (#2ca02c and variants)
- **Financial grades**: Sequential color scale from light to dark

Accessibility features include:

- Color-blind friendly palette
- Sufficient contrast ratios
- Text alternatives for graphical elements
- Keyboard navigation support
- Screen reader compatibility

### 6.7 Mockup Preview

Below is a schematic representation of the dashboard layout:


```{=html}
<iframe src="mockup1.html" width="100%" height="600px" frameborder="0"></iframe>
```

This UI design provides a flexible, intuitive interface for exploring the complex relationships in GeBiz procurement data while maintaining consistent visual language and accessibility standards.