---
title: "Hands-on Exercise 8a: Choropleth Mapping with R"
author: "Sindy"
date-modified: "last-modified"
execute:
  echo: true
  eval: true
  warning: false
  freeze: true
---

## 1. Overview

Choropleth mapping involves the symbolization of enumeration units, such as countries, provinces, states, counties or census units, using area patterns or graduated colors. For example, a social scientist may need to use a choropleth map to portray the spatial distribution of aged population of Singapore by Master Plan 2014 Subzone Boundary.

This chapter explores how to plot functional and truthful choropleth maps by using the [**tmap**](https://cran.r-project.org/web/packages/tmap/) package in R.

It is advisable to read the functional description of each function before using them.

## 2. Getting Started

The key R package used is [**tmap**](https://cran.r-project.org/web/packages/tmap/) package in R. Beside **tmap** package, four other R packages will be used:

-   [**readr**](https://readr.tidyverse.org/) for importing delimited text file,
-   [**tidyr**](https://tidyr.tidyverse.org/) for tidying data,
-   [**dplyr**](https://dplyr.tidyverse.org/) for wrangling data and
-   [**sf**](https://cran.r-project.org/web/packages/sf/index.html) for handling geospatial data.

Among the four packages, **readr**, **tidyr** and **dplyr** are part of **tidyverse** package.

The code chunk below will be used to install and load these packages:

```{r}
pacman::p_load(sf, tmap, tidyverse, classInt)
```

### 2.1 The Data

Two data sets will be used to create the choropleth map:

-   Master Plan 2014 Subzone Boundary (Web) (i.e. `MP14_SUBZONE_WEB_PL`) in ESRI shapefile format. It can be downloaded at [data.gov.sg](https://data.gov.sg/). This is a geospatial data. It consists of the geographical boundary of Singapore at the planning subzone level. The data is based on URA Master Plan 2014.

-   Singapore Residents by Planning Area / Subzone, Age Group, Sex and Type of Dwelling, June 2011-2020 in csv format (i.e. `respopagesextod2011to2020.csv`). This is an aspatial data file. It can be downloaded at [Department of Statistics, Singapore](https://www.singstat.gov.sg/). Although it does not contain any coordinates values, its PA and SZ fields can be used as unique identifiers to geocode to `MP14_SUBZONE_WEB_PL` shapefile.

### 2.2 Importing Geospatial Data into R

The code chunk below uses the *st_read()* function of **sf** package to import `MP14_SUBZONE_WEB_PL` shapefile into R as a simple feature data frame called `mpsz`.

```{r}
mpsz <- st_read(dsn = "data/geospatial", 
                layer = "MP14_SUBZONE_WEB_PL")
```

To examine the content of `mpsz`:

```{r}
mpsz
```

### 2.3 Importing Attribute Data into R

Next, we import *respopagsex2011to2020.csv* file and save it into an R dataframe called *popdata* using the *read_csv()* function of **readr** package:

```{r}
popdata <- read_csv("data/aspatial/respopagesextod2011to2020.csv")
```

## 3. Data Preparation

Before a thematic map can be prepared, we need to prepare a data table with year 2020 values. The data table should include the variables PA, SZ, YOUNG, ECONOMY ACTIVE, AGED, TOTAL, and DEPENDENCY.

-   YOUNG: age group 0 to 4 until age group 20 to 24,
-   ECONOMY ACTIVE: age group 25-29 until age group 60-64,
-   AGED: age group 65 and above,
-   TOTAL: all age group, and
-   DEPENDENCY: the ratio between young and aged against economy active group

### 3.1 Data wrangling

The following data wrangling and transformation functions will be used:

-   *pivot_wider()* of **tidyr** package, and
-   *mutate()*, *filter()*, *group_by()* and *select()* of **dplyr** package

```{r}
popdata2020 <- popdata %>%
  filter(Time == 2020) %>%
  group_by(PA, SZ, AG) %>%
  summarise(`POP` = sum(`Pop`)) %>%
  ungroup() %>%
  pivot_wider(names_from=AG, 
              values_from=POP) %>%
  mutate(YOUNG = rowSums(.[3:6])
         +rowSums(.[12])) %>%
mutate(`ECONOMY ACTIVE` = rowSums(.[7:11])+
rowSums(.[13:15]))%>%
mutate(`AGED`=rowSums(.[16:21])) %>%
mutate(`TOTAL`=rowSums(.[3:21])) %>%  
mutate(`DEPENDENCY` = (`YOUNG` + `AGED`)
/`ECONOMY ACTIVE`) %>%
  select(`PA`, `SZ`, `YOUNG`, 
       `ECONOMY ACTIVE`, `AGED`, 
       `TOTAL`, `DEPENDENCY`)
```

### 3.2 Understanding Data Normalization in Choropleth Maps

When creating choropleth maps, it's critical to normalize data properly. The DEPENDENCY ratio calculated above is a good example of normalization - showing the proportion of dependent population (young and elderly) relative to the working population rather than raw counts. This approach reduces the visual bias that can occur when larger areas naturally contain more people.

```{r}
popdata2020 <- popdata2020 %>%
  mutate(DEPENDENCY_CLASS = case_when(
    DEPENDENCY < 0.4 ~ "Low",
    DEPENDENCY < 0.7 ~ "Moderate",
    TRUE ~ "High"
  ))

summary(popdata2020$DEPENDENCY)
```

### 3.3 Joining the attribute data and geospatial data

Before performing the georelational join, we need to convert the values in PA and SZ fields to uppercase because the values in SUBZONE_N and PLN_AREA_N are in uppercase.

```{r}
popdata2020 <- popdata2020 %>%
  mutate_at(.vars = vars(PA, SZ), 
          .funs = funs(toupper)) %>%
  filter(`ECONOMY ACTIVE` > 0)
```

Next, *left_join()* of **dplyr** is used to join the geographical data and attribute table using planning subzone name e.g. *SUBZONE_N* and *SZ* as the common identifier.

```{r}
mpsz_pop2020 <- left_join(mpsz, popdata2020,
                          by = c("SUBZONE_N" = "SZ"))
```

The *left_join()* function with `mpsz` simple feature data frame as the left data table ensures that the output will be a simple features data frame.

```{r}
write_rds(mpsz_pop2020, "data/rds/mpszpop2020.rds")
```

## 4. Choropleth Mapping Geospatial Data Using *tmap*

Two approaches can be used to prepare thematic maps using *tmap*:

-   Plotting a thematic map quickly by using *qtm()*.
-   Plotting highly customizable thematic maps by using tmap elements.

### 4.1 Plotting a choropleth map quickly by using *qtm()*

The easiest and quickest way to draw a choropleth map using **tmap** is using *qtm()*. It is concise and provides a good default visualization in many cases.

```{r}
tmap_mode("plot")
qtm(mpsz_pop2020, 
    fill = "DEPENDENCY")
```

Note that:
-   *tmap_mode()* with "plot" option is used to produce a static map. For interactive mode, "view" option should be used.
-   *fill* argument is used to map the attribute (i.e. DEPENDENCY)

### 4.2 Interactive vs. Static Mapping

The tmap package offers both static ("plot") and interactive ("view") modes. Interactive maps are particularly useful for exploratory analysis and presentations, allowing users to zoom, pan, and click features for more information.

```{r}
tmap_mode("view")
qtm(mpsz_pop2020, 
    fill = "DEPENDENCY")
tmap_mode("plot")
```

The interactive mode is excellent for initial data exploration, while static maps are better for formal reports and publications where consistent display across devices is important.

### 4.3 Creating a choropleth map by using *tmap*'s elements

Despite the usefulness of *qtm()* for drawing a choropleth map quickly and easily, the disadvantage is that it makes aesthetics of individual layers harder to control. To draw a high quality cartographic choropleth map, **tmap**'s drawing elements should be used.

```{r}
tm_shape(mpsz_pop2020)+
  tm_fill("DEPENDENCY", 
          style = "quantile", 
          palette = "Blues",
          title = "Dependency ratio") +
  tm_layout(main.title = "Distribution of Dependency Ratio by planning subzone",
            main.title.position = "center",
            main.title.size = 1.2,
            legend.height = 0.45, 
            legend.width = 0.35,
            frame = TRUE) +
  tm_borders(alpha = 0.5) +
  tm_compass(type="8star", size = 2) +
  tm_scale_bar() +
  tm_grid(alpha =0.2) +
  tm_credits("Source: Planning Sub-zone boundary from Urban Redevelopment Authorithy (URA)\n and Population data from Department of Statistics DOS", 
             position = c("left", "bottom"))
```

### 4.4 Drawing a choropleth map using *tm_polygons()*

To draw a choropleth map showing the geographical distribution of a selected variable by planning subzone, we just need to assign the target variable such as *Dependency* to *tm_polygons()*.

```{r}
tm_shape(mpsz_pop2020)+
  tm_polygons("DEPENDENCY")
```

Key points about *tm_polygons()*:
-   The default interval binning used is called "pretty"
-   The default color scheme is `YlOrRd` of ColorBrewer
-   Missing values are shaded in grey by default

### 4.5 Drawing a choropleth map using *tm_fill()* and *tm_border()*

*tm_polygons()* is actually a wrapper of *tm_fill()* and *tm_border()*. *tm_fill()* shades the polygons using the default color scheme and *tm_borders()* adds the borders of the shapefile onto the choropleth map.

```{r}
tm_shape(mpsz_pop2020)+
  tm_fill("DEPENDENCY")
```

To add the boundary of the planning subzones:

```{r}
tm_shape(mpsz_pop2020)+
  tm_fill("DEPENDENCY") +
  tm_borders(lwd = 0.1,  alpha = 1)
```

### 4.6 Handling Missing Data in Choropleth Maps

Missing data is a common issue in spatial datasets. It's important to represent it appropriately in choropleth maps to avoid misleading visualizations. By default, tmap shows missing values in grey, but we can customize this representation:

```{r}
# Create a copy with some missing values for demonstration
mpsz_pop2020_demo <- mpsz_pop2020
mpsz_pop2020_demo$DEPENDENCY[1:5] <- NA

tm_shape(mpsz_pop2020_demo)+
  tm_fill("DEPENDENCY",
          title = "Dependency Ratio",
          textNA = "Missing Data",
          colorNA = "white",
          showNA = TRUE) +
  tm_borders(alpha = 0.5)
```

Proper handling of missing data enhances the credibility of visualizations and prevents misinterpretation. Always specify clear visual cues for missing values and include explanations in legends.

### 4.7 Data classification methods of **tmap**

Most choropleth maps employ some method of data classification. The point of classification is to take a large number of observations and group them into data ranges or classes.

**tmap** provides a total of ten data classification methods, namely: *fixed*, *sd*, *equal*, *pretty* (default), *quantile*, *kmeans*, *hclust*, *bclust*, *fisher*, and *jenks*.

To define a data classification method, the *style* argument of *tm_fill()* or *tm_polygons()* is used.

#### Plotting choropleth maps with built-in classification methods

The code below shows a quantile data classification that uses 5 classes:

```{r}
tm_shape(mpsz_pop2020)+
  tm_fill("DEPENDENCY",
          n = 5,
          style = "jenks") +
  tm_borders(alpha = 0.5)
```

Here's an example using the *equal* data classification method:

```{r}
tm_shape(mpsz_pop2020)+
  tm_fill("DEPENDENCY",
          n = 5,
          style = "equal") +
  tm_borders(alpha = 0.5)
```

Notice that the distribution in the quantile data classification method is more evenly distributed than in the equal data classification method.

### 4.8 Statistical Considerations in Classification Methods

The choice of classification method can significantly impact the story your map tells. Here's a statistical comparison of different classification methods using summary statistics:

```{r}
# Calculate class breaks using different methods
jenks_breaks <- classIntervals(mpsz_pop2020$DEPENDENCY, n = 5, style = "jenks")$brks
equal_breaks <- classIntervals(mpsz_pop2020$DEPENDENCY, n = 5, style = "equal")$brks
quantile_breaks <- classIntervals(mpsz_pop2020$DEPENDENCY, n = 5, style = "quantile")$brks

# Display the breaks for comparison
data.frame(
  Method = c("Jenks", "Equal", "Quantile"),
  Break1 = c(jenks_breaks[2], equal_breaks[2], quantile_breaks[2]),
  Break2 = c(jenks_breaks[3], equal_breaks[3], quantile_breaks[3]),
  Break3 = c(jenks_breaks[4], equal_breaks[4], quantile_breaks[4]),
  Break4 = c(jenks_breaks[5], equal_breaks[5], quantile_breaks[5])
)
```

The Jenks method minimizes within-class variance and maximizes between-class differences, making it ideal for identifying natural clusters in data. Equal interval is best for evenly distributed data, while quantile ensures each class has equal number of observations but may group dissimilar values together.

#### Plotting choropleth map with custom breaks

For all the built-in styles, the category breaks are computed internally. To override these defaults, breakpoints can be set explicitly using the *breaks* argument of *tm_fill()*. In **tmap**, breaks include minimum and maximum values, so to create n categories, n+1 elements must be specified (values must be in increasing order).

Let's get some descriptive statistics on the DEPENDENCY field before setting break points:

```{r}
summary(mpsz_pop2020$DEPENDENCY)
```

With reference to the results above, we set break points at 0.60, 0.70, 0.80, and 0.90, plus a minimum of 0 and maximum of 1.00:

```{r}
tm_shape(mpsz_pop2020)+
  tm_fill("DEPENDENCY",
          breaks = c(0, 0.60, 0.70, 0.80, 0.90, 1.00)) +
  tm_borders(alpha = 0.5)
```

### 4.9 Color Scheme

**tmap** supports color ramps either defined by the user or a set of predefined color ramps from the **RColorBrewer** package.

#### Using ColourBrewer palette

To change the color, assign the preferred color to the *palette* argument of *tm_fill()*:

```{r}
tm_shape(mpsz_pop2020)+
  tm_fill("DEPENDENCY",
          n = 6,
          style = "quantile",
          palette = "Blues") +
  tm_borders(alpha = 0.5)
```

To reverse the color shading, add a "-" prefix:

```{r}
tm_shape(mpsz_pop2020)+
  tm_fill("DEPENDENCY",
          style = "quantile",
          palette = "-Greens") +
  tm_borders(alpha = 0.5)
```

### 4.10 Color Theory and Accessibility in Cartography

Choosing appropriate colors for maps is crucial for both effectiveness and accessibility. Different types of data require different color schemes:

```{r}
# Sequential data (like our dependency ratio)
tm_shape(mpsz_pop2020)+
  tm_fill("DEPENDENCY",
          style = "quantile",
          palette = "Blues",
          title = "Sequential (Blues)") +
  tm_borders(alpha = 0.5)

# Diverging data (example: deviation from mean)
mpsz_pop2020$DEVIATION <- mpsz_pop2020$DEPENDENCY - mean(mpsz_pop2020$DEPENDENCY, na.rm=TRUE)
tm_shape(mpsz_pop2020)+
  tm_fill("DEVIATION",
          style = "quantile",
          palette = "RdBu",
          title = "Diverging (RdBu)") +
  tm_borders(alpha = 0.5)

# Colorblind-friendly palette
tm_shape(mpsz_pop2020)+
  tm_fill("DEPENDENCY",
          style = "quantile",
          palette = "viridis",
          title = "Colorblind-friendly") +
  tm_borders(alpha = 0.5)
```

### 4.11 Map Layouts

Map layout refers to the combination of all map elements into a cohesive map. Map elements include the objects to be mapped, title, scale bar, compass, margins, and aspect ratios.

#### Map Legend

In **tmap**, several *legend* options are provided to change the placement, format, and appearance of the legend:

```{r}
tm_shape(mpsz_pop2020)+
  tm_fill("DEPENDENCY", 
          style = "jenks", 
          palette = "Blues", 
          legend.hist = TRUE, 
          legend.is.portrait = TRUE,
          legend.hist.z = 0.1) +
  tm_layout(main.title = "Distribution of Dependency Ratio by planning subzone \n(Jenks classification)",
            main.title.position = "center",
            main.title.size = 1,
            legend.height = 0.45, 
            legend.width = 0.35,
            legend.outside = FALSE,
            legend.position = c("right", "bottom"),
            frame = FALSE) +
  tm_borders(alpha = 0.5)
```

#### Map style

**tmap** allows a wide variety of layout settings to be changed using *tmap_style()*:

```{r}
tm_shape(mpsz_pop2020)+
  tm_fill("DEPENDENCY", 
          style = "quantile", 
          palette = "-Greens") +
  tm_borders(alpha = 0.5) +
  tmap_style("classic")
```

#### Cartographic Furniture

**tmap** provides arguments to draw other map furniture such as compass, scale bar, and grid lines:

```{r}
tm_shape(mpsz_pop2020)+
  tm_fill("DEPENDENCY", 
          fill.scale = tm_scale_intervals(style = "quantile", 
                                         values = "brewer.blues"),
          fill.legend = tm_legend(title = "No. of persons")) +
  tm_borders(fill_alpha = 0.5) +
  tm_compass(type="8star", size = 2) +
  tm_grid(lwd = 0.1, alpha = 0.2) +
  tm_credits("Source: Planning Sub-zone boundary from Urban Redevelopment Authority (URA)\n and Population data from Department of Statistics DOS", 
             position = c("left", "bottom")) +
  tm_layout(frame = TRUE,
            legend.height = 0.45, 
            legend.width = 0.35,
            main.title = "Distribution of Dependency Ratio",
            main.title.position = "center",
            main.title.size = 1.2,
            main.title.fontface = "bold",
            sub.title = "by planning subzone",
            sub.title.position = "center",
            sub.title.size = 1.0)
```

```{r}
tm_shape(mpsz_pop2020) +
  tm_fill("DEPENDENCY", 
          fill.scale = tm_scale(values = "brewer.blues")) +
  tm_borders(fill_alpha = 0.5) +
  tm_title("Distribution of Dependency Ratio by planning subzone") +
  tm_compass(type = "8star", size = 2) +
  tm_scalebar() +
  tm_grid() +
  tm_credits("Source: Planning Sub-zone boundary from URA and Population data from DOS", 
             position = c("left", "bottom"))
```



Reset to the default style:

```{r}
tmap_style("white")
```

### 4.12 Drawing Small Multiple Choropleth Maps

**Small multiple maps**, also referred to as **facet maps**, are composed of many maps arranged side-by-side, and sometimes stacked vertically. Small multiple maps enable the visualization of how spatial relationships change with respect to another variable, such as time.

In **tmap**, small multiple maps can be plotted in three ways:

-   by assigning multiple values to at least one of the aesthetic arguments,
-   by defining a group-by variable in *tm_facets()*, and
-   by creating multiple stand-alone maps with *tmap_arrange()*.

#### By assigning multiple values to at least one of the aesthetic arguments

Creating small multiple choropleth maps by defining ***ncols*** in **tm_fill()**:

```{r}
tm_shape(mpsz_pop2020)+
  tm_fill(c("YOUNG", "AGED"),
          style = "equal", 
          palette = "Blues") +
  tm_borders(alpha = 0.5) +
  tmap_style("white")
```

Creating small multiple choropleth maps by assigning multiple values to aesthetic arguments:

```{r}
tm_shape(mpsz_pop2020)+ 
  tm_polygons(c("DEPENDENCY","AGED"),
          style = c("equal", "quantile"), 
          palette = list("Blues","Greens"))
```

#### By defining a group-by variable in *tm_facets()*

Creating multiple small choropleth maps using **tm_facets()**:

```{r}
dependency_breaks <- seq(min(mpsz_pop2020$DEPENDENCY, na.rm = TRUE),
                        max(mpsz_pop2020$DEPENDENCY, na.rm = TRUE), 
                        length.out = 6)

regions <- unique(mpsz_pop2020$REGION_N)
region_maps <- lapply(regions, function(region) {
  region_data <- mpsz_pop2020[mpsz_pop2020$REGION_N == region,]
  tm_shape(region_data) +
    tm_fill("DEPENDENCY",
            style = "fixed",
            breaks = dependency_breaks,
            palette = "Blues",
            legend.show = FALSE) +
    tm_borders(alpha = 0.5) +
    tm_layout(title = region,
              frame = TRUE) +
    tmap_style("white")
})

legend_map <- tm_shape(mpsz_pop2020) +
  tm_fill("DEPENDENCY",
          style = "fixed",
          breaks = dependency_breaks,
          palette = "Blues") +
  tm_layout(legend.only = TRUE,
            legend.position = c("right", "bottom"),
            frame = FALSE)

tmap_arrange(c(region_maps, list(legend_map)), 
             ncol = 3,
             heights = c(1, 1, 0.1)) 
```


### 4.13 Mapping Spatial Object Meeting a Selection Criterion

Instead of creating small multiple choropleth maps, you can also use selection functions to map spatial objects meeting specific criteria:

```{r}
tm_shape(mpsz_pop2020[mpsz_pop2020$REGION_N=="CENTRAL REGION", ])+
  tm_fill("DEPENDENCY", 
          style = "quantile", 
          palette = "Blues", 
          legend.hist = TRUE) +
  tm_layout(legend.outside = TRUE,
            legend.outside.position = "right",
            legend.title.size = 0.8,
            legend.title.position = c("center", "top"),
            legend.title.space = 1.5,
            frame = FALSE) +
  tm_borders(alpha = 0.5)
```



## 5. Reference

Credits to [Prof Kam](https://r4va.netlify.app/chap21).

